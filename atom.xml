<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[龍昌博客]]></title>
  <link href="http://www.xefan.com/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2016-11-03T20:54:47+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过串口连接raspberry Pi]]></title>
    <link href="http://www.xefan.com/archives/84166.html"/>
    <updated>2016-11-03T13:35:57+08:00</updated>
    <id>http://www.xefan.com/archives/84166-通过串口连接raspberry pi</id>
    <content type="html"><![CDATA[<p>最近在玩树莓派，有时没有网络，也没有显示器，此时如果想要连接树莓派执行一些操作的话会很麻烦。
因为之前玩过 ARM 的开发板编程，因此想能不能通过串口登录到 pi 呢。于是网上查了一下，还真的可以哦。
以下就作为备忘笔记记录一下操作过程。</p>

<p>1.首先需要一根 USB 转串口的线，如果没有的话可以去某宝上买一根吧，反正也不贵。我选的是 PL2303。
再根据系统以及芯片的不同而下载安装不同的驱动程序。 对于 mac OS 用户执行命令： <code>ls /dev/ | grep tty.usb</code> ，
如果驱动都安装正确的话应该是会有输出结果的。</p>

<p>2.然后在 pi 的系统上启用 serial。我安装的是 debian 系统，执行命令： <code>sudo raspi-config</code> ，
选择 <code>advanced options</code> -> <code>serial</code> 进行启用 serial。</p>

<p>3.串口连接</p>

<p>对于 Raspberry Pi3 的 GPIO 引脚如下：<br/>
<img src="http://www.xefan.com/wp-content/uploads/2016/11/03/pi3_gpio.png" alt="pi3_gpio" /></p>

<p>串口线与 pi 的连接方式为： GND -> GND, RXD -> TXD, TXD -> RXD， 如图：<br/>
<img src="http://www.xefan.com/wp-content/uploads/2016/11/03/pi3-board.png" alt="pi3-board" /></p>

<p>最后在电脑上使用串口连接软件进行连接，对应的串口设置为 115200 8N1，如图：<br/>
<img src="http://www.xefan.com/wp-content/uploads/2016/11/03/raspberry-pi-serial.png" alt="raspberry-pi-serial" /></p>

<p>参考资料： <a href="http://elinux.org/RPi_Serial_Connection">http://elinux.org/RPi_Serial_Connection</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CodePush对ReactNative进行热更新]]></title>
    <link href="http://www.xefan.com/archives/84165.html"/>
    <updated>2016-08-20T16:15:34+08:00</updated>
    <id>http://www.xefan.com/archives/84165-使用CodePush对ReactNative进行热更新</id>
    <content type="html"><![CDATA[<p><a href="http://microsoft.github.io/code-push/">CodePush</a>是微软提供的可用于对 Cordova 和 ReactNative 进行代码热更新的库。
在其官方的文档中已经写得很详细了，按照其说明来配置即可。我这里只是对在使用过程中遇到的一些坑作为总结。</p>

<h2>创建应用</h2>

<p>首先注册一个账号并创建一个 CodePush 的应用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g code-push-cli
</span><span class='line'>code-push register
</span><span class='line'>code-push app add &lt;appName&gt;</span></code></pre></td></tr></table></div></figure>


<h2>安装配置CodePush</h2>

<p>按照说明 <a href="https://github.com/Microsoft/react-native-code-push#getting-started%EF%BC%8C%E4%BD%BF%E7%94%A8">https://github.com/Microsoft/react-native-code-push#getting-started%EF%BC%8C%E4%BD%BF%E7%94%A8</a> rnpm 进行安装即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install --save react-native-code-push
</span><span class='line'>rnpm link react-native-code-push</span></code></pre></td></tr></table></div></figure>


<p>安装完成之后还需要再进行一些配置，对于 iOS 需要将 <code>AppDelegate.m</code> 文件中的 <code>jsCodeLocation</code> 修改为： <code>jsCodeLocation = [CodePush bundleURL];</code>。
同时再在 <code>Info.plist</code> 文件中添加一项 <code>CodePushDeploymentKey</code>，其值为 CodePush 应用的 Deployment Key。</p>

<p>对于 android 需要在 <code>MainActivity</code> 类的 <code>getPackages</code> 方法中设置 Deployment Key。同时根据 ReactNative 的版本不同而使用不同的方法来设置 <code>getJSBundleFile</code>，
参考： <code>https://github.com/Microsoft/react-native-code-push#android-setup</code>。</p>

<h2>程序更新</h2>

<p>在安装、配置完成之后，即可以使用CodePush进行程序的更新操作了。
根据官方的说明只需要调用 <code>CodePush.sync()</code> 即可完成自动更新操作。
我针对自己的情况再进行封装了一下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function syncCodePush() {
</span><span class='line'>  NetInfo.fetch().done(
</span><span class='line'>    (reach) =&gt; {
</span><span class='line'>      // 检查网络环境
</span><span class='line'>      if (_.includes(['wifi', 'WIFI', 'VPN'], reach)) {
</span><span class='line'>        CodePush.sync().done(
</span><span class='line'>          () =&gt; {
</span><span class='line'>            // 检查更新成功
</span><span class='line'>          },
</span><span class='line'>          (err) =&gt; {
</span><span class='line'>            // 更新失败
</span><span class='line'>          }
</span><span class='line'>        );
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>  );
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上函数是保证只有在wifi的网络环境下才进行更新操作，同时由于 <code>CodePush.sync()</code> 返回的是一个 <code>Promise</code> 对象，
在这里我就遇到了由于网络异常而下载出错，从而导致 app 崩溃。因此需要处理 <code>reject</code> 的情况。</p>

<p>有时在程序更新之后的首次运行时可能会需要作一些迁移的操作，这里可以使用 <code>getUpdateMetadata</code> 来检查程序是不是首次运行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Codepush.getUpdateMetadata().then(
</span><span class='line'>  (update) =&gt; {
</span><span class='line'>    if (update && update.isFirstRun) {
</span><span class='line'>      // 首次运行执行一些操作
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>).done( callback );</span></code></pre></td></tr></table></div></figure>


<h2>发布更新</h2>

<p>在 app 发布安装包发布出去之后，已经有用户下载安装了。此时如果再有 js 代码更新或者图片文件的改动的话，可以使用 CodePush 进行发布。
进入 ReactNative 的项目根目录，使用 code-push 命令进行发布更新。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>code-push release-react DemoApp ios -m -d Staging --des "更新描述" -t "~2.0.0"</span></code></pre></td></tr></table></div></figure>


<p>以上命令是发布一个紧急更新到 Staging ，只有 ios appp 的版本为 2.0~3.0 的才会下载该更新包。
由于是紧急更新，app在下载安装完成之后会自动重启应用该更新包。否则的话就需要用户下次手动启动app时该更新包才会生效。</p>

<p>在 CodePush 中针对 ios 和 android 可以共用一个应用，只是我个人感觉这样在管理 deployment history 时不太方便。
因此我通常会创建两个应用，例如： DemoApp-iOS、DemoApp-Android 这样的。</p>

<p>需要注意的是，由于 CodePush 的 server 是在国外，因此下载的速度会比较慢。</p>

<p>最后我自己使用 Electron + Vue.js 开发了一个 CodePush 的简易管理工具，<a href="https://github.com/wusuopu/code-push-gui">https://github.com/wusuopu/code-push-gui</a> 。
可以对 CodePush 的 app 跟 deployment 进行简单的管理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactNative获取设备屏幕尺寸]]></title>
    <link href="http://www.xefan.com/archives/84164.html"/>
    <updated>2016-07-31T16:25:17+08:00</updated>
    <id>http://www.xefan.com/archives/84164-ReactNative获取设备屏幕尺寸</id>
    <content type="html"><![CDATA[<p>在做移动开发过程中，有时我们需要适配不同尺寸大小的屏幕。这里我们就需要到获取设备屏幕的大小。
由于我们是使用的 ReactNative 来开发手机 app，这里就介绍一下在 ReactNative 中如何获取到设备屏幕的分辨率的。
也算是对之前踩坑的总结吧。</p>

<p>在此之前需要先了解 ReactNative 中的尺寸计算单位，它并不是使用的px。<a href="http://facebook.github.io/react-native/releases/next/docs/pixelratio.html">http://facebook.github.io/react-native/releases/next/docs/pixelratio.html</a></p>

<h2>使用 Dimensions 模块</h2>

<p>在 ReactNative 中有一个 Dimensions 模块，通过它可以获取当前设备的屏幕分辨率。
参考： <a href="http://facebook.github.io/react-native/releases/next/docs/dimensions.html">http://facebook.github.io/react-native/releases/next/docs/dimensions.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var {height, width} = Dimensions.get('window');</span></code></pre></td></tr></table></div></figure>


<p>刚开始时我也是使用这种方法来得到整个屏幕的分辨率的，感觉轻松搞定。然而这里面却有一个坑。</p>

<p>首先来看看 ios 和 android 中的界面结构：</p>

<p><img src="http://www.xefan.com/wp-content/uploads/2016/07/31/ios-screen-struct.png" alt="ios-screen-struct" />
<img src="http://www.xefan.com/wp-content/uploads/2016/07/31/android-screen-struct.png" alt="android-screen-struct" /></p>

<p>如图所示，屏幕的宽度计算比较简单，就是从左边到右边的距离即可。
然后就是屏幕的高度了，这里其实我们是需要获取到可用区域的高度。
如图所示，对于 ios 系统来说可用区域高度就是整个屏幕的高度减去 Status Bar 的高度；
对于 android 系统来说就是屏幕的高度减去 Status Bar 和 Soft Menu Bar 的高度。</p>

<h2>获取 iOS 设备的屏幕分辨率</h2>

<p>正如上面所说的，在 ios 下的计算方法为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var WIDTH = Dimensions.get('window').width;
</span><span class='line'>var HEIGHT = Dimensions.get('window').height - STATUS_BAR_HEIGHT;</span></code></pre></td></tr></table></div></figure>


<p>在 ios 系统状态栏高度(STATUS_BAR_HEIGHT)通常为 20。
不过如果你设置了隐藏状态栏的话，那么 <code>STATUS_BAR_HEIGHT</code> 则为0。</p>

<p>以上是手机竖屏的情况，在横屏状态下则交换两个值：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;
</span><span class='line'>var LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;</span></code></pre></td></tr></table></div></figure>


<p>到了这里虽然麻烦了一点，但是总体来说也还好。问题都解决了。
感觉生活是如此美好啊，然而这个世界上却还有一个系统名为 android。
它有着数不清种类屏幕大小的设备，然后瞬间感觉整个人都不好了。</p>

<h2>获取 Android 设备的屏幕分辨率</h2>

<p>如果按照 ios 下的方法来做，获取到 <code>WIDTH</code> 是没有问题，
但是 <code>HEIGHT</code> 的话还需要减去 Status Bar 和 Soft Menu Bar 的高度。
因此我们还需要获取到状态栏的高度(STATUS_BAR_HEIGHT)和虚拟按钮的高度(SOFT_MENU_BAR_HEIGHT)。</p>

<p>这里我们使用<a href="https://github.com/jaysoo/react-native-extra-dimensions-android">react-native-extra-dimensions-android</a>这个库。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const ExtraDimensions = require('react-native-extra-dimensions-android');
</span><span class='line'>
</span><span class='line'>const STATUS_BAR_HEIGHT = ExtraDimensions.get('STATUS_BAR_HEIGHT');
</span><span class='line'>const SOFT_MENU_BAR_HEIGHT = ExtraDimensions.get('SOFT_MENU_BAR_HEIGHT');
</span><span class='line'>const WIDTH = ExtraDimensions.get('REAL_WINDOW_WIDTH');
</span><span class='line'>const HEIGHT = ExtraDimensions.get('REAL_WINDOW_HEIGHT') - STATUS_BAR_HEIGHT - SOFT_MENU_BAR_HEIGHT;</span></code></pre></td></tr></table></div></figure>


<p>以上是设备竖屏的结果，在横屏下你以为是不是只需要交换两个值就搞定了呢。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;
</span><span class='line'>var LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;</span></code></pre></td></tr></table></div></figure>


<p>Naive!!如果这么轻松就搞定了的话，android就不叫做android了。</p>

<p>先来看看下面两张图片吧，分别是一个android平板设备在横屏和竖屏状态下的截图：</p>

<p><img src="http://www.xefan.com/wp-content/uploads/2016/07/31/android-pad-landscape.png" alt="android-pad-landscape" />
<img src="http://www.xefan.com/wp-content/uploads/2016/07/31/android-pad-portrait.png" alt="android-pad-portrait" /></p>

<p>你把你手中的 android 手机分别进入横屏和竖屏状态下，再对照上面两张图片你会发现什么。
没错的，在平板设备上屏幕旋转之后 Soft Menu Bar 也跟着旋转了，
而在手机设备上 Soft Menu Bar 是始终固定在手机底部的。</p>

<p>尼玛，太坑爹了。看到这里瞬间呕血三升，要适配手机跟平板实现是太麻烦了。
以下是我的解决办法，先检查当前设备是否为平板，然后再分别处理。
至于平板的判断方法就自己想办法了，我的方法也不一定准。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>if (isPad) {
</span><span class='line'>  LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT + SOFT_MENU_BAR_HEIGHT;
</span><span class='line'>  LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT - SOFT_MENU_BAR_HEIGHT;
</span><span class='line'>} else {
</span><span class='line'>  LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;
</span><span class='line'>  LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>以上是在 android 下遇到的第一个大坑。</p>

<p>到了这里我以为一切都该结束了吧，然而没想到还有一种手机叫做魅族。如下图：</p>

<p><img src="http://www.xefan.com/wp-content/uploads/2016/07/31/Mezu-smart-bar.png" alt="Mezu-smart-bar" /></p>

<p>在屏幕右下角其实是有一个按钮的，然而左图所示的，该按钮被魅族手机的 Smart Bar 遮住了。
进入系统设置将 Smart Bar 隐藏后效果如右图所示。</p>

<p>看到这里又吐了两口老血，此为第二个大坑。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const SMART_BAR_HEIGHT = ExtraDimensions.get('SMART_BAR_HEIGHT');
</span><span class='line'>
</span><span class='line'>if (SMART_BAR_HEIGHT) {
</span><span class='line'>  HEIGHT -= SMART_BAR_HEIGHT;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>....
</span><span class='line'>// 在上面 LANDSCAPE 的计算结果上再作如下处理
</span><span class='line'>
</span><span class='line'>if (SMART_BAR_HEIGHT) {
</span><span class='line'>  LANDSCAPE_WIDTH += SMART_BAR_HEIGHT;
</span><span class='line'>  LANDSCAPE_HEIGHT -= SMART_BAR_HEIGHT;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在魅族的手机上计算屏幕高度时还需要再减去 Smart Bar 的高度，
同时还需要注意的是， Smart Bar 跟平板上的Soft Menu Bar 一样会随着屏幕旋转而转动的。</p>

<p>最后还有一点需要注意的是，在安装 <code>react-native-extra-dimensions-android</code> 库时不能直接使用 <code>npm install --save react-native-extra-dimensions-android</code> 进行安装，
而是需要直接通过 git 仓库来安装： <code>npm install --save git+https://github.com/jaysoo/react-native-extra-dimensions-android.git</code>。</p>

<p>因为在 npm 上 <code>react-native-extra-dimensions-android</code> 的最新版为 0.17.0，
而 <code>SMART_BAR_HEIGHT</code> 的功能是在此之后才添加进来的。</p>

<p>在库的版本上面又被坑了一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactNative Jsbundle管理]]></title>
    <link href="http://www.xefan.com/archives/84163.html"/>
    <updated>2016-06-26T12:02:30+08:00</updated>
    <id>http://www.xefan.com/archives/84163-ReactNative jsbundle管理</id>
    <content type="html"><![CDATA[<p>在<a href="http://www.xefan.com/archives/84162.html">上一篇文章</a>中介绍了 RN(ReactNative) 自动设置 development server IP 的方法。
这在开发过程中方便了不少，然而我在想能否更加方便一些呢。首先我们知道在开发 RN 应用时，jsbundle 有两种加载方式。
第一种是指定 url 通过网络进行加载；第二种是 pre-bundled 将 jsbundle 文件打包进 app 安装包中。
编译生成的安装包有 Debug 和 Release 两种模式，在 Debug 模式下默认是使用第一种方式加载 jsbundle，在 Release 模式下默认是使用第二种方式。</p>

<p>现在我的需求是编译生成三种模式的安装包：Debug、Release 和 Stage。前两种跟之前一样，
而 Stage 模式下是使用第二种方式加载 jsbundle， 但是生成的 jsbundle 是 DEV 状态下的。
这样在开发过程中给他人安装app进行测试时就不需要反复的修改配置了。</p>

<h2>修改 Android 的配置</h2>

<p>对于的 android 的配置比较简单。只需修改 <code>android/app/build.gradle</code> 文件，新添加一个 <code>buildTypes</code> 即可。</p>

<p>在 <code>apply from: "react.gradle"</code> 之前添加如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>project.ext.react = [
</span><span class='line'>  bundleInStage: true
</span><span class='line'>]
</span></code></pre></td></tr></table></div></figure>


<p>然后再修改配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android {
</span><span class='line'>    buildTypes {
</span><span class='line'>        debug {
</span><span class='line'>            applicationIdSuffix ".debug"
</span><span class='line'>            resValue 'string', 'app_name', '"XXXX(Debug)"'
</span><span class='line'>            ......
</span><span class='line'>        }
</span><span class='line'>        release {
</span><span class='line'>            minifyEnabled enableProguardInReleaseBuilds
</span><span class='line'>            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
</span><span class='line'>            resValue 'string', 'app_name', '"XXXX"'
</span><span class='line'>            ......
</span><span class='line'>        }
</span><span class='line'>        stage {
</span><span class='line'>            initWith(buildTypes.debug)
</span><span class='line'>            applicationIdSuffix ".stage"
</span><span class='line'>            resValue 'string', 'app_name', '"XXXX(Stage)"'
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这里添加了一个 <code>stage</code> buildTypes 继承至 <code>debug</code>。并且为了能够同时安装不同模式下的app，这里设置了不同模式 bundleID 的后缀。
同时还设置了不同模式下app的名称，以便区分。</p>

<p>然后进行 <code>android</code> 目录下执行 <code>./gradlew assemble</code> 命令，即可在 <code>android/app/build/outputs/apk</code> 目录生成 app-debug.apk、app-release.apk 和 app-stage.apk 三个 apk 包。</p>

<h2>修改 iOS 的配置</h2>

<p>首先将 Debug Configuration 复制为 Stage
<img src="http://www.xefan.com/wp-content/uploads/2016/06/26/Xcode-configuration.png" alt="Xcode-configuration" /></p>

<p>然后进入 <code>Build Settings</code> 修改 <code>Preprocessor Macros</code>，对 <code>Stage</code> 添加一项配置： <code>STAGE=1</code>
<img src="http://www.xefan.com/wp-content/uploads/2016/06/26/Xcode-buildSettings.png" alt="Xcode-buildSettings" /></p>

<p>然后再编辑 <code>AppDelegate.m</code> 文件，修改 <code>jsCodeLocation</code> 相关配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#if STAGE
</span><span class='line'>#warning "STAGE"
</span><span class='line'>  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
</span><span class='line'>#elif DEBUG
</span><span class='line'>#if TARGET_OS_SIMULATOR
</span><span class='line'>#warning "DEBUG SIMULATOR"
</span><span class='line'>  jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
</span><span class='line'>#else
</span><span class='line'>#warning "DEBUG DEVICE"
</span><span class='line'>  NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"SERVER_IP"];
</span><span class='line'>  NSString *jsCodeUrlString = [NSString stringWithFormat:@"http://%@:8081/index.ios.bundle?platform=ios&dev=true", serverIP];
</span><span class='line'>  NSString *jsBundleUrlString = [jsCodeUrlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>  jsCodeLocation = [NSURL URLWithString:jsBundleUrlString];
</span><span class='line'>#endif
</span><span class='line'>#else
</span><span class='line'>#warning "PRODUCTION DEVICE"
</span><span class='line'>  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>为了能够同时安装多个应用，还需要设置各个模式下的 Bundle Identifier。进入 <code>Build Settings</code> -> <code>Packaging</code> -> <code>Product Bundle Identifier</code>
<img src="http://www.xefan.com/wp-content/uploads/2016/06/26/Xcode-bundleID.png" alt="Xcode-bundleID" /></p>

<p>为了便于区分，最好给各个模式下的应用设置不同的AppName。进入 <code>Build Settings</code> -> <code>User-Defined</code>，添加一项设置
<img src="http://www.xefan.com/wp-content/uploads/2016/06/26/Xcode-User-Defined.png" alt="Xcode-User-Defined" /></p>

<p>然后再进入 <code>Info</code>，设置 <code>CFBundleDisplayName</code> 的值为 <code>$(BUNDLE_DISPLAY_NAME)</code></p>

<p>至此，配置已经修改完成。如果之前有使用 cocoapods 安装过第三方库的话，那么可能还需要再重新安装一遍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactNative自动设置开发服务器IP]]></title>
    <link href="http://www.xefan.com/archives/84162.html"/>
    <updated>2016-06-18T21:40:01+08:00</updated>
    <id>http://www.xefan.com/archives/84162-ReactNative自动设置开发服务器IP</id>
    <content type="html"><![CDATA[<p>在开发 ReactNative 应用时，jsbundle 有两种加载方式。第一种是指定 url 通过网络进行加载；第二种是 pre-bundled 将 jsbundle 文件打包进 app 安装包中。</p>

<p>以下就是创建项目之后 ios 的默认配置。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  /**
</span><span class='line'>   * Loading JavaScript code - uncomment the one you want.
</span><span class='line'>   *
</span><span class='line'>   * OPTION 1
</span><span class='line'>   * Load from development server. Start the server from the repository root:
</span><span class='line'>   *
</span><span class='line'>   * $ npm start
</span><span class='line'>   *
</span><span class='line'>   * To run on device, change `localhost` to the IP address of your computer
</span><span class='line'>   * (you can get this by typing `ifconfig` into the terminal and selecting the
</span><span class='line'>   * `inet` value under `en0:`) and make sure your computer and iOS device are
</span><span class='line'>   * on the same Wi-Fi network.
</span><span class='line'>   */
</span><span class='line'>
</span><span class='line'>  jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
</span><span class='line'>
</span><span class='line'>  /**
</span><span class='line'>   * OPTION 2
</span><span class='line'>   * Load from pre-bundled file on disk. The static bundle is automatically
</span><span class='line'>   * generated by the "Bundle React Native code and images" build step when
</span><span class='line'>   * running the project on an actual device or running the project on the
</span><span class='line'>   * simulator in the "Release" build configuration.
</span><span class='line'>   */
</span><span class='line'>
</span><span class='line'>//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];</span></code></pre></td></tr></table></div></figure>


<p>这里有个麻烦的地方就是，当我在真机设备上调试时。每次都需要执行 <code>ifconfig</code> 命令，然后将 <code>localhost</code> 修改为我的 ip 地址。并且在使用 git 进行代码管理时，一不小心将修改后的文件提交上去了，其他同事在 pull 时又会与自己的冲突。
最终实在忍受不了了，在想能不能编译时自动获取到本机的 ip 呢，这样就不用每次都手动修改了。于是找到了这篇文章： <a href="http://moduscreate.com/automated-ip-configuration-for-react-native-development/">http://moduscreate.com/automated-ip-configuration-for-react-native-development/</a>
我这里参考了他的方案并做了一点小调整。</p>

<p>按照他的步骤，首先添加 Run Script。
在 Xcode 中选择“Build Phases”，然后点击左上角的&#8221;+&ldquo;选择“New Run Script Phase”。
在列表最后出现了“Run Script”，将其展开，然后编辑代码块的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFOPLIST="${TARGET_BUILD_DIR}/${INFOPLIST_PATH}"
</span><span class='line'>echo "writing to $INFOPLIST"
</span><span class='line'>PLISTCMD="Add :SERVER_IP string $(ifconfig | grep inet\ | tail -1 | cut -d " " -f 2)"
</span><span class='line'>echo -n "$INFOPLIST" | xargs -0 /usr/libexec/PlistBuddy -c "$PLISTCMD" || true
</span><span class='line'>PLISTCMD="Set :SERVER_IP $(ifconfig | grep inet\ | tail -1 | cut -d " " -f 2)"
</span><span class='line'>echo -n "$INFOPLIST" | xargs -0 /usr/libexec/PlistBuddy -c "$PLISTCMD" || true</span></code></pre></td></tr></table></div></figure>


<p>第二步编辑 <code>AppDelegate.m</code> 文件。
将项目默认生成的 <code>jsCodeLocation</code> 配置删除掉，并添加代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#if DEBUG
</span><span class='line'>#if TARGET_OS_SIMULATOR
</span><span class='line'>#warning "DEBUG SIMULATOR"
</span><span class='line'>  jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/index.ios.bundle?platform=ios&dev=true"];
</span><span class='line'>#else
</span><span class='line'>#warning "DEBUG DEVICE"
</span><span class='line'>  NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"SERVER_IP"];
</span><span class='line'>  NSString *jsCodeUrlString = [NSString stringWithFormat:@"http://%@:8081/index.ios.bundle?platform=ios&dev=true", serverIP];
</span><span class='line'>  NSString *jsBundleUrlString = [jsCodeUrlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
</span><span class='line'>  jsCodeLocation = [NSURL URLWithString:jsBundleUrlString];
</span><span class='line'>#endif
</span><span class='line'>#else
</span><span class='line'>#warning "PRODUCTION DEVICE"
</span><span class='line'>  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>


<p>这里如果在模拟器中进行调试，那么 development server 则为 localhost；如果在真机设备中调试,那么 development server 则为电脑的 ip 地址。
到此已经可以实现自动设置 ip 地址了，如果还想要在 Chrome 中对设备进行调试，那么还需要修改一下 WebSocket 的配置。</p>

<p>第三步编辑 <code>RCTWebSocketExecutor.m</code> 文件。
在 Xcode 中打开 <YourProject> -> Libraries -> RCTWebSocket.xcodeproj -> RCTWebSocketExecutor.m 文件，大概在文件 53 行左右的位置，将 <code>NSString *URLString = [NSString stringWithFormat:@"http://localhost:%zd/debugger-proxy?role=client", port];</code> 修改为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#if TARGET_OS_SIMULATOR
</span><span class='line'>    NSString *serverIP = @"localhost";
</span><span class='line'>#else
</span><span class='line'>    NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"SERVER_IP"];
</span><span class='line'>#endif
</span><span class='line'>    NSString *URLString = [NSString stringWithFormat:@"http://%@:%zd/debugger-proxy?role=client", serverIP, port];</span></code></pre></td></tr></table></div></figure>


<p>现在配置已经完成了，接下来就试试看是否有效吧。</p>

<p>经过修改之后相对于之前已经方便了不少，只是我还遇到一个问题。那就是我的 MacBook 在办公室时的 ip 跟在家里的 ip 是不同的。
这样的话每次切换环境都需要重新编译一下应用，还是有点麻烦。于是乎我自己将第一步的脚本作了下修改，新的内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFOPLIST="${TARGET_BUILD_DIR}/${INFOPLIST_PATH}"
</span><span class='line'>echo "writing to $INFOPLIST"
</span><span class='line'>PLISTCMD="Add :SERVER_IP string $(hostname)"
</span><span class='line'>echo -n "$INFOPLIST" | xargs -0 /usr/libexec/PlistBuddy -c "$PLISTCMD" || true
</span><span class='line'>PLISTCMD="Set :SERVER_IP $(hostname)"
</span><span class='line'>echo -n "$INFOPLIST" | xargs -0 /usr/libexec/PlistBuddy -c "$PLISTCMD" || true</span></code></pre></td></tr></table></div></figure>


<p>这里我使用 hostname 来作为 development server 的地址，而不是 ip。这样的话即便是网络环境发生了变化，只要手机设备跟电脑处于同一个局域网内就不需要再重新编译应用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS中VirtualBox的Android蓝牙设置]]></title>
    <link href="http://www.xefan.com/archives/84161.html"/>
    <updated>2016-04-03T11:05:11+08:00</updated>
    <id>http://www.xefan.com/archives/84161-VirtualBox中Android蓝牙设置</id>
    <content type="html"><![CDATA[<p>在做手机开发时，由于没有 Android 设备，只得在模拟器中进行测试。然而在模拟器却没法访问本机的蓝牙设备，这对于要做蓝牙开发来说很不方便。</p>

<p>经过各种搜索终于找到了一个解决方案。首先需要以下工具：</p>

<ul>
<li>Mac OS系统</li>
<li>VirtualBox (<a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a>)</li>
<li>Android x86 (<a href="https://sourceforge.net/projects/android-x86/">https://sourceforge.net/projects/android-x86/</a>)</li>
</ul>


<p>1.禁用系统的蓝牙服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo launchctl unload /System/Library/LaunchDaemons/com.apple.blued.plist
</span><span class='line'># 对于 Mountain Lion 系统执行如下命令：
</span><span class='line'>$ sudo kextunload -b com.apple.iokit.IOBluetoothSerialManager
</span><span class='line'>$ sudo kextunload -b com.apple.iokit.BroadcomBluetoothHCIControllerUSBTransport
</span><span class='line'># 对于 Snow Leopard 系统执行如下命令：
</span><span class='line'>$ sudo kextunload -b com.apple.driver.BroadcomUSBBluetoothHCIController
</span><span class='line'>$ sudo kextunload -b com.apple.driver.AppleUSBBluetoothHCIController</span></code></pre></td></tr></table></div></figure>


<p>2.运行 VirtualBox</p>

<p>设置启用 USB 控制器，添加蓝牙设备，如图：</p>

<p><img src="http://www.xefan.com/wp-content/uploads/2016/04/03/virtualbox-android-bluetooth.png" alt="" /></p>

<p>然后运行 android 系统即可。</p>

<p>3.在退出 VirtualBox 之后，重新启用系统的蓝牙服务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo launchctl load /System/Library/LaunchDaemons/com.apple.blued.plist
</span><span class='line'># 对于 Mountain Lion 系统执行如下命令：
</span><span class='line'>$ sudo kextload -b com.apple.iokit.IOBluetoothSerialManager
</span><span class='line'>$ sudo kextload -b com.apple.iokit.BroadcomBluetoothHCIControllerUSBTransport
</span><span class='line'># 对于 Snow Leopard 系统执行如下命令：
</span><span class='line'>$ sudo kextload -b com.apple.driver.BroadcomUSBBluetoothHCIController
</span><span class='line'>$ sudo kextload -b com.apple.driver.AppleUSBBluetoothHCIController </span></code></pre></td></tr></table></div></figure>


<p>参考：<br/>
<a href="https://www.virtualbox.org/ticket/2372#comment:17">https://www.virtualbox.org/ticket/2372#comment:17</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gulp+browserSync配置]]></title>
    <link href="http://www.xefan.com/archives/84160.html"/>
    <updated>2016-03-26T14:32:56+08:00</updated>
    <id>http://www.xefan.com/archives/84160-gulp+browserSync配置</id>
    <content type="html"><![CDATA[<p>Browsersync  是一个前端调试的利器，它能够让你在页面文件改动之后自动刷新浏览器，从而方便了前端的调试工作。</p>

<p>本文就是对于 Browsersync + Gulp 的配置作个简单的笔记。</p>

<ol>
<li>首先安装 Browsersync 与 Gulp:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install browser-sync gulp --save-dev</span></code></pre></td></tr></table></div></figure>


<ol>
<li>在 <code>gulpfile.js</code> 中创建新任务：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var gulp = require('gulp');
</span><span class='line'>var browserSync = require('browser-sync').create();
</span><span class='line'>
</span><span class='line'>var config = {
</span><span class='line'>  baseDir: 'src',
</span><span class='line'>  watchFiles: [ 'src/**/*.html', 'src/assets/css/*.css', 'src/assets/js/*.js' ]
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>gulp.task('serve', function() {
</span><span class='line'>  browserSync.init({
</span><span class='line'>    files: config.watchFiles,
</span><span class='line'>    server: {
</span><span class='line'>      baseDir: config.baseDir
</span><span class='line'>    }
</span><span class='line'>  });
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>这里表示以 <code>src</code> 目录作为根目录启动 HTTP 服务，并监听 <code>src</code> 目录下的所有 <code>html</code>、<code>css</code> 以及 <code>js</code> 类型的文件，当这些文件有改动时 Browsersync 会自动刷新浏览器页面。</p>

<p>如果想配合使用 SASS 之类的，可以参考： <a href="https://www.browsersync.io/docs/gulp/">https://www.browsersync.io/docs/gulp/</a></p>

<p>同时为了避免之后每次都要重新配置一遍，于是我自己写了个简单的 <code>yo</code> 生成器： <a href="https://github.com/wusuopu/my-yeoman-generator">https://github.com/wusuopu/my-yeoman-generator</a></p>

<p>由于这只是我自己 generator，并没有发布到 npm 上，因此只能手动进行安装。各位有兴趣的可以试试。使用方法：</p>

<ol>
<li><p>安装 yo 和 bower： <code>$ npm install -g yo bower</code></p></li>
<li><p>安装 generator:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/wusuopu/my-yeoman-generator generator-wusuopu
</span><span class='line'>$ cd generator-wusuopu
</span><span class='line'>$ npm link</span></code></pre></td></tr></table></div></figure>


<ol>
<li>生成项目：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir webpage
</span><span class='line'>$ cd webpage
</span><span class='line'>$ yo wusuopu:bootstrap3</span></code></pre></td></tr></table></div></figure>


<p>这里 bootstrap3 generator 包含了 bootstrap3、font-awesome、jquery 这些常用的前端库，省得每次都需要重新下载一遍。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Access Control跨域请求]]></title>
    <link href="http://www.xefan.com/archives/84159.html"/>
    <updated>2016-03-17T16:35:12+08:00</updated>
    <id>http://www.xefan.com/archives/84159-HTTP Access Control跨域请求</id>
    <content type="html"><![CDATA[<p>最近在使用 Ajax api 请求时遇到了跨域的问题，现在问题解决了顺便做个笔记。</p>

<p>场景：现在主站域名为 example.org ，需要通过 ajax 请求 hello-world.example 上的资源。</p>

<h2>Access-Control-Allow-Origin</h2>

<p>如果请求时遇到如下错误：<br/>
<code>No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://example.org' is therefore not allowed access.</code></p>

<p>则需要在 hello-world.example 的 server 端 Response Headers 中设置 <code>Access-Control-Allow-Origin</code> 字段。其值根据情况设置为 <code>http://example.org</code> 或者 <code>https://example.org</code> 。</p>

<h2>Access-Control-Allow-Methods</h2>

<p>一般情况下只允许 GET 和 POST 请求，对于 RESTful 的 api 可能会有其他类型的请求。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.ajax({
</span><span class='line'>  url: 'http://hello-world.example/sessions/me.json',
</span><span class='line'>  method: 'DELETE',
</span><span class='line'>  dataType: 'json'
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>这时如果出现方法不被允许，则需要在 server 端 Response Headers 中设置 <code>Access-Control-Allow-Methods</code> 字段。如： <code>Access-Control-Allow-Methods: GET, POST, DELETE</code> 。</p>

<h2>Access-Control-Allow-Credentials</h2>

<p>当在 hello-world.example 站点登录之后，浏览器会保存对应的 Cookies ，但是在 example.org 站点中使用 ajax 时发现 hello-world.example 的 Cookies 并没有附加到 Request Headers 中。</p>

<p>此时就需要设置 XMLHttpRequest 的 <code>withCredentials</code> 属性，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$.ajax({
</span><span class='line'>  url: 'http://hello-world.example/session/me.json',
</span><span class='line'>  method: 'GET',
</span><span class='line'>  dataType: 'json',
</span><span class='line'>  xhrFields: {
</span><span class='line'>      withCredentials: true
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>同时在 server 端 Response Headers 中设置 <code>Access-Control-Allow-Credentials</code> 字段。说明允许通过跨域修改 Cookies 。如： <code>Access-Control-Allow-Credentials: true</code></p>

<p>以上是常用的几个字段，更多设置参考手册： <a href="https://www.w3.org/TR/access-control/">https://www.w3.org/TR/access-control/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode文档离线安装]]></title>
    <link href="http://www.xefan.com/archives/84158.html"/>
    <updated>2016-01-03T16:52:11+08:00</updated>
    <id>http://www.xefan.com/archives/84158-Xcode文档离线安装</id>
    <content type="html"><![CDATA[<p>在 Xcode 中下载安装文档速度太慢了，不得已只得自行下载，然后再手动安装。</p>

<ol>
<li>首先在 <a href="https://developer.apple.com/library/downloads/docset-index.dvtdownloadableindex">https://developer.apple.com/library/downloads/docset-index.dvtdownloadableindex</a> 找到需要下载的文档的下载地址。</li>
</ol>


<p>这里我需要下载的是 iOS 9.2 的文档，内容如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- START iOS doc set --&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>  &lt;key&gt;fileSize&lt;/key&gt;
</span><span class='line'>  &lt;integer&gt;1071665431&lt;/integer&gt;
</span><span class='line'>  &lt;key&gt;identifier&lt;/key&gt;
</span><span class='line'>  &lt;string&gt;com.apple.adc.documentation.iOS&lt;/string&gt;
</span><span class='line'>  &lt;key&gt;name&lt;/key&gt;
</span><span class='line'>  &lt;string&gt;iOS 9.2 Documentation&lt;/string&gt;
</span><span class='line'>  &lt;key&gt;source&lt;/key&gt;
</span><span class='line'>  &lt;string&gt;https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg&lt;/string&gt;
</span><span class='line'>  &lt;key&gt;userInfo&lt;/key&gt;
</span><span class='line'>  &lt;dict&gt;
</span><span class='line'>    &lt;key&gt;ActivationPredicate&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;$XCODE_VERSION &gt;= '7.2'&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;Category&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;Documentation&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;IconType&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;IDEDownloadablesTypeDocSet&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;InstallPrefix&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;$(HOME)/Library/Developer/Shared/Documentation/DocSets&lt;/string&gt;
</span><span class='line'>    &lt;key&gt;InstalledIfAllReceiptsArePresentOrNewer&lt;/key&gt;
</span><span class='line'>    &lt;dict&gt;
</span><span class='line'>      &lt;key&gt;com.apple.pkg.7.0.iOSDocset&lt;/key&gt;
</span><span class='line'>      &lt;string&gt;10.9.0.0.1.1449203766&lt;/string&gt;
</span><span class='line'>    &lt;/dict&gt;
</span><span class='line'>    &lt;key&gt;RequiresADCAuthentication&lt;/key&gt;
</span><span class='line'>    &lt;false/&gt;
</span><span class='line'>    &lt;key&gt;Summary&lt;/key&gt;
</span><span class='line'>    &lt;string&gt;My description of content&lt;/string&gt;
</span><span class='line'>  &lt;/dict&gt;
</span><span class='line'>  &lt;key&gt;version&lt;/key&gt;
</span><span class='line'>  &lt;string&gt;92.7&lt;/string&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;!-- END iOS doc set --&gt;</span></code></pre></td></tr></table></div></figure>


<p>下载地址为： <a href="https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg">https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg</a></p>

<p>如果觉得官网下载速度太慢了，也可以从我的百度网盘下载： <a href="http://pan.baidu.com/s/1pKsmkY3">http://pan.baidu.com/s/1pKsmkY3</a> 。下载完成之后自行进行文件合并、md5校验。</p>

<ol>
<li>将下载的 dmg 文件移动到 <code>~/Library/Caches/com.apple.dt.Xcode/Downloads/</code> 目录下（如果目录不存在，自行创建），
并重命名为 <code>&lt;identifier&gt;-&lt;version&gt;.dmg</code> 这样的形式，在这里为： <code>com.apple.adc.documentation.iOS-92.7.dmg</code></li>
</ol>


<p>然后转到文档所在目录： <code>~/Library/Developer/Shared/Documentation/DocSets</code>，如果对应的文档文件已存在则删除。
<code>rm -rf com.apple.adc.documentation.iOS.docset</code></p>

<ol>
<li>打开 Xcode ，点击下载对应的文档。此时应该会跳过下载步骤而直接进行安装。</li>
</ol>


<p><img src="http://www.xefan.com/wp-content/uploads/2016/01/03/xcode1.png" alt="Xcode" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript使用async进行流程控制]]></title>
    <link href="http://www.xefan.com/archives/84157.html"/>
    <updated>2015-12-13T21:39:26+08:00</updated>
    <id>http://www.xefan.com/archives/84157-javascript使用async进行流程控制</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>突然发现博客好久没有更新了，主要是因为最近这几个月比较忙。之前由 Python 转向了 Ruby，现在又由后端转向了前端。
这几个月接触的内容略有点多，信息量有点大，主要都是 js 相关的。准备之后抽时间将这些知识整理整理，沉淀沉淀。</p>

<h2>Async</h2>

<p>由于 js 是异步的，之前在使用 loopback 进行 server 端开发时，很容易就出现了比较深层次的回调嵌套。
<a href="https://github.com/caolan/async">async.js</a>是 js 的一个工具，可以用来方便的控制 js 中的异步流程的，类似的库还有 Promise、RxJS 等。
最初它是设计用于 nodejs 的，不过在浏览器端也可以使用。</p>

<h3>安装</h3>

<p>安装方法很简单，直接使用 npm 即可： <code>npm install async</code> 。</p>

<h3>使用方法</h3>

<p>首先是加载 async 库，在 server 端使用 <code>var async = require('async');</code>，
在浏览器端直接引用即可： <code>&lt;script type="text/javascript" src="async.js"&gt;&lt;/script&gt;</code>。</p>

<p>async 提供一些集合操作方法和流程控制方法，我比较常用的是：<code>each</code>、<code>map</code>、<code>series</code>、<code>waterfall</code> 这些方法。
其中 <code>each</code>、<code>map</code> 方法与 <code>lodash</code> 的类似，可以用来遍历某个集合并执行一些操作。</p>

<p><code>each</code> 方法定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">iterator</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>该方法会对 <code>collection</code> 每个元素都调用 <code>iterator</code> 操作， <code>iterator</code> 函数原型为： <code>iterator(item, callback)</code>。
当 <code>collection</code> 中的所有元素遍历完成或者执行 <code>iterator</code> 时发生错误就会调用 <code>callback</code> 回调，原型为： <code>callback(err)</code>。</p>

<p><code>each</code> 方法只是对每个元素进行操作，如果还需要获取操作的结果，那么可以使用 <code>map</code> 方法。定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">iterator</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>map</code> 与 <code>each</code> 类似，只是 <code>callback</code> 定义为： <code>callback(err, results)</code>。
<code>results</code> 为 <code>iterator</code> 操作的结果集合。</p>

<p>如下是一个例子，一次读取多个文件的内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">map</span><span class="p">([</span><span class="s1">&#39;file1&#39;</span><span class="p">,</span><span class="s1">&#39;file2&#39;</span><span class="p">,</span><span class="s1">&#39;file3&#39;</span><span class="p">],</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// doSomething();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>series</code> 与 <code>map</code> 类似，不过 <code>series</code> 是遍历一个方法合集并挨个执行，然后返回结果：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">(</span><span class="nx">tasks</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">series</span><span class="p">([</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">fun1</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;one&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">fun2</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s1">&#39;two&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">],</span>
</span><span class='line'><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// doSomething();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意，以上这些方法各个任务的完成时间顺序是不确定的。如果有一些操作是需要按照先后顺序执行，可以使用 <code>waterfall</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">(</span><span class="nx">tasks</span><span class="p">,</span> <span class="p">[</span><span class="nx">callback</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如在 <code>loopback</code> 的一个 <code>controller</code> 中，提供修改用户密码的功能。原始写法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user/password&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的例子功能还比较简单，回调层级不是很深。不过如果使用 <code>waterfall</code> 来控制就更为简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/user/password&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">async</span><span class="p">.</span><span class="nx">waterfall</span><span class="p">([</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">callback</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">user</span><span class="p">.</span><span class="nx">password</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">password</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">doSomething</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">).</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记7——与rails整合]]></title>
    <link href="http://www.xefan.com/archives/84156.html"/>
    <updated>2015-08-27T13:01:33+08:00</updated>
    <id>http://www.xefan.com/archives/84156-AngularJS学习笔记7——与rails整合</id>
    <content type="html"><![CDATA[<p>要在 rails 中使用 angular 直接在页面中引入进行即可，这个倒是不难。
只是在开发过程中突然发现了一个问题，就是 angular 的模板应该如何组织呢。
如果全写成内联模板这个不太好维护，如果是写成单个文件放在 public 目录下也不太妥。
不过好在这个问题已经有人解决了，有 angular-rails-templates 这么一个库：<a href="https://github.com/pitr/angular-rails-templates">https://github.com/pitr/angular-rails-templates</a></p>

<p>首先安装该库：<code>gem 'angular-rails-templates'</code></p>

<p>然后创建目录 <code>app/assets/javascripts/templates</code>，
并在 <code>app/assets/javascripts/application.js</code> 中加载对应的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require angular-rails-templates
</span><span class='line'>//= require_tree ./templates</span></code></pre></td></tr></table></div></figure>


<p>该目录下的模板文件命名与 rails 的视图命名类似，如： <code>foo.html</code>，<code>foo.html.erb</code>，<code>foo.html.haml</code>,<code>foo.html.slim</code>。</p>

<p>可以参考我的一个例子： <a href="https://github.com/wusuopu/rails-billing">https://github.com/wusuopu/rails-billing</a></p>

<p>这里我是使用 bower 进行安装 angular 的库，首先安装 <code>gem 'bower-rails'</code> 。</p>

<p>然后初始化 bower_rails： <code>rails g bower_rails:initialize</code><br/>
编辑 <code>Bowerfile</code>，添加所需要的依赖包：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asset 'angular'
</span><span class='line'>asset 'angular-route'
</span><span class='line'>asset 'angular-resource'
</span><span class='line'>asset 'angular-mocks'
</span><span class='line'>asset 'angular-flash'
</span><span class='line'>asset 'angular-loading-bar'
</span><span class='line'>asset 'angular-flash-messages'
</span><span class='line'>asset 'angular-translate'
</span><span class='line'>asset 'angular-bootstrap'
</span><span class='line'>asset 'bootstrap-sass-official'
</span><span class='line'>asset 'components-font-awesome'</span></code></pre></td></tr></table></div></figure>


<p>再执行命令： <code>rake bower:install</code> 进行安装。</p>

<p>接着编辑 <code>config/initializers/assets.rb</code> 添加配置： <code>Rails.application.config.assets.paths &lt;&lt; Rails.root.join("vendor","assets","bower_components")</code></p>

<p>最后加载依赖文件 <code>app/assets/javascripts/application.js</code>：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//= require angular/angular
</span><span class='line'>//= require angular-route/angular-route
</span><span class='line'>//= require angular-resource/angular-resource
</span><span class='line'>//= require angular-flash-messages/angular-flash
</span><span class='line'>//= require angular-loading-bar/build/loading-bar
</span><span class='line'>//= require angular-translate/angular-translate
</span><span class='line'>//= require angular-bootstrap/ui-bootstrap-tpls
</span><span class='line'>//= require angular-rails-templates
</span><span class='line'>//= require_tree ./templates</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记6——与jQuery、Bootstrap结合]]></title>
    <link href="http://www.xefan.com/archives/84155.html"/>
    <updated>2015-08-24T10:25:28+08:00</updated>
    <id>http://www.xefan.com/archives/84155-AngularJS学习笔记6——与jQuery、Bootstrap结合</id>
    <content type="html"><![CDATA[<h2>jQuery</h2>

<p>如果想要在 angular 内部调用 jQuery 的函数（如 jQuery 的 ajax 功能）比较简单，直接调用 <code>$.ajax</code> 即可。<br/>
但是如果想要在 angular 外部调用其函数就稍微麻烦一点，毕竟这也与 angular 的设计理念不符。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div ng-controller="PageController"&gt;
</span><span class='line'>  ...
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;script&gt;
</span><span class='line'>  var appModule = angular.module('myApp', []);
</span><span class='line'>  appModule.controller('PageController', ['$scope', '$http', function($scope, $http){
</span><span class='line'>      ...
</span><span class='line'>  }]);</span></code></pre></td></tr></table></div></figure>


<p>例如上个这段代码，如果想要从外部访问 <code>PageController</code> 中的某些内容。则可以先获取 <code>PageController</code> 的上下文对象($scope)：<code>angular.element($('[ng-controller="PageController"]')).scope();</code><br/>
在外部修改了 <code>scope</code> 的某些值时会发现对应的视图并没有更新，这时还需要调用 <code>scope</code> 的 <code>$digest</code> 方法进行同步，或者直接调用 <code>$apply</code> 方法进行操作。</p>

<h2>Bootstrap</h2>

<p>之前使用 angularjs 时遇到了 Bootstrap 的控件不能正常使用了，如 dropdown 组件点击了没有效果。<br/>
经过分析发现是 angularjs 将 Bootstrap 的组件的事件给截获了。</p>

<p>好在有 angular-bootstrap 这么一个组件可以将它们整合在一起。</p>

<p><a href="http://angular-ui.github.io/bootstrap/">http://angular-ui.github.io/bootstrap/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ruby中使用DATA和__END__将代码和数据混合]]></title>
    <link href="http://www.xefan.com/archives/84154.html"/>
    <updated>2015-08-23T10:12:08+08:00</updated>
    <id>http://www.xefan.com/archives/84154-在Ruby中使用DATA和__END__将代码和数据混合</id>
    <content type="html"><![CDATA[<p>之前一直不理解 <code>__END__</code> 的用法，现在看了这篇文章后才算是了解了，于是便翻译之。<br/>
《Mixing code and data in Ruby with DATA and __END__》: <a href="http://blog.honeybadger.io/data-and-end-in-ruby/">http://blog.honeybadger.io/data-and-end-in-ruby/</a></p>

<hr />

<p>你知道 Ruby 提供了一种方法在你的脚本中可以将源文件作为数据源来使用吗？当你在写一些一次性的脚本用于验证概念时这个小技巧会为你节约一些时间。让我们来看看吧。</p>

<h2>DATA 和 __END__</h2>

<p>在下面这个例子中，我使用了一个有趣的关键字 <code>__END__</code>。所有在 <code>__END__</code> 下面的内容将会被 Ruby 解释器所忽略。但是有趣的是 ruby 为你提供了一个称为 <code>DATA</code> 的 IO 对象，就像你可以读取其他任何文件一样，它能让你读取到 <code>__END__</code> 以下的所有内容。</p>

<p>下面这个例子中，我们遍历每一行并进行输出。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DATA</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">Doom</span>
</span><span class='line'><span class="cp">Quake</span>
</span><span class='line'><span class="cp">Diablo</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于这个技术我最喜欢的实例是使用 <code>DATA</code> 来包含一个 ERB 模板。它同样也可用于 YAML、CSV等等。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;erb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">time</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
</span><span class='line'><span class="n">renderer</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">DATA</span><span class="o">.</span><span class="n">read</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">renderer</span><span class="o">.</span><span class="n">result</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">The current time is &lt;%= time %&gt;.</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上你也可以使用 <code>DATA</code> 来读取 <code>__END__</code> 关键字以上的内容。那是因为 <code>DATA</code> 实际上是一个指向了整个源文件，并定位到 <code>__END__</code> 关键字的位置。你可以试试看在输出之前将 IO 对象反转。下面这个例子将会输出整个源文件。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DATA</span><span class="o">.</span><span class="n">rewind</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">DATA</span><span class="o">.</span><span class="n">read</span> <span class="c1"># prints the entire source file</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">meh</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多文件问题</h2>

<p>这个技术最大的缺点是它只能用于单个文件的脚本，直接运行该文件，不能在其他文件进行导入。</p>

<p>下面这个例子，我们有两个文件，并且每个都有它们自己的 <code>__END__</code> 部分。然而却只有一个全局 <code>DATA</code> 对象。因此第二个文件的 <code>__END__</code> 部分刚访问不到了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># first.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;./second&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;First file</span><span class="se">\n</span><span class="s2">----------------------&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="no">DATA</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'><span class="n">print_second_data</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">First end clause</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># second.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">print_second_data</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Second file</span><span class="se">\n</span><span class="s2">----------------------&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">DATA</span><span class="o">.</span><span class="n">read</span> <span class="c1"># Won&#39;t output anything, since first.rb read the entire file</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp"> </span>
</span><span class='line'><span class="cp">Second end clause</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">snhorne</span> <span class="o">~</span><span class="sr">/tmp $ ruby first.rb</span>
</span><span class='line'><span class="sr">First file</span>
</span><span class='line'><span class="sr">----------------------</span>
</span><span class='line'><span class="sr">First end clause</span>
</span><span class='line'><span class="sr"> </span>
</span><span class='line'><span class="sr">Second file</span>
</span><span class='line'><span class="sr">----------------------</span>
</span></code></pre></td></tr></table></div></figure>


<h2>对于多文件的一个解决方案</h2>

<p>在 Sinatra 中有一个很酷的特性是它允许你在你应用的 <code>__END__</code> 部分添加多个内联模板。它看起来像下面这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># This code is from the Sinatra docs at http://www.sinatrarb.com/intro.html</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sinatra&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">haml</span> <span class="ss">:index</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp"> </span>
</span><span class='line'><span class="cp">@@ layout</span>
</span><span class='line'><span class="cp">%html</span>
</span><span class='line'><span class="cp"> </span>
</span><span class='line'><span class="cp">  = yield</span>
</span><span class='line'><span class="cp"> </span>
</span><span class='line'><span class="cp">@@ index</span>
</span><span class='line'><span class="cp">%div.title Hello world.</span>
</span></code></pre></td></tr></table></div></figure>


<p>sinatra 是如何实现的呢？毕竟你的应用可能是运行在 rack 上。在生产环境中你不能再通过 <code>ruby myapp.rb</code> 来运行！他们必须有一种在多文件中使用 <code>DATA</code> 的解决方案。</p>

<p>因此如果你稍微深入一下 Sinatra 的源代码，你会发现它们并没有使用 <code>DATA</code>。而是使用了跟下面这段代码类似的方案。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># I&#39;m paraphrasing. See the original at https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb#L1284</span>
</span><span class='line'><span class="n">app</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/^__END__$/</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>实际上它比这个要更复杂一些，因为它们不想读取 <code>__FILE__</code>，它只是 <code>sinatra/base.rb</code> 文件。它们其实是需要获取调用了该方法的文件的内容。它们通过解析 <code>caller</code> 的结果来获取。</p>

<p><code>caller</code> 方法将会告诉你当前运行的方法是从哪调用的。这里是个简单的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">some_method</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="nb">caller</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_method</span> <span class="c1"># =&gt; caller.rb:5:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在可以简单地获取到文件名了，然后从该文件中再提取出与 <code>DATA</code> 等价的内容。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">get_caller_data</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="nb">caller</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;__END__&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>请善用它，不要作恶</h2>

<p>希望对于这些技巧你不要经常使用。它们不会使得代码干净、可维护。</p>

<p>然后，你偶尔需要一些又快又脏的实现一个一次性的脚本或者验证一些概念。此时 <code>DATA</code> 和 <code>__END__</code> 就非常有用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下使用supervisor进行服务管理]]></title>
    <link href="http://www.xefan.com/archives/84153.html"/>
    <updated>2015-08-22T17:32:32+08:00</updated>
    <id>http://www.xefan.com/archives/84153-Mac下使用supervisor进行服务管理</id>
    <content type="html"><![CDATA[<p>最近刚切换到 Mac 平台上，感觉各种不适应。之前使用 Ubuntu 时，有 service 命令可以对服务进行管理，
但是在 Mac 系统下没有对应的工具。也许有人说可以用 launchctl 啊。但是 launchctl 的服务是开机自动启动的，
而我又不想要开机自动启动，只想在需要时启动，使用完后就停止。</p>

<p>由于没有相应的工具，因此我只得在终端下通过命令来启动服务，但是这个又得一直打开着一个新的终端标签。
对于有洁癖的我来说，表示很不爽。本来想自己写个脚本来管理的，但是这个又得针对每个服务写个脚本，也很麻烦。
正在纠结的时候想起了还有 supervisor 可以用。</p>

<p>supervisor 是使用 python 开发的一个后台服务管理程序。</p>

<p>首先使用 brew 安装 python 工具： <code>brew install python</code>，并覆盖掉系统自带的 python。
因为我有洁癖不想将软件安装在系统目录中，因此就再单独安装一个 python。
若对此不在意的可跳过此步。</p>

<p>然后再安装 supervisor： <code>pip install supervisor</code>。
supervisor 不支持 python3，并且如果你使用的是系统自带的 python ，可能需要在命令前加上 sudo。</p>

<p>安装完成之后默认是不会创建配置文件的，因此再手动创建配置文件 <code>/usr/local/etc/supervisord.conf</code>，我的配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[unix_http_server]
</span><span class='line'>file=/tmp/supervisor.sock                                 ; path to your socket file
</span><span class='line'>
</span><span class='line'>[supervisord]
</span><span class='line'>logfile=/usr/local/var/log/supervisord/supervisord.log    ; supervisord log file
</span><span class='line'>logfile_maxbytes=50MB                                     ; maximum size of logfile before rotation
</span><span class='line'>logfile_backups=10                                        ; number of backed up logfiles
</span><span class='line'>loglevel=error                                            ; info, debug, warn, trace
</span><span class='line'>pidfile=/usr/local/var/run/supervisord.pid                ; pidfile location
</span><span class='line'>nodaemon=false                                            ; run supervisord as a daemon
</span><span class='line'>minfds=1024                                               ; number of startup file descriptors
</span><span class='line'>minprocs=200                                              ; number of process descriptors
</span><span class='line'>user=root                                                 ; default user
</span><span class='line'>childlogdir=/usr/local/var/log/supervisord/               ; where child log files will live
</span><span class='line'>
</span><span class='line'>[rpcinterface:supervisor]
</span><span class='line'>supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
</span><span class='line'>
</span><span class='line'>[supervisorctl]
</span><span class='line'>serverurl=unix:///tmp/supervisor.sock                     ; use a unix:// URL  for a unix socket
</span><span class='line'>
</span><span class='line'>[program:mongod]
</span><span class='line'>command=/usr/local/bin/mongod --config /usr/local/etc/mongod.conf
</span><span class='line'>autostart=false
</span><span class='line'>autorestart=true
</span><span class='line'>
</span><span class='line'>[program:redis]
</span><span class='line'>command=/usr/local/bin/redis-server /usr/local/etc/redis.conf
</span><span class='line'>autostart=false
</span><span class='line'>autorestart=true
</span><span class='line'>
</span><span class='line'>[program:nginx]
</span><span class='line'>command=/usr/local/bin/nginx -c /usr/local/etc/nginx/nginx.conf
</span><span class='line'>autostart=false
</span><span class='line'>autorestart=true</span></code></pre></td></tr></table></div></figure>


<p>这里我的这几个服务都没有设置为自动启动，如有需要可自行将 <code>autostart</code> 设置为 true。</p>

<p>最后执行 <code>supervisord</code> 命令启动 supervisor 服务。之后就可以通过 <code>supervisorctl</code> 命令来进行服务管理了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riot.js之初体验]]></title>
    <link href="http://www.xefan.com/archives/84152.html"/>
    <updated>2015-08-21T09:55:14+08:00</updated>
    <id>http://www.xefan.com/archives/84152-Riot.js之初体验</id>
    <content type="html"><![CDATA[<p>Riot(<a href="http://riotjs.com/">http://riotjs.com/</a>)按照官方的介绍，它是一个类似于 React 的微型框架。
压缩之后的文件只有差不多 15K 的大小，相比其他基本上都是上百K大小的框架来说确实是很微型的。</p>

<p>同时它的官方还给出了与 React 和 Polymer 的对比，各位感兴趣可以看看： <a href="http://riotjs.com/compare/">http://riotjs.com/compare/</a></p>

<p>下面通过一个例子来体验一下。</p>

<p>先下载 Riot 库文件： <a href="https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js  ">https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js  </a>
然后新建一个文件 <code>index.html</code>，内容如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;title&gt;</span>Tabs exampe<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span> <span class="na">media=</span><span class="s">&quot;screen&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nc">.tabContent__item</span><span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span><span class="k">none</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nc">.tabContent__item.is-active</span><span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span><span class="k">block</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;riot-tabs&gt;&lt;/riot-tabs&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;tabs.tag&quot;</span> <span class="na">type=</span><span class="s">&quot;riot/tag&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;riot+compiler.min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nx">riot</span><span class="p">.</span><span class="nx">mount</span><span class="p">(</span><span class="s1">&#39;riot-tabs&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着再创建文件 <code>tabs.tag</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;riot-tabs&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h2&gt;</span>Tabs<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="na">each=</span><span class="s">{</span> <span class="na">tab</span><span class="err">,</span> <span class="na">i</span> <span class="na">in</span> <span class="na">tabs</span> <span class="err">}</span> <span class="na">class=</span><span class="s">&quot;tabItem { is-active: parent.isActiveTab(tab.ref) }&quot;</span> <span class="na">onclick=</span><span class="s">{</span> <span class="na">parent</span><span class="err">.</span><span class="na">toggleTab</span> <span class="err">}</span><span class="nt">&gt;</span>{tab.title}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tabContent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">each=</span><span class="s">{</span> <span class="na">tab</span><span class="err">,</span> <span class="na">i</span> <span class="na">in</span> <span class="na">tabs</span> <span class="err">}</span> <span class="na">class=</span><span class="s">&quot;tabContent__item { is-active: parent.isActiveTab(tab.ref) }&quot;</span><span class="nt">&gt;</span>{tab.content}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  this.tabs = [
</span><span class='line'>    { title: &#39;Tab 1&#39;, ref: &#39;tab1&#39;, content: &quot;(1) Lorem ipsum dolor&quot; },
</span><span class='line'>    { title: &#39;Tab 2&#39;, ref: &#39;tab2&#39;, content: &quot;(2) Lorem ipsum dolor&quot; },
</span><span class='line'>    { title: &#39;Tab 3&#39;, ref: &#39;tab3&#39;, content: &quot;(3) Lorem ipsum dolor&quot; }
</span><span class='line'>  ]
</span><span class='line'>
</span><span class='line'>  this.activeTab = &#39;tab1&#39;
</span><span class='line'>
</span><span class='line'>  isActiveTab(tab) {
</span><span class='line'>    return this.activeTab === tab
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  toggleTab(e) {
</span><span class='line'>    this.activeTab = e.item.tab.ref
</span><span class='line'>    return true
</span><span class='line'>  }
</span><span class='line'><span class="nt">&lt;/riot-tabs&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个是 javascript 与 html 的混合。当然还可以使用纯 js 的写法，将 <code>tabs.tag</code> 改为 <code>tabs.js</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>riot.tag(&#39;riot-tabs&#39;, &#39;<span class="nt">&lt;h2&gt;</span>Tabs<span class="nt">&lt;/h2&gt;</span> <span class="nt">&lt;ul&gt;</span> <span class="nt">&lt;li</span> <span class="na">each=</span><span class="s">&quot;{ tab, i in tabs }&quot;</span> <span class="na">class=</span><span class="s">&quot;tabItem { is-active: parent.isActiveTab(tab.ref) }&quot;</span> <span class="na">onclick=</span><span class="s">&quot;{ parent.toggleTab }&quot;</span><span class="nt">&gt;</span>{tab.title}<span class="nt">&lt;/li&gt;</span> <span class="nt">&lt;/ul&gt;</span> <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tabContent&quot;</span><span class="nt">&gt;</span> <span class="nt">&lt;div</span> <span class="na">each=</span><span class="s">&quot;{ tab, i in tabs }&quot;</span> <span class="na">class=</span><span class="s">&quot;tabContent__item { is-active: parent.isActiveTab(tab.ref) }&quot;</span><span class="nt">&gt;</span>{tab.content}<span class="nt">&lt;/div&gt;</span> <span class="nt">&lt;/div&gt;</span>&#39;, function(opts) {
</span><span class='line'>
</span><span class='line'>  this.tabs = [
</span><span class='line'>    { title: &#39;Tab 1&#39;, ref: &#39;tab1&#39;, content: &quot;(1) Lorem ipsum dolor&quot; },
</span><span class='line'>    { title: &#39;Tab 2&#39;, ref: &#39;tab2&#39;, content: &quot;(2) Lorem ipsum dolor&quot; },
</span><span class='line'>    { title: &#39;Tab 3&#39;, ref: &#39;tab3&#39;, content: &quot;(3) Lorem ipsum dolor&quot; }
</span><span class='line'>  ];
</span><span class='line'>
</span><span class='line'>  this.activeTab = &#39;tab1&#39;;
</span><span class='line'>
</span><span class='line'>  this.isActiveTab = function(tab) {
</span><span class='line'>    return this.activeTab === tab;
</span><span class='line'>  }.bind(this);
</span><span class='line'>
</span><span class='line'>  this.toggleTab = function(e) {
</span><span class='line'>    this.activeTab = e.item.tab.ref;
</span><span class='line'>    return true;
</span><span class='line'>  }.bind(this);
</span><span class='line'>
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>


<p>同时将 <code>index.html</code> 中的 <code>&lt;script src="tabs.tag" type="riot/tag"&gt;&lt;/script&gt;</code> 修改为 <code>&lt;script src="tabs.js" type="riot/tag"&gt;&lt;/script&gt;</code> 。</p>

<p>好了，现在打开浏览器看下效果吧。</p>

<p>体验了一下，感觉它比 angular 之类的框架的学习成本要低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记5——路由]]></title>
    <link href="http://www.xefan.com/archives/84151.html"/>
    <updated>2015-08-20T20:58:53+08:00</updated>
    <id>http://www.xefan.com/archives/84151-AngularJS学习笔记5——路由</id>
    <content type="html"><![CDATA[<p>angularjs 的 <code>ngRoute</code> 模块提供了前端路由的功能。
在 angularjs 1.3 中 route 模块被单独提取了出来，要使用其功能需要将引用进来。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;script src="http://www.xefan.com/lib/angular-1.3.15.min.js"&gt;&lt;/script&gt;
</span><span class='line'>  &lt;script src="http://www.xefan.com/lib/angular-route-1.3.15.min.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var routeApp = angular.module('routeApp', ['ngRoute']);
</span><span class='line'>routeApp.config(['$routeProvider',function ($routeProvider) {
</span><span class='line'>    $routeProvider
</span><span class='line'>    .when('/list', {
</span><span class='line'>      templateUrl: 'list.html',
</span><span class='line'>      controller: 'RouteListCtl'
</span><span class='line'>    })
</span><span class='line'>    .when('/list/:id', {
</span><span class='line'>        templateUrl: 'detail.html',
</span><span class='line'>        controller: 'RouteDetailCtl'
</span><span class='line'>    })
</span><span class='line'>    .otherwise({
</span><span class='line'>      redirectTo: '/list'
</span><span class='line'>    });
</span><span class='line'>}]);</span></code></pre></td></tr></table></div></figure>


<p>这里定义了两条路由规则，对应的视图模板分别为 list.html 和 detail.html</p>

<p>视图模板有三种定义方式：<br/>
方法1：编写在单独的文件中，然后 angularjs 通过 ajax 获取其内容；<br/>
方法2：直接在页面中使用 script 标签定义，如： <code>&lt;script type="text/ng-template" id="list.html"&gt; .... &lt;/script&gt;</code>；<br/>
方法3：使用 <code>$templateCache</code> 进行定义，如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>routeApp.run(function($templateCache) {
</span><span class='line'>  $templateCache.put('list.html', '...');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记4——依赖注入]]></title>
    <link href="http://www.xefan.com/archives/84150.html"/>
    <updated>2015-08-19T13:33:33+08:00</updated>
    <id>http://www.xefan.com/archives/84150-AngularJS学习笔记4——依赖注入</id>
    <content type="html"><![CDATA[<h2>依赖注入</h2>

<p>之前有遇到过 angularjs 的代码压缩之后就报错了，通过查文档得知是因为 angularjs 是通过变量名来查找相应服务的。
而 js 代码压缩之后变量名就变化了，从而无法找到相应的服务而报错。因此就需要指明依赖服务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function SomeController($scope, $http) { ... }</span></code></pre></td></tr></table></div></figure>


<p>例如以上代码就是定义了 <code>SomeController</code> 这个一个控制器，并依赖 <code>$scope</code> 和 <code>$http</code> 两个服务。
但是当该代码压缩之后，这两个参数名都变化了。因此还需要使用以下代码来指明所需的依赖。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SomeController.$inject = ['$scope', '$http'];</span></code></pre></td></tr></table></div></figure>


<p>或者另一个写法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>angular.module('app', [])
</span><span class='line'>       .controller('SomeController', ['$scope', '$http', function($scope, $http){
</span><span class='line'>
</span><span class='line'>}]);</span></code></pre></td></tr></table></div></figure>


<p>这样就可以保证我们的代码压缩之后也能正常运行了。</p>

<h2>自定义服务</h2>

<p>上面的 <code>$http</code> 服务为我们提供了 ajax 的功能。</p>

<p>需要自定义服务的可以使用 <code>module.factory</code> 方法或者 <code>module.service</code> 方法进行注册服务。
这两个方法稍微有些不同，一般我习惯使用 <code>module.factory</code> 。
然后在需要使用自定义服务的地方，将其添加到依赖列表中即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记3——表单]]></title>
    <link href="http://www.xefan.com/archives/84149.html"/>
    <updated>2015-08-18T18:32:35+08:00</updated>
    <id>http://www.xefan.com/archives/84149-AngularJS学习笔记3——表单</id>
    <content type="html"><![CDATA[<h2>双向绑定</h2>

<p>使用 <code>ngModel</code> 指令将输入框与 model 进行绑定，如： <code>&lt;input type="text" ng-model="text" name="text" /&gt;</code><br/>
当输入框或者 model 的值其中一方改变都会影响另一方。</p>

<h2>表单验证</h2>

<p>之前表单验证都是用的 jquery-validation 这个插件，这需要编写大量的 js 代码用于逻辑控制，
现在改用 angularjs 之后方便了许多，不过还是要编写大量的视图代码。</p>

<p>一个简单的例子： <a href="https://github.com/wusuopu/angularjs-practice/blob/master/static/form/validate.html">https://github.com/wusuopu/angularjs-practice/blob/master/static/form/validate.html</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;form action="#" name="user_form" ng-submit="submitForm(user_form.$valid, $event)" novalidate&gt;
</span><span class='line'>
</span><span class='line'>    &lt;div class="form-group" ng-class="{'has-error' : user_form.name.$invalid && user_form.name.$dirty, 'has-success' : user_form.name.$valid}"&gt;
</span><span class='line'>        &lt;label&gt;Name&lt;/label&gt;
</span><span class='line'>        &lt;input type="text" name="name" class="form-control" ng-model="formData.name" required&gt;
</span><span class='line'>        &lt;p ng-show="user_form.name.$invalid && user_form.name.$dirty" class="help-block"&gt;You name is required.&lt;/p&gt;
</span><span class='line'>    &lt;/div&gt;
</span><span class='line'>.....
</span><span class='line'>&lt;/form&gt;</span></code></pre></td></tr></table></div></figure>


<p>首先为 form 表单设置 <code>name</code> 属性，并设置 <code>novalidate</code> 属性禁止浏览器使用 HTML5 自带的验证功能。
然后对于需要验证的字段添加相应的验证属性，angularjs 内建的验证规则如下：</p>

<ul>
<li>email</li>
<li>max</li>
<li>maxlength</li>
<li>min</li>
<li>minlength</li>
<li>number</li>
<li>pattern</li>
<li>required</li>
<li>url</li>
<li>date</li>
<li>datetimelocal</li>
<li>time</li>
<li>week</li>
<li>month</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记2——模板]]></title>
    <link href="http://www.xefan.com/archives/84148.html"/>
    <updated>2015-08-14T22:00:21+08:00</updated>
    <id>http://www.xefan.com/archives/84148-AngularJS学习笔记2——模板</id>
    <content type="html"><![CDATA[<h2>ngRepeat</h2>

<p>对于一些需要循环遍历的对象可以使用 <code>ngRepeat</code> 指令。 如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;li ng-repeat="msg in messages"&gt; &lt;/li&gt;
</span><span class='line'>
</span><span class='line'>  // 对于 messages 数组进行遍历
</span><span class='line'>  $scope.messages =  [
</span><span class='line'>    "第一条消息",
</span><span class='line'>    "第二条消息",
</span><span class='line'>    "第三条消息",
</span><span class='line'>    "第四条消息",
</span><span class='line'>    "第五条消息"
</span><span class='line'>  ];
</span></code></pre></td></tr></table></div></figure>


<h2>ngSwitch</h2>

<p>使用 <code>ngSwitch</code> 指令在不同条件下显示不同内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div ng-controller="ExampleController"&gt;
</span><span class='line'>  &lt;select ng-model="selection" ng-options="item for item in items"&gt;
</span><span class='line'>  &lt;/select&gt;
</span><span class='line'>  &lt;code&gt;selection=&lt;/code&gt;
</span><span class='line'>  &lt;hr/&gt;
</span><span class='line'>  &lt;div class="animate-switch-container"
</span><span class='line'>    ng-switch="selection"&gt;
</span><span class='line'>      &lt;div class="animate-switch" ng-switch-when="settings"&gt;Settings Div&lt;/div&gt;
</span><span class='line'>      &lt;div class="animate-switch" ng-switch-when="home"&gt;Home Span&lt;/div&gt;
</span><span class='line'>      &lt;div class="animate-switch" ng-switch-default&gt;default&lt;/div&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/div&gt;
</span><span class='line'>
</span><span class='line'>&lt;script type="text/javascript"&gt;
</span><span class='line'>angular.module('myApp', []).controller('ExampleController', ['$scope', function($scope) {
</span><span class='line'>  $scope.items = ['settings', 'home', 'other'];
</span><span class='line'>  $scope.selection = $scope.items[0];
</span><span class='line'>}]);
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Filter</h2>

<p>使用 <code>filter</code> 指令过滤需要的内容，基本形式： &#8220;
如果有用过其他模板引擎的话（如：Jinja）应该很好理解的。</p>

<p>angularjs 提供了一些内置的过滤器：date, json, lowercase, uppercase 等。</p>

<h2>ngIf</h2>

<p>基本形式： <code>&lt;ANY ng-if="expression"&gt; ... &lt;/ANY&gt;</code>
当 <code>expression</code> 的值为真时才会输出该标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记1——基础入门]]></title>
    <link href="http://www.xefan.com/archives/84147.html"/>
    <updated>2015-08-13T22:54:04+08:00</updated>
    <id>http://www.xefan.com/archives/84147-AngularJS学习笔记1——基础入门</id>
    <content type="html"><![CDATA[<p>angularjs 是一款前端的 MVVM 框架，目前 2.0 好像也快要发布了。
angularjs 2.0 的理念又变为了 Web 组件，与 1.x 不兼容。
于是这里就把之前 angularjs 1.x 的学习笔记整理一下，作为以后回顾吧。</p>

<p>相关的事例代码可以从 <a href="https://github.com/wusuopu/angularjs-practice">https://github.com/wusuopu/angularjs-practice</a> 获取。</p>

<h2>简单事例</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;
</span><span class='line'>&lt;html lang="en" ng-app&gt;
</span><span class='line'>&lt;head&gt;
</span><span class='line'>    &lt;meta charset="utf-8"&gt;
</span><span class='line'>    &lt;title&gt;基本例子&lt;/title&gt;
</span><span class='line'>    &lt;script src="http://www.xefan.com/lib/angular-1.0.4.min.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>  &lt;p&gt;1 + 2 = 1&lt;/p&gt;
</span><span class='line'>  &lt;div ng-controller="DemoController"&gt;
</span><span class='line'>    &lt;p&gt;&lt;/p&gt;
</span><span class='line'>  &lt;/div&gt;
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;script type="text/javascript" charset="utf-8"&gt;
</span><span class='line'>  function DemoController($scope){
</span><span class='line'>    $scope.content = "简单的控制器例子";
</span><span class='line'>  }
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>以上是一个最简单的例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html lang="en" ng-app&gt;</span></code></pre></td></tr></table></div></figure>


<p>html 的 <code>ng-app</code> 属性表明在该页面中启用 angularjs。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;p&gt;1 + 2 = 1&lt;/p&gt;</span></code></pre></td></tr></table></div></figure>


<p>在页面加载完成之后 angularjs 会解析大括号内的表达式，并进行渲染。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;div ng-controller="DemoController"&gt;
</span><span class='line'>    &lt;p&gt;&lt;/p&gt;
</span><span class='line'>  &lt;/div&gt;</span></code></pre></td></tr></table></div></figure>


<p><code>ng-controller</code> 表示在该标签下定义一个控制器。一个控制器就是一个普通的 js 函数。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/javascript" charset="utf-8"&gt;
</span><span class='line'>  function DemoController($scope){
</span><span class='line'>    $scope.content = "简单的控制器例子";
</span><span class='line'>  }
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>这里定义 <code>DemoController</code> 控制器函数，并传入一个 <code>$scope</code> 参数，它是用于表示该控制器的上下文。</p>
]]></content>
  </entry>
  
</feed>
