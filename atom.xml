<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[龍昌博客]]></title>
  <link href="http://www.xefan.com/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-01-14T18:18:29+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis集群配置实例]]></title>
    <link href="http://www.xefan.com/archives/84140.html"/>
    <updated>2015-01-14T18:11:36+08:00</updated>
    <id>http://www.xefan.com/archives/84140-Redis集群配置实例</id>
    <content type="html"><![CDATA[<p>通过配置 redis 的主从集群可将请求的负荷分散到多台服务器上。</p>

<p>redis 的集群配置比较简单，以下是一个例子。
假设有如下三台主机：</p>

<ul>
<li>172.17.0.11 (主)</li>
<li>172.17.0.12 (从)</li>
<li>172.17.0.13 (从)</li>
</ul>


<p>在从服务器上添加如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>slaveof 172.17.0.11 6379</span></code></pre></td></tr></table></div></figure>


<p>如果主服务器设置了认证密码，那么还需要再添加一条配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>masterauth &lt;password&gt;</span></code></pre></td></tr></table></div></figure>


<p>然后分别启动三台服务器的 redis 服务即可。</p>

<p>接下来连接主服务器添加一些数据测试一下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -h 172.17.0.11
</span><span class='line'>172.17.0.11:6379&gt; set foo1 bar1
</span><span class='line'>OK</span></code></pre></td></tr></table></div></figure>


<p>然后再连接到从服务器查询结果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ redis-cli -h 172.17.0.12
</span><span class='line'>172.17.0.12:6379&gt; get foo1
</span><span class='line'>"bar1"</span></code></pre></td></tr></table></div></figure>


<p>这时发现数据已经同步过来了。</p>

<p>注意：从服务器默认是只读的。如果需要设置为可写，可将 <code>slave-read-only</code> 设置项的值设为 <code>no</code> 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb分片配置实例]]></title>
    <link href="http://www.xefan.com/archives/84139.html"/>
    <updated>2014-12-29T16:52:37+08:00</updated>
    <id>http://www.xefan.com/archives/84139-Mongodb分片配置实例</id>
    <content type="html"><![CDATA[<p>数据分片即是从一个集合中选择一个片键(shard key)作为数据拆分的依据，原理与索引类似，然后将集合的数据拆分并保存到不同的服务器上。
以下通过一个例子来介绍一下Mongodb的分片配置。</p>

<p>有四台主机：</p>

<ul>
<li>172.17.0.6    (配置服务器)</li>
<li>172.17.0.7    (mongos)</li>
<li>172.17.0.8    (片服务器)</li>
<li>172.17.0.9    (片服务器)</li>
</ul>


<p>1.在 172.17.0.6 上启动 mongod 服务作为配置服务器；<br/>
修改配置，使其作为一个配置服务器，默认监听 27019 端口。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configsvr = true</span></code></pre></td></tr></table></div></figure>


<p>启动服务 <code>$ service mongodb start</code></p>

<p>2.在 172.17.0.7 上启动 mongos 服务作为路由服务;<br/>
建立mongos进程。(可以有多台配置服务器)，用法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongos --configdb &lt;config server hostnames&gt;[,&lt;config server hostnames&gt;]</span></code></pre></td></tr></table></div></figure>


<p>例如： <code>$ mongos --configdb 172.17.0.6:27019</code></p>

<p>注意：在同一个分片集群中的每个 mongos 必须使用相同的 configDB 配置。</p>

<p>3.添加分片<br/>
一个片服务既可以是单个 mongod 实例，也可以是一个副本集。<br/>
1).先分别在 172.17.0.8 和 172.17.0.9 上启动片服务器，即就是一个普通的 mongod 服务。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ service mongodb start</span></code></pre></td></tr></table></div></figure>


<p>2).使用 mongo 客户端连接到 mongos 服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo --host &lt;hostname of machine running mongos&gt; --port &lt;port mongos listens on&gt;</span></code></pre></td></tr></table></div></figure>


<p>如： <code>$ mongo --host 172.17.0.7 --port 27017</code></p>

<p>3).在 mongo 客户端上执行命令添加分片：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; use admin
</span><span class='line'>&gt; db.auth(&lt;user&gt;, &lt;pswd&gt;)
</span><span class='line'>&gt; sh.addShard("172.17.0.8:27017")
</span><span class='line'>&gt; sh.addShard("172.17.0.9:27017")</span></code></pre></td></tr></table></div></figure>


<p>4.切片数据<br/>
1).首先对数据库进行切片<br/>
使用 mongo 客户端连接到 mongos ，执行命令打开数据库的分片功能，用法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sh.enableSharding("&lt;database&gt;")</span></code></pre></td></tr></table></div></figure>


<p>例如要打开 mydb 数据库的分片功能： <code>&gt; sh.enableSharding("mydb")</code></p>

<p>2).然后对数据集合进行切片<br/>
命令用法如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; sh.shardCollection("&lt;database&gt;.&lt;collection&gt;", shard-key-pattern)</span></code></pre></td></tr></table></div></figure>


<p><code>shard-key-pattern</code> 与索引的用法一样，例如，要对 mydb 数据库的 test 集合按照 <code>_id</code> 字段进行分片： <code>&gt; sh.shardCollection("mydb.test", {"_id": "hashed"})</code></p>

<p>接下来通过一个程序来测试一下，向数据库中添加10000条数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;mongo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">conn</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;172.17.0.7&#39;</span>
</span><span class='line'>  <span class="n">db</span> <span class="o">=</span> <span class="n">conn</span><span class="o">[</span><span class="s1">&#39;mydb&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span><span class="o">=&gt;</span><span class="n">e</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10000</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;no&#39;</span> <span class="o">=&gt;</span> <span class="n">i</span><span class="p">}</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">db</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">].</span><span class="n">insert</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">d</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后分别查看 172.17.0.8 和 172.17.0.9 的状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">172</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'><span class="mi">4952</span>
</span><span class='line'>
</span><span class='line'><span class="mi">172</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">count</span><span class="p">()</span>
</span><span class='line'><span class="mi">5048</span>
</span></code></pre></td></tr></table></div></figure>


<p>数据基本上是平均的分布在两台服务器上。</p>

<p>参考： <a href="http://docs.mongodb.org/manual/tutorial/deploy-shard-cluster/">http://docs.mongodb.org/manual/tutorial/deploy-shard-cluster/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gunicorn部署Django]]></title>
    <link href="http://www.xefan.com/archives/84138.html"/>
    <updated>2014-12-13T21:03:27+08:00</updated>
    <id>http://www.xefan.com/archives/84138-使用gunicorn部署Django</id>
    <content type="html"><![CDATA[<p><a href="http://gunicorn.org/">Gunicorn</a> 是 Python的 一个 WSGI HTTP服务器，根据它的介绍说是它来自于 Ruby 的 Unicorn。可以方便的部署 Python 的 Web 程序，而且本身支持多种 Python 的框架，如 Django、Paster等。</p>

<p>通过介绍来看貌似很不错的样子，只可惜我现在不玩 Python 了，于是就简单体验一下。</p>

<h2>简单应用</h2>

<p>首先是安装，这个可以直接使用 <code>pip</code> 来完成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install gunicorn</span></code></pre></td></tr></table></div></figure>


<p>然后再根据官方文档的介绍部署一个简单的例子试试：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd examples
</span><span class='line'>$ cat test.py
</span><span class='line'># -*- coding: utf-8 -
</span><span class='line'>#
</span><span class='line'># This file is part of gunicorn released under the MIT license.
</span><span class='line'># See the NOTICE for more information.
</span><span class='line'>
</span><span class='line'>def app(environ, start_response):
</span><span class='line'>    """Simplest possible application object"""
</span><span class='line'>    data = 'Hello, World!\n'
</span><span class='line'>    status = '200 OK'
</span><span class='line'>    response_headers = [
</span><span class='line'>        ('Content-type','text/plain'),
</span><span class='line'>        ('Content-Length', str(len(data)))
</span><span class='line'>    ]
</span><span class='line'>    start_response(status, response_headers)
</span><span class='line'>    return iter([data])
</span><span class='line'>
</span><span class='line'>$ gunicorn -b 0.0.0.0:8000 --workers=2 test:app</span></code></pre></td></tr></table></div></figure>


<p>好的，现在程序运行起来了，可以访问 <a href="http://localhost:8000">http://localhost:8000</a> 看下效果。</p>

<p>gunicorn 也可以通过配置文件来设置一些内容， 一个配置文件是一个 python 脚本，格式类似 <code>.ini</code> 。通过 <code>-c</code> 参数指定要使用的配置文件。如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config.ini
</span><span class='line'>bind = ["0.0.0.0:8000", "unix:///tmp/gunicorn.sock"]
</span><span class='line'>workers = 3 </span></code></pre></td></tr></table></div></figure>


<p>gunicorn 还能与 Django 和 Paster 应用集成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gunicorn --env DJANGO_SETTINGS_MODULE=myproject.settings myproject.wsgi:application
</span><span class='line'>$ gunicorn --paste development.ini -b :8080 --chdir /path/to/project</span></code></pre></td></tr></table></div></figure>


<h2>与 Nginx 部署</h2>

<p>gunicorn 本身也是一个 WSGI 应用，可以与 Nginx 一同使用。
以下是 Nginx + Gunicorn 部署 Django 的事例， Nginx 配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># nginx.conf
</span><span class='line'>http {
</span><span class='line'>    include mime.types;
</span><span class='line'>    default_type application/octet-stream;
</span><span class='line'>    access_log /tmp/nginx.access.log combined;
</span><span class='line'>    sendfile on;
</span><span class='line'>
</span><span class='line'>    upstream app_server {
</span><span class='line'>        server unix:/tmp/gunicorn.sock fail_timeout=0;
</span><span class='line'>        # For a TCP configuration:
</span><span class='line'>        # server 192.168.0.7:8000 fail_timeout=0;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    server {
</span><span class='line'>        listen 80 default;
</span><span class='line'>        client_max_body_size 4G;
</span><span class='line'>        server_name _;
</span><span class='line'>
</span><span class='line'>        keepalive_timeout 5;
</span><span class='line'>
</span><span class='line'>        # path for static files
</span><span class='line'>        root /path/to/app/current/public;
</span><span class='line'>
</span><span class='line'>        location / {
</span><span class='line'>            # checks for static file, if not found proxy to app
</span><span class='line'>            try_files $uri @proxy_to_app;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        location @proxy_to_app {
</span><span class='line'>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>            proxy_set_header Host $http_host;
</span><span class='line'>            proxy_redirect off;
</span><span class='line'>
</span><span class='line'>            proxy_pass   http://app_server;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        error_page 500 502 503 504 /500.html;
</span><span class='line'>        location = /500.html {
</span><span class='line'>            root /path/to/app/current/public;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Gunicorn 的配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># gunicorn.ini
</span><span class='line'>import os
</span><span class='line'>
</span><span class='line'>bind = ["0.0.0.0:8000", "unix:///tmp/gunicorn.sock"]
</span><span class='line'>workers = 3
</span><span class='line'>chdir = os.path.dirname(os.path.realpath(__file__))
</span><span class='line'>raw_env = ["DJANGO_SETTINGS_MODULE=app.settings"]
</span><span class='line'>accesslog = "/tmp/gunicorn-access.log"
</span><span class='line'>errorlog = "/tmp/gunicorn.log"
</span><span class='line'>daemon = True
</span><span class='line'>pidfile = "/tmp/gunicorn.pid"</span></code></pre></td></tr></table></div></figure>


<p>运行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gunicorn -c gunicorn.ini webui.wsgi:application
</span><span class='line'>$ service nginx start</span></code></pre></td></tr></table></div></figure>


<h2>其他内容</h2>

<p>与 WSGI 应用一样，如果之后配置有改动可以向 gunicorn 服务进程发送 <code>HUP</code> 信号让其重新加载配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ kill -s HUP &lt;pid&gt;</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongodb集群配置实例]]></title>
    <link href="http://www.xefan.com/archives/84137.html"/>
    <updated>2014-12-10T20:33:02+08:00</updated>
    <id>http://www.xefan.com/archives/84137-Mongodb集群配置实例</id>
    <content type="html"><![CDATA[<p>Mongodb的集群有两种，一个是主从复制，另一种是副本集。</p>

<h2>主从复制</h2>

<p>根据 Mongodb 的官方文档说明，在生产环境中建议使用副本集代替主从复制。 <a href="http://docs.mongodb.org/manual/core/master-slave/">http://docs.mongodb.org/manual/core/master-slave/</a></p>

<p>不过对于主从复制还是可以了解一下。假设有如下三台主机：</p>

<ul>
<li>172.17.0.4    (主)</li>
<li>172.17.0.5    (从)</li>
<li>172.17.0.6    (从)</li>
</ul>


<p>要进行主从复制的配置，首先修改主服务器的配置信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>master = true         # 以主服务器模式启动
</span><span class='line'>bind_ip = 0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p>然后修改另两台从服务器配置信息：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>slave = true
</span><span class='line'>source = 172.17.0.4
</span><span class='line'>bind_ip = 0.0.0.0</span></code></pre></td></tr></table></div></figure>


<p>最后启动三台主机上的 Mongodb 服务，再通过一个简单的程序来测试一下。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1">#-*- coding:utf-8 -*-</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;mongo&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">begin</span>
</span><span class='line'>  <span class="n">conn</span> <span class="o">=</span> <span class="no">Mongo</span><span class="o">::</span><span class="no">Connection</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;172.17.0.4&#39;</span>
</span><span class='line'>  <span class="n">db</span> <span class="o">=</span> <span class="n">conn</span><span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span><span class="o">=&gt;</span><span class="n">e</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">e</span>
</span><span class='line'>  <span class="nb">exit</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;no&#39;</span> <span class="o">=&gt;</span> <span class="n">i</span><span class="p">}</span>
</span><span class='line'>  <span class="n">d</span> <span class="o">=</span> <span class="n">db</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">].</span><span class="n">insert</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">d</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行该脚本，向 <code>172.17.0.4</code> 主机的 Mongodb 中插入一些数据。然后发现数据被同步到了另外两台主机上。</p>

<p>主从之间安全认证：<br/>
如果启动了 <code>auth</code> 项，那么主从之间的认证需要使用 <code>keyFile</code> 选项。</p>

<p>执行如下命令生成 key 文件，并设置为只有 mongodb 的进程用户可读写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">openssl</span> <span class="nb">rand</span> <span class="o">-</span><span class="n">base64</span> <span class="mi">741</span> <span class="o">&gt;</span> <span class="sr">/path/mon</span><span class="n">godb_keyFile</span>
</span><span class='line'><span class="err">$</span> <span class="n">chmow</span> <span class="mi">600</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">mongodb_keyFile</span>
</span><span class='line'><span class="err">$</span> <span class="n">chown</span> <span class="ss">mongodb</span><span class="p">:</span><span class="n">mongodb</span> <span class="sr">/path/mon</span><span class="n">godb_keyFile</span>
</span></code></pre></td></tr></table></div></figure>


<p>将该文件复制到这三台主机中，然后分别修改主从的配置信息：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">keyFile</span> <span class="o">=</span> <span class="sr">/path/mon</span><span class="n">godb_keyFile</span>
</span></code></pre></td></tr></table></div></figure>


<h2>副本集</h2>

<p>同样的对于这三台主机，我们重新修改配置设置为副本集的形式。</p>

<ul>
<li>172.17.0.4</li>
<li>172.17.0.5</li>
<li>172.17.0.6</li>
</ul>


<p>首先修改配置文件，设置副本集的名字。<br/>
注意：副本集中所有主机设置的名字需要一样。这里我们设为 <code>myrepl0</code>。<br/>
注意：设置副本集之前各个 mongodb 的数据目录必须都为空。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">replSet</span> <span class="o">=</span> <span class="n">myrepl0</span>
</span></code></pre></td></tr></table></div></figure>


<p>接着启动所有 mongodb 服务，然后对副本集进行初始化。<br/>
连接任意一台 mongodb 服务，执行如下操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">rs</span><span class="o">.</span><span class="n">initiate</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="s1">&#39;myrepl0&#39;</span><span class="p">,</span> <span class="s1">&#39;members&#39;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.4:27017&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.7:27017&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.8:27017&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">]</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在副本集的初始化已完成，可以通过如下命令查看状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">rs</span><span class="o">.</span><span class="n">status</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>在运行过程中可以随时添加或移除一个节点，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rs</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;172.17.0.8:27017&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">rs</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s2">&quot;172.17.0.8:27017&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以再通过上面的程序添加一些数据。然后再连接到任意一台主机进行查询，看看数据是否已同步。</p>

<p>详细内容可参考文档： <a href="http://docs.mongodb.org/manual/core/replication/">http://docs.mongodb.org/manual/core/replication/</a></p>

<p>安全认证：</p>

<p>1.禁用 auth 选项和 replSet 选项再运行 mongodb</p>

<p>2.连接到该 mongodb 服务并创建用户</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">use</span> <span class="n">admin</span>
</span><span class='line'><span class="n">switched</span> <span class="n">to</span> <span class="n">db</span> <span class="n">admin</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">addUser</span><span class="p">(</span><span class="s1">&#39;root&#39;</span><span class="p">,</span><span class="s1">&#39;root&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;user&quot;</span> <span class="p">:</span> <span class="s2">&quot;root&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;readOnly&quot;</span> <span class="p">:</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;pwd&quot;</span> <span class="p">:</span> <span class="s2">&quot;2a8025f0885adad5a8ce0044070032b3&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;54745351f79804bd44b596fb&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>3.重新以 auth、keyFile 和 replSet 模式启动 mongodb</p>

<p>4.连接到刚刚创建用户的 mongodb 服务</p>

<p>5.跟之前的步骤一样，配置副本集</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">rs</span><span class="o">.</span><span class="n">initiate</span><span class="p">({</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="s1">&#39;myrepl0&#39;</span><span class="p">,</span> <span class="s1">&#39;members&#39;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.4:27017&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.7:27017&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="p">{</span><span class="s1">&#39;_id&#39;</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;host&#39;</span><span class="p">:</span> <span class="s1">&#39;172.17.0.8:27017&#39;</span><span class="p">}</span>
</span><span class='line'><span class="o">]</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考： <a href="http://docs.mongodb.org/manual/tutorial/deploy-replica-set-with-auth/">http://docs.mongodb.org/manual/tutorial/deploy-replica-set-with-auth/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用VIM进行PHP远程调试]]></title>
    <link href="http://www.xefan.com/archives/84136.html"/>
    <updated>2014-11-19T20:00:30+08:00</updated>
    <id>http://www.xefan.com/archives/84136-使用VIM进行PHP远程调试</id>
    <content type="html"><![CDATA[<p>最近在写 PHP 时感觉它的调试不是很方便，基本都是用的 <code>var_dump</code> 将信息输出到页面上进行调试。最终实现是受不了这种方式，就找了一下看看有没有什么简便的方法。
于是就找到了 <code>vdebug</code> 这个 vim 插件，使用它可以方便的进行远程调试。</p>

<p>根据 <code>vdebug</code> 的介绍，说是它可以用来调试基于 DBGP 协议的程序，比如： PHP、Python、Ruby等。
可能只是 DBGP 协议在 PHP 中用得比较多吧，因此看到的大部分介绍都是说的 PHP 调试。
关于 DBGP 协议的详细介绍可参考： <a href="http://xdebug.org/docs-dbgp.php">http://xdebug.org/docs-dbgp.php</a></p>

<p><strong>使用方法：</strong></p>

<p>首先是在 vim 中安装这个插件，下载地址： <a href="https://github.com/joonty/vdebug">https://github.com/joonty/vdebug</a></p>

<p>由于它的配置信息都写死在代码中的，因此我就 fork 了一份进行自定义的修改，如快捷键设置、远程主机名和端口号。</p>

<p>然后是安装 PHP 的 Xdebug 扩展，并配置一些参数信息。在 <code>php.ini</code> 配置文件中添加如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xdebug.remote_enable=on
</span><span class='line'>xdebug.remote_handler=dbgp
</span><span class='line'>xdebug.remote_host=127.0.0.1
</span><span class='line'>xdebug.remote_port=9010</span></code></pre></td></tr></table></div></figure>


<p>注意：这里的主机名和端口号要与 <code>vdebug</code> 中的一致。</p>

<p>接着使用 vim 打开一个 php 文件，按 <code>&lt;F5&gt;</code> 键启动该插件进行调试。然后在浏览器中访问该 php 程序，
并加上 <code>XDEBUG_SESSION_START=1</code> 参数，如： <a href="http://127.0.0.1/test.php?XDEBUG_SESSION_START=1">http://127.0.0.1/test.php?XDEBUG_SESSION_START=1</a></p>

<p>现在就可以在 vim 中对 php 程序进行单步调试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx + Uwsgi + Django环境配置]]></title>
    <link href="http://www.xefan.com/archives/84135.html"/>
    <updated>2014-11-11T21:02:17+08:00</updated>
    <id>http://www.xefan.com/archives/84135-Nginx+uwsgi+Django环境配置</id>
    <content type="html"><![CDATA[<p>有段时间没折腾 Django 了，又有点生疏了。最近又部署了一下 Django 的环境，顺便作个笔记以便之后查阅。</p>

<p>首先安装 nginx、uwsgi 以及 uwsgi 的 python 插件。</p>

<p>然后新建一个 uwsgi 的配置文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[uwsgi]
</span><span class='line'>uid = www-data
</span><span class='line'>chdir = /repo/django-blog
</span><span class='line'>virtualenv = /repo/django-blog/pyenv2.7/    # python虚拟环境，没有可以不设置
</span><span class='line'>env = DJANGO_SETTINGS_MODULE=blog.settings
</span><span class='line'>module = blog.wsgi:application
</span><span class='line'>master = true
</span><span class='line'>plugin = python
</span><span class='line'>pidfile = /tmp/blog-master.pid
</span><span class='line'>socket = /tmp/blog.sock
</span><span class='line'>enable-threads = true
</span><span class='line'>post-buffering=1024000
</span><span class='line'>post-buffering-busize=655360</span></code></pre></td></tr></table></div></figure>


<p>这里我们的 Django 项目代码位于 <code>/repo/django-blog</code> ，项目的配置文件为： <code>blog/settings.py</code> 。</p>

<p><code>virtualenv</code> 项表明我们使用的是 <code>virtualenv</code> 环境，也可以直接系统的 python 环境。不过还是建议使用虚拟环境，以免软件包版本冲突。</p>

<p><code>post-buffering</code> 和 <code>post-buffering-busize</code> 这两项设置了 POST 请求时缓冲区的大小，该值可根据自己的情况进行调整。之前遇到过由于缓冲区不足导致返回的内容不完整。</p>

<p>再安装对应的 python 依赖包，然后运行 uwsgi 服务。</p>

<p>接着修改 nginx 的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>  listen 80;
</span><span class='line'>  server_name localhost;
</span><span class='line'>
</span><span class='line'>  client_max_body_size 50m;
</span><span class='line'>
</span><span class='line'>  access_log /var/log/nginx/blog-access.log;
</span><span class='line'>  error_log /var/log/nginx/blog-error.log;
</span><span class='line'>
</span><span class='line'>  location / {
</span><span class='line'>    uwsgi_pass unix:///tmp/blog.sock;
</span><span class='line'>    include uwsgi_params;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  location /static {
</span><span class='line'>    alias /repo/django-blog/static/;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这个内容比较简单， <code>client_max_body_size</code> 项是用于设置 http 请求的 body 最大大小。如果你的程序中有文件上传的，那么就需要根据自身情况来设置允许上传文件的最大值。</p>

<p>最后再启动 nginx 服务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置rails的vim环境]]></title>
    <link href="http://www.xefan.com/archives/84134.html"/>
    <updated>2014-11-08T16:02:58+08:00</updated>
    <id>http://www.xefan.com/archives/84134-配置rails的vim环境</id>
    <content type="html"><![CDATA[<p>今天分享一款 vim 的 rails 插件： <code>vim-rails</code> 。</p>

<p>使用该插件可以方便的在多个文件之间进行跳转。如在控制器的 action 上按 <code>gf</code> 键会自动跳转到对应的视图文件。</p>

<p>也可以使用 <code>:Emodel</code>, <code>:Eview</code>, <code>:Econtroller</code>, 命令在模型、视图以及控制器之间进行跳转。</p>

<p>该插件还提供了对 rails 的一些关键字的高亮。</p>

<p>并且还可以直接在 vim 中使用 <code>:Rails</code> 命令。</p>

<p>同时还有 <code>vim-rake</code> 和 <code>vim-bundler</code> 两个插件提供了 <code>rake</code> 和 <code>bundle</code> 的 vim 命令接口。</p>

<p>如果是用的 vundle 进行插件管理的话，可以直接在 .vimrc 配置中添加如下内容即可：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Bundle 'tpope/vim-rails'
</span><span class='line'>Bundle 'tpope/vim-rake'
</span><span class='line'>Bundle 'tpope/vim-bundler'</span></code></pre></td></tr></table></div></figure>


<p>然后再在vim执行命令 :BundleInstall 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客终于迁移完成了！]]></title>
    <link href="http://www.xefan.com/archives/84133.html"/>
    <updated>2014-11-04T21:04:32+08:00</updated>
    <id>http://www.xefan.com/archives/84133-博客终于迁移完成了！</id>
    <content type="html"><![CDATA[<p>折腾了两天，终于将博客从之前的WordPress迁移到Jekyll上来了。</p>

<p>我的博客是从2009年开始使用WordPress的，至今也有5年多了。最近感觉WordPress提供的文章编辑功能不是很方便，本来是想着改用别的博客系统的。但是一直纠结着始终没换。一是由于懒，感觉能用就行了，不想折腾了。二是由于找不到比较好的系统。</p>

<p>这样就纠结了一年多。最近突然发现了Octopress，感觉很不错。于是果断地选择迁移过来。</p>

<p>环境搭建好了之后，接下来就是数据的迁移了。原打算之前的数据都不要了，准备从头再来的。毕竟之前的文章也写得不咋滴。
也许是自己比较怀旧吧，最终还是写了一个脚本将WordPress的数据输出为Markdown文件。<br/>
程序地址： <a href="https://github.com/wusuopu/wordpress-to-octopress">https://github.com/wusuopu/wordpress-to-octopress</a></p>

<p>数据输出之后发现布局全乱了，又得重新调整一下格式。唉~~~~~，只是麻烦啊！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置elixir的vim环境]]></title>
    <link href="http://www.xefan.com/archives/84132.html"/>
    <updated>2014-10-29T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84132-配置elixir的vim环境</id>
    <content type="html"><![CDATA[<p>elixir是建立在Erlang虚拟机之上的一种函数式编程语言。下面介绍elixir的两个vim插件。</p>


<p>首先是语法高亮支持： https://github.com/elixir-lang/vim-elixir</p>


<p>其次是snippets支持： https://github.com/carlosgaldino/elixir-snippets
这个需要先安装 snipMate 插件。</p>


<p>如果也是用的 vundle 进行插件管理的话，可以直接在 .vimrc 配置中添加如下内容即可：</p>


<pre><code>Bundle 'elixir-lang/vim-elixir'
Bundle 'carlosgaldino/elixir-snippets'

au BufNewFile,BufRead *.exs set ft=elixir
</code></pre>




<p>然后再在vim执行命令 :BundleInstall 即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[配置coffeescript的vim环境]]></title>
    <link href="http://www.xefan.com/archives/84130.html"/>
    <updated>2014-10-24T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84130-配置coffeescript的vim环境</id>
    <content type="html"><![CDATA[<p>coffeescript是构建在javascript基础上一门语言，它在运行时会编译在javascript。下面介绍vim用来开发coffeescript的两个插件。</p>


<p>首先是语法高亮支持： https://github.com/kchmck/vim-coffee-script</p>


<p>其次是snippets支持： https://github.com/carlosvillu/coffeScript-VIM-Snippets
这个需要先安装 snipMate 插件。</p>


<p>如果也是用的 vundle 进行插件管理的话，可以直接在 .vimrc 配置中添加如下内容即可：</p>


<pre><code>Bundle 'kchmck/vim-coffee-script'
Bundle 'carlosvillu/coffeScript-VIM-Snippets'

au BufNewFile,BufRead *.coffee set ft=coffee
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VIM编译参数]]></title>
    <link href="http://www.xefan.com/archives/84127.html"/>
    <updated>2014-10-18T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84127-VIM编译参数</id>
    <content type="html"><![CDATA[<p>每次重装系统之后都要重新编译一次VIM，为了方便就将编译参数记录如下：</p>


<pre><code>./configure --prefix=/opt/vim --enable-acl --enable-cscope --enable-largefile --enable-multibyte --enable-sniff --enable-mzschemeinterp --enable-xim --enable-tclinterp --enable-perlinterp --enable-python3interp --enable-pythonint
erp --enable-rubyinterp --enable-netbeans --enable-gui --enable-luainterp --enable-nls --enable-xsmp --enable-xsmp-interact --enable-fontset --with-features=huge --with-x
</code></pre>




<p>上面的参数中启用了对tcl、perl、python、ruby、lau的支持。同时为了使用系统的剪切板还启用了对X的支持。</p>


<p>我的VIM配置文件： https://github.com/wusuopu/my-vimrc</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker使用笔记]]></title>
    <link href="http://www.xefan.com/archives/84124.html"/>
    <updated>2014-09-21T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84124-Docker使用笔记</id>
    <content type="html"><![CDATA[<p>docker是一个Linux下的应用容器引擎。使用它可以很方便地将程序以及依赖都打包到一个可移植的容器中。最后体验了一下，使用docker配置了一个Web开发环境。这样就不用担心每次重装系统之后都要重新配置开发环境。</p>


<h3>安装</h3>


<p>首先是安装docker应用程序，目前只有64位系统才能使用。</p>


<pre><code>$ [sudo] apt-get install apparmor apparmor-profiles apparmor-utils
$ [sudo] apt-get install aufs-tools
$ [sudo] apt-get install cgroup-lite

$ wget https://get.docker.io/builds/Linux/x86_64/docker-latest.tgz
$ [sudo] tar xf docker-latest.tgz -C /
</code></pre>


<h3>基本用法</h3>


<p>安装完成之后使用 <code>[sudo] docker -d</code> 命令启动docker的daemon进程。</p>


<p>以下是一些常用命令的用法介绍：</p>


<pre><code>docker version            # 查看版本
docker search TERM        # 搜索镜像
docker pull NAME[:TAG]    # 下载镜像
</code></pre>




<p>启动镜像：</p>


<pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker run IMAGE -t -i /bin/bash                        # 进入镜像的shell环境
docker run IMAGE -p 12345:8000 -t -i /bin/bash          # 进入镜像的shell环境，将主机的12345端口映射到容器的8000端口

</code></pre>




<p>容器与镜像管理：</p>


<pre><code>docker ps [OPTIONS]                              # 列出容器
docker images [OPTIONS] [NAME]                   # 列出镜像
docker rm [OPTIONS] CONTAINER [CONTAINER...]     # 删除容器
docker rmi IMAGE [IMAGE...]                      # 删除镜像

docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]    # 根据修改的容器创建一个新的镜像
docker commit -m &quot;centos&quot; f9ccb5cef3c0 wusuopu/centos6
docker push NAME[:TAG]                                  # 上传镜像
</code></pre>




<pre><code>docker inspect CONTAINER|IMAGE [CONTAINER|IMAGE...]     # 查看一个容器或者镜像的详细信息
docker logs CONTAINER     # 查看日志
docker start CONTAINER [CONTAINER...]                   # 启动镜像
docker stop CONTAINER [CONTAINER...]                    # 停止镜像
docker tag [OPTIONS] IMAGE [REGISTRYHOST/][USERNAME/]NAME[:TAG]   # 给镜像打tag
docker diff CONTAINER     # 查看容器文件系统的变化
docker cp CONTAINER:PATH HOSTPATH                       # 将文件从容器复制到主机
</code></pre>




<p>导入、导出：</p>


<pre><code>docker export CONTAINER                                 # 导出容器到标准输出
docker export red_panda &gt; latest.tar

docker import URL|- [REPOSITORY[:TAG]]                  # 导入文件为镜像
docker import http://example.com/exampleimage.tgz
cat exampleimage.tgz | sudo docker import - exampleimagelocal:new
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx + Php + FastCGI配置]]></title>
    <link href="http://www.xefan.com/archives/84121.html"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84121-nginx + php + FastCGI配置</id>
    <content type="html"><![CDATA[<p>最近在弄PHP，于是乎把配置过程作一个笔记以免忘了。</p>


<h2>PHP安装、配置</h2>


<p>我是通过源代码编译的形式进行安装的，基本步骤如下：</p>


<pre><code>$ tar xf php-5.5.12.tar.bz2
$ cd php-5.5.12
$ './configure'  '--prefix=/opt/myphp' '--with-mysql' '--enable-safe-mode' '--enable-ftp' '--enable-zip' '--with-jpeg-dir' '--with-bz2' '--with-png-dir' '--with-freetype-dir' '--with-iconv' '--with-libxml-dir' '--with-xmlrpc' '--with-zlib-dir' '--with-gd' '--enable-gd-native-ttf' '--with-curl' '--with-gettext' '--with-pear' '--enable-fpm' '--enable-fastcgi' '--with-ncurses' '--with-mcrypt' '--with-mhash' '--with-openssl' '--with-pcre-dir' '--enable-pdo' '--enable-phar' '--enable-json' '--enable-mbstring' '--with-pdo-mysql' '--with-pdo-sqlite' '--with-readline' '--enable-bcmath'
$ make
$ sudo make install
</code></pre>




<p>安装完成之后进入安装目录修改配置文件 lib/php.ini (没有则创建)，添加时区设置：</p>


<pre><code>date.timezone=Asia/Shanghai
</code></pre>




<p>然后运行PHP的FastCGI服务：</p>


<pre><code>./bin/php-cgi -b 9000
</code></pre>




<h2>nginx配置</h2>


<p>nginx可以直接从仓库进行安装：</p>


<pre><code>sudo pacman -S nginx
</code></pre>




<p>或者：</p>


<pre><code>sudo apt-get install nginx
</code></pre>




<p>安装完成之后修改配置，添加一条新的虚拟主机：</p>


<pre><code>server {
    listen 8000;
    server_name localhost;

    root /var/www;

    location / {
        index index.php;
    }

    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;  
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include        fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME  /var/www/$fastcgi_script_name;
    }

}
</code></pre>




<p>然后再创建文件 /var/www/index.php</p>


<pre><code>&lt;?php
  phpinfo();
?&gt;
</code></pre>




<p>现在通过浏览器访问 http://127.0.0.1:8000/ 应该就可以看到效果了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ruby开发vim插件]]></title>
    <link href="http://www.xefan.com/archives/84117.html"/>
    <updated>2014-07-03T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84117-使用ruby开发vim插件</id>
    <content type="html"><![CDATA[<p>作为一个Vimmer和Pythoner，之前折腾过用python编写vim插件。现在作为半个Rubist，又开始继续折腾。</p>


<p>在开始编写插件之前，你需要确认 Vim 是否支持 Ruby，通过以下命令来判别：</p>


<pre><code>$ vim --version | grep +ruby
</code></pre>


<p>如果输出为空，则表示你当前的vim不支持Ruby，需要重新编译一下，并启用对Ruby的支持。</p>


<p>顺便说下我当前的环境是：</p>


<ul>
<li>vim 7.4  </li>
<li>ruby 2.1.0  </li>
</ul>


<p>环境检查没有问题那么就开始吧。<br>
在~/.vim/plugin目录下创建一个 demo.vim 文件。</p>


<p>在开头写上以下代码：</p>


<pre><code>if !has('ruby')
    echo "Error: Required vim compiled with +ruby"
    finish
endif
</code></pre>


<p>这段代码就是用 VimL 编写的，它将检查 Vim 是否支持 Ruby。</p>


<p>接下来再判断该插件是否已经加载过了，以免重复加载：</p>


<pre><code>if exists('g:loaded_ruby_demo_plugin')
    finish
endif
let g:loaded_ruby_demo_plugin = 1
</code></pre>


<p>所有的检查都没有问题，则开始插件的正文了。先定义一个函数。</p>


<pre><code>function! DemoFun1()
ruby&lt;&lt;EOF
buf = VIM::Buffer.current
puts "current buffer name: #{buf.name} number: #{buf.number} length: #{buf.length}"
EOF
endfunction
</code></pre>


<p>function与endfunction是vim中用于定义函数的，在”ruby&lt;&lt;EOF”和”EOF”之间部分的是Ruby代码。这个例子是输出当前缓冲区的名字、编号以及总行数。<br>
执行命令:call DemoFun1()，应该就可以看到输出结果了。</p>


<p>然后再举个例子说下函数的参数处理。</p>


<pre><code>function! DemoFun2(arg1)
ruby&lt;&lt; EOF
puts "you input: #{VIM.evaluate('a:arg1')}"
EOF
endfunction
</code></pre>


<p>这里定义了一个函数接收一个参数，然后将其输出。使用 VIM.evaluate 将vim的变量转化为Ruby的变量。</p>


<p>为了方便我们再定义两个命令，以简化对这两个函数的调用。</p>


<pre><code>command! -nargs=0 DemoFun1 call DemoFun1()  
command! -nargs=1 -rang DemoFun2 call DemoFun2(&lt;f-args&gt;)
</code></pre>


<p>要获取完整的代码可以访问： https://gist.github.com/wusuopu/c1182efefa85d4f6839b</p>


<p>接下来再简单说下vim中Ruby的使用。</p>


<p>vim为Ruby提供了一个VIM模块，通过它可以在Ruby中访问vim的接口。同时还提供了两个全局变量：$curwin、$curbuf，它们分别代表了当前窗口对象以及当前缓冲区对象。</p>


<p>VIM模块中有 Buffer 和 Window 两个对象，分别是用来对缓冲区和窗口进行操作的。同时VIM模块还提供了message、set_option、command和evaluate四个函数。</p>


<p>想要查看更多的帮忙信息，可以在vim中执行如下命令：</p>


<pre><code>:help ruby
</code></pre>


<p>好了，先写这么多吧，其余的自己去尝试吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim的symfony2开发环境配置]]></title>
    <link href="http://www.xefan.com/archives/84114.html"/>
    <updated>2014-06-26T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84114-vim的symfony2开发环境配置</id>
    <content type="html"><![CDATA[<h2>安装</h2>


<p>最近在用Symfony2框架进行开发，正所谓工欲善其事必先利其器。为了提高开发效率，因此将vim配置为symfony的IDE。</p>


<p>我安装的是phpcomplete-extended-symfony这款插件 https://github.com/m2mdas/phpcomplete-extended-symfony</p>


<p>它有些依赖在文档中没写清楚，我也是折腾了好久才搞定的，于是做个笔记记录一下。</p>


<p>我总共安装了以下插件：</p>


<ul>
<li>neocomplete.vim  </li>
<li>vimproc.vim  </li>
<li>unite.vim  </li>
<li>phpcomplete.vim  </li>
<li>phpcomplete-extended  </li>
<li>phpcomplete-extended-symfony  </li>
<li>vim-twig  </li>
</ul>


<p>我是使用的Vundle进行vim插件管理，因此在 .vimrc 配置中添加以下内容：</p>


<pre><code>Bundle 'Shougo/neocomplete.vim'
Bundle 'Shougo/vimproc.vim'
Bundle 'Shougo/unite.vim'
Bundle 'shawncplus/phpcomplete.vim'
Bundle 'm2mdas/phpcomplete-extended'
Bundle 'm2mdas/phpcomplete-extended-symfony'
Bundle 'evidens/vim-twig'
</code></pre>


<p>然后再执行BundleInstall命令进行下载安装。</p>


<p>注意：vim-twig插件不是必需的，安装它只是为了编写twig模板时能够高亮。  </p>


<h2>使用</h2>


<p>接下来说说使用流程。</p>


<p>1.vimproc需要编译<br>
进行vimproc的安装目录，执行make命令进行编译。详细内容请阅读它的README文件。</p>


<p>2.安装ctags工具<br>
由于当前的ctags工具不支持PHP的新特性，如命名空间、traits、interface，于是就需要给ctags打补丁。  </p>


<p>下载打过补丁的ctags源代码：  </p>


<pre><code>$ wget "https://github.com/shawncplus/phpcomplete.vim/blob/master/misc/ctags-better-php-parser.tar.bz2?raw=true" -O ctags-better-php-parser.tar.bz2
</code></pre>


<p>编译安装：  </p>


<pre><code>$ tar xvjf ctags-better-php-parser.tar.bz2  
$ ./configure  
$ make  
$ sudo make install
</code></pre>


<p>3.安装 composer.phar  </p>


<pre><code>$ curl -s https://getcomposer.org/installer | php
</code></pre>


<p>4.修改vim配置<br>
在vim中添加如下配置：  </p>


<pre><code>au FileType php setlocal omnifunc=phpcomplete_extended#CompletePHP  
let g:phpcomplete_index_composer_command = 'composer.phar'
</code></pre>


<p>5.开始使用<br>
进入Symfony项目的根目录，执行命令生成tags文件：</p>


<pre><code>$ ctags -R --fields=+aimS --languages=php
</code></pre>


<p>然后使用vim打开该tags文件，根据提示创建索引文件。完成之后索引文件会创建在 .phpcomplete_extended 目录中。下次在项目的根目录下打开vim，如果提示 “Index Loaded.”则表示配置成功了。接下来编写代码时就会有补全提示以及use语句的自动补全了。</p>


<p><strong>注意：</strong>在使用该插件时需要把自动切换目录功能给禁用掉，添加设置： set autochdir! 。否则会出现无法加载索引，从而补全不了。这个问题在文档中没说，我也是折腾了好久才发现的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis使用笔记]]></title>
    <link href="http://www.xefan.com/archives/84110.html"/>
    <updated>2014-06-21T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84110-Redis使用笔记</id>
    <content type="html"><![CDATA[<p>Redis是一个键值型数据库，之前花了些时间体验了一下Redis，感觉还是很不错的。而且Redis学习起来也很容易，差不多花几个小时应该就能入门了。当时我是看的<a href="https://github.com/karlseguin/the-little-redis-book">《the little redis book》</a>，初学者可以看看。</p>


<h2>安装</h2>


<p>下载软件包： http://redis.io/download</p>


<p>首先运行服务器程序：</p>


<pre><code>$ redis-server
</code></pre>


<p>程序默认是监听6379端口。</p>


<p>然后再运行客户端程序：</p>


<pre><code>$ redis-cli
</code></pre>


<h2>基本数据类型</h2>


<p>运行客户端程序连接上Redis服务之后，所有的操作都可以通过该命令行交互完成。</p>


<p>Redis有5种不同的数据类型：字符串、散列表、列表、集合、有序集合。所有的数据在Redis中都是以键值对的形式保存的。</p>


<p>以下介绍这几种类型数据的基本操作。</p>


<h3>String</h3>


<p>设置一个键的值为字符串：  </p>


<pre><code>set &lt;key&gt; &lt;value&gt;
</code></pre>


<p>获取该键的值：  </p>


<pre><code>get &lt;key&gt;
</code></pre>


<p>字符串相关的命令：  </p>


<pre><code>help @string
</code></pre>


<h3>Hashes</h3>


<p>设置一个散列值：  </p>


<pre><code>hset &lt;key&gt; &lt;k&gt; &lt;v&gt;
</code></pre>


<p>获取该键的值：  </p>


<pre><code>hget &lt;key&gt; &lt;k&gt;  
hgetall &lt;key&gt;
</code></pre>


<p>散列相关的命令：  </p>


<pre><code>help @hash
</code></pre>


<h3>Lists</h3>


<p>添加值：  </p>


<pre><code>lpush &lt;key&gt; &lt;v&gt;
</code></pre>


<p>移除值：  </p>


<pre><code>lpop &lt;key&gt;  
help @list
</code></pre>


<h3>Set</h3>


<p>添加值：  </p>


<pre><code>sadd &lt;key&gt; &lt;v&gt;[ &lt;v&gt; ..]  
help set
</code></pre>


<h3>Sorted Sets</h3>


<p>类似于集合(Set)，但是提供了排序（sorting）和秩划分（ranking）的功能。</p>


<p>添加值：  </p>


<pre><code>zadd key score member [score] [member]   
help @sorted_set
</code></pre>


<h2>其他</h2>


<h3>有效期</h3>


<p>设置某个值在seconds秒后到期：  </p>


<pre><code>expire &lt;key&gt; seconds
</code></pre>


<p>设置某个值在time时刻到期：  </p>


<pre><code>expireat &lt;key&gt; time
</code></pre>


<p>查看到期时间：  </p>


<pre><code>ttl &lt;key&gt;
</code></pre>


<p>清除到期时间：  </p>


<pre><code>persist &lt;key&gt;
</code></pre>


<h3>事务（Transactions）</h3>


<pre><code>multi  
do something  
exec
</code></pre>


<p>multi和exec之间的命令作为原子操作。</p>


<p>在multi之前调用watch可监听值的变化，若该值被其他客户端修改，事务将会运行失败。</p>


<h3>杂项</h3>


<p>选择数据库：</p>


<pre><code>select index
</code></pre>


<p>清除当前数据库所属key:</p>


<pre><code>flushdb
</code></pre>


<p>清除所有数据库所属key:</p>


<pre><code>flushall
</code></pre>


<p>查看key所储存的值的类型：</p>


<pre><code>type key
</code></pre>


<p>Redis相关的命令手册： http://redis.io/commands</p>


<h2>在应用程序中使用Redis</h2>


<p>Redis提供了多种语言的绑定，以Ruby为例：</p>


<pre><code>require 'redis'
r = Redis.new
r.set 'key', 1234
puts r.get 'key'
puts r.keys
</code></pre>


<p>输出结果应该为：</p>


<pre><code>"1234"
["key"]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用rvm进行ruby多版本管理]]></title>
    <link href="http://www.xefan.com/archives/84105.html"/>
    <updated>2014-06-16T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84105-使用rvm进行ruby多版本管理</id>
    <content type="html"><![CDATA[<p>rvm与Python的virtualenv和Node的nvm类似。使用它可以很方便的在你的系统中安装多个Ruby环境。类似的工具还有rbenv、ry、rbfu等。  </p>


<h3>安装rvm</h3>


<p>以下的命令都是在当前用户权限下执行的，最好不要使用sudo。<br>
下载安装rvm:</p>


<pre><code>$ curl -sSL https://get.rvm.io | bash -s stable
</code></pre>


<p>安装完成之后再加载配置：</p>


<pre><code>$ source ~/.profile
</code></pre>


<p>为了下次能直接使用，建议将该命令添加到 ~/.bash_profile 或者 ~/.zshrc 中。  </p>


<p>使用rvm安装Ruby时会默认从官方网站上进行下载，为了提高下载速度这里建议将安装源修改为淘宝的镜像。</p>


<pre><code>$ sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db
</code></pre>


<h3>使用</h3>


<p>安装完成之后就可以使用了，以下介绍几条常用的命令。<br>
列出已知的ruby版本:  </p>


<pre><code>$ rvm list known
</code></pre>


<p>列出已经安装的ruby：  </p>


<pre><code>$ rvm list
</code></pre>


<p>安装一个ruby版本：  </p>


<pre><code>$ rvm install 2.1.0
</code></pre>


<p>这里安装最新的2.1.0版本的Ruby。</p>


<p>如果安装了多个版本，想使用其中一个版本：  </p>


<pre><code>$ rvm use 2.1.0
</code></pre>


<p>设置为默认版本：  </p>


<pre><code>$ rvm use 2.1.0 --default
</code></pre>


<p>use了某个版本之后，可以使用 which ruby 命令查看当前的ruby命令信息。  </p>


<p>删除一个已安装的版本：  </p>


<pre><code>$ rvm remove 2.1.0
</code></pre>


<p>更多内容请参考官方文档： https://rvm.io/#docindex</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack开发简介]]></title>
    <link href="http://www.xefan.com/archives/84103.html"/>
    <updated>2014-05-02T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84103-Rack开发简介</id>
    <content type="html"><![CDATA[<p>Rack是Ruby应用与web服务器之间的一个接口，它在服务器与应用程序之间作为中间件，可以对用户的请求和程序的返回数据进行处理。现在几乎所有主流的Ruby web框架都是支持Rack接口的。</p>


<p>Rack与Python的wsgi很相似，在它的规格书（http://rack.rubyforge.org/doc/SPEC.html）中也说道它采用了WSGI的一些内容。</p>


<h2>开始</h2>


<p>首先安装Rack:</p>


<pre><code>[sudo] gem install rack
</code></pre>


<p>然后通过一个简单的例子来讲解。</p>


<pre><code>require "rack"
rack_app = lambda{|env| [200, {}, ["Hello World!"]]}
Rack::Handler::WEBrick.run rack_app, :Port =&gt; 3000
</code></pre>


<p>执行上述代码，然后访问 http://127.0.0.1:3000 会看到 &#8220;Hello World!&#8221;。</p>


<p>上面代码中的rack_app即是一个Rack应用。Rack应用除了lambda之外也还可以使用其他对象，只要满足以下条件即可：<br>
  * 可响应call方法的对象；<br>
  * 接收一个参数rack环境 environment 。它是一个散列表，包含了CGI的信息和rack的一些变量；<br>
  * 返回一个有三个值的数组，第一个值为返回状态 status；第二个值为返回头 headers，也是一个散列表；第三个值为返回正文 body，它必须是一个可响应each方法并生成字符串的对象，例如字符串数组。</p>


<p>WEBrick是Handler的一种。Handler用于将web服务器与Rack连接。使用 Rack::Handler.constants 可以查看Rack包含的所有Handler。</p>


<h2>请求/Request</h2>


<p>在Rack应用中可以直接操作env参数来访问请求信息，但是这种方法不太方便。对于这种操作Rack::Request对象提供了方便的接口。</p>


<pre><code>request = Rack::Request.new env
</code></pre>


<p>创建request对象时传入env参数。</p>


<h2>响应/Response</h2>


<p>Rack应用的返回值是一个有三个值的数组，包含了返回状态、返回头和返回正文。对于简单的程序手动构建数组还行，如果是复杂的程序则要考虑自动构建了。<br>
同样的可以使用Rack::Request对象来创建返回数据。</p>


<pre><code>response = Rack::Response.new
response.finish
</code></pre>


<p>内容填充完之后调用response对象的finish方法生成符合Rack规范的数组对象。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[平铺式窗口管理器——awesome和i3]]></title>
    <link href="http://www.xefan.com/archives/84100.html"/>
    <updated>2014-04-23T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84100-平铺式窗口管理器——awesome和i3</id>
    <content type="html"><![CDATA[<p>最近折腾了一下平铺式的窗口管理器 awesome 和 i3。感觉这两个都很不错，现在进行一下简单的总结。  </p>


<h2>Awesome</h2>


<p>先说一下Awesome吧。安装过程很简单。<br>
对于ArchLinux的用户可以使用 pacman 直接进行安装：</p>


<pre><code>$ [sudo] pacman install awesome
</code></pre>


<p>对于LinuxDeepin的用户可以使用 apt-get 进行安装：</p>


<pre><code>$ [sudo] apt-get install awesome
</code></pre>


<h3>启动</h3>


<p>如果是使用登陆管理器，那么在登陆是选择 awesome 即可。  </p>


<p>如果没有使用登陆管理器，则在 ~/.xinitrc 脚本中添加 <em>exec awesome</em> 。</p>


<h3>常用快捷键</h3>


<p>awesome的快捷键是 $mod 加上其他键。在awesome中 $mod 默认为 Win(Mod4)键，可以通过修改配置文件将其改为其他按键。</p>


<ul>
<li>$mod + r : 运行命令</li>
<li>$mod + Enter : 打开一个新终端</li>
<li>$mod + Shift + c : 关闭当前窗口</li>
<li>$mod + m : 最大化当前窗口</li>
<li>$mod + Ctrl + r : 重新加载配置</li>
<li>$mod + Shift + q : 退出awesome</li>
<li></li>
<li>$mod + j : 切换到下一个窗口</li>
<li>$mod + k : 切换到前一个窗口</li>
<li>$mod + Left : 查看前一个桌面</li>
<li>$mod + Right : 查看后一个桌面</li>
<li>$mod + 1-9 : 切换到桌面 1-9</li>
<li>$mod + Shift + j : 当前窗口和前一个窗口互换位置</li>
<li>$mod + Shift + k : 当前窗口和后一个窗口互换位置</li>
<li>$mod + h : 把主区域(master width)的宽度增大5%</li>
<li>$mod + l : 把主区域(master width)的宽度减少5%</li>
<li></li>
<li>$mod + space : 把当前tag更换为下一种布局</li>
<li>$mod + Shift + space : 把当前tag更换为前一种布局</li>
<li>$mod + Ctrl + space : 切换当前窗口是否为浮动的</li>
<li>$mod + Shift + r : 重绘当前窗口</li>
<li>$mod + t : 标记窗口（可标记多个）</li>
<li>$mod + Shift + 1~9 : 把标记的窗口移动到第一~第九桌面上</li>
<li>$mod + Ctrl + 1~9 : 把当前桌面和1~9桌面同时显示</li>
<li>$mod + Esc : 快速切换到上一个桌面 </li>
</ul>


<h3>配置</h3>


<p>awesome 的配置文件是一个lua脚本，要想自己进行配置可能得稍微了解一下lua语言。</p>


<pre><code>$ mkdir -p ~/.config/awesome/
$ cp /etc/xdg/awesome/rc.lua ~/.config/awesome
</code></pre>


<h2>I3</h2>


<p>同样的i3也可以直接从软件源里进行安装。执行如下命令：</p>


<pre><code>$ [sudo] pacman install i3-wm i3lock i3status dmenu
</code></pre>


<p>或者：</p>


<pre><code>$ [sudo] apt-get install i3-wm i3lock i3status dmenu
</code></pre>


<p>启动方式与awesome类似。  </p>


<p>i3对应的配置文件为 ~/.i3/config ，状态栏的配置文件为 ~/.i3status.conf 。与awesome类似，i3的快捷键也是 $mod 加上其他键。</p>


<p>它的配置文件比较简单。由于不习惯它默认的按键，于是我就修改成了vim风格的按键。我的配置放在了 https://github.com/wusuopu/my-i3-config ，各位感兴趣的可以参考下。  </p>


<p>我设置的快捷键如下：</p>


<ul>
<li>$mod + Enter : 打开一个新终端</li>
<li>$mod + q : 关闭当前窗口</li>
<li>$mod + Shift + q : 退出i3</li>
<li>$mod + d : 运行dmenu</li>
<li>$mod + e : 运行pcmanfm文件管理器</li>
<li>$mod + c : 运行i3lock锁屏</li>
<li>$mod + h : 选中左边的窗口</li>
<li>$mod + j : 选中下边的窗口</li>
<li>$mod + k : 选中上边的窗口</li>
<li>$mod + l : 选中右边的窗口</li>
</ul>


<h2>总结</h2>


<p>两个都试用了几天，我个人的感受是awesome比较强大，配置文件就是一个lua有脚本，因此可以在配置文件里完成一些比较复杂的功能。但是同时lua脚本作为配置，修改起来比较复杂，需要会一点lua语言。<br>
相对而言i3就比较简洁了，同时功能也会少一些，不过我感觉也够用了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用C语言编写Python扩展5——垃圾回收管理]]></title>
    <link href="http://www.xefan.com/archives/84096.html"/>
    <updated>2014-04-15T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84096-使用C语言编写Python扩展5——垃圾回收管理</id>
    <content type="html"><![CDATA[<p>上一节介绍了创建一个具有属性的类，由于对象具有属性数据，因此在进行内存管理时要多加注意。这一节就介绍一下Python的垃圾回收管理。<br>
在Python中垃圾回收主要是靠的计数引用方法，但是单凭计数引用还是不够的。先看看下面这段Python代码。  </p>


<pre><code>n = []
m = []
n.append(m)
m.append(n)
del m
del n
</code></pre>


<p>如果只靠计数引用的话执行上面这段代码之后n和m都不能被回收，因为它们的引用计算值都不为0。<br>
像上面例子这样相互循环引用称作循环引用垃圾，在Python中有循环垃圾回收器（cyclic-garbage collector）专门用于回收此类计数引用无法处理的垃圾内存。  </p>


<p>接着上一节的例子，继续编辑<em>noddy.c</em>。  </p>


<p>为了让该对象类型支持垃圾回收，将PyTypeObject的tp_flags字段增加Py_TPFLAGS_HAVE_GC这个标志位。同时与GC(Garbage Collection)相关的tp_traverse和tp_clear这两个字段也要设置。  </p>


<ul>
<li>tp_traverse是用于垃圾回收器（garbage collector）遍历该实例对象中所有需要回收的属性对象。  </li>
<li>tp_clear是用于清除内部各个属性对象的。  </li>
</ul>


<p>首先定义tp_traverse和tp_clear所对应的函数：  </p>


<pre><code>static int Noddy_traverse(noddy_NoddyObject *self, visitproc visit, void *arg)
{
    Py_VISIT(self-&gt;first);
    Py_VISIT(self-&gt;last);
    return 0;
}
static int Noddy_clear(noddy_NoddyObject *self)
{
    Py_CLEAR(self-&gt;first);
    Py_CLEAR(self-&gt;last);
    return 0;
}
</code></pre>


<p>Py_VISIT和Py_CLEAR是两个宏，简化了visit操作和clear操作。  </p>


<p>然后再修改noddy_NoddyType结构体定义：  </p>


<pre><code>static PyTypeObject noddy_NoddyType = {
    PyObject_HEAD_INIT(NULL)
    0,                         /*ob_size*/
    "noddy.Noddy",             /*tp_name*/
    sizeof(noddy_NoddyObject), /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    (destructor)Noddy_dealloc, /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    0,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    0,                         /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    0,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC,  /*tp_flags*/
    "Noddy objects",           /*tp_doc*/
    (traverseproc)Noddy_traverse,   /* tp_traverse */
    (inquiry)Noddy_clear,      /* tp_clear */
    0,                         /* tp_richcompare */
    0,                         /* tp_weaklistoffset */
    0,                         /* tp_iter */
    0,                         /* tp_iternext */
    Noddy_methods,             /* tp_methods */
    Noddy_members,             /* tp_members */
    0,                         /* tp_getset */
    0,                         /* tp_base */
    0,                         /* tp_dict */
    0,                         /* tp_descr_get */
    0,                         /* tp_descr_set */
    0,                         /* tp_dictoffset */
    (initproc)Noddy_init,      /* tp_init */
    0,                         /* tp_alloc */
    Noddy_new,                 /* tp_new */
};
</code></pre>


<p><strong>注意</strong>：<br>
Python的官方手册中说道如果设置了Py_TPFLAGS_HAVE_GC这个标志位的话，那么就必须使用PyObject_GC_New这个函数来创建实例对象，使用PyObject_GC_Del来销毁已创建了的实例对象。  </p>


<p>使用PyObject_GC_New创建实例对象之后再用PyObject_GC_Track将该实例添加到垃圾回收器所跟踪的对象集合中去。<br>
在对象销毁时再执行PyObject_GC_UnTrack和PyObject_GC_Del函数。  </p>


<p>然后再修改tp_new函数和tp_dealloc函数：  </p>


<pre><code>static PyObject * Noddy_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    noddy_NoddyObject*self;
    self = (noddy_NoddyObject*)PyObject_GC_New(noddy_NoddyObject, type);
    if (self != NULL) {
        PyObject_GC_Track(self);
        self-&gt;first = PyString_FromString("");
        if (self-&gt;first == NULL)
        {
          Py_DECREF(self);
          return NULL;
        }
        self-&gt;last = PyString_FromString("");
        if (self-&gt;last == NULL)
        {
          Py_DECREF(self);
          return NULL;
        }
        self-&gt;number = 0;
    }
    return (PyObject *)self;
}

static void Noddy_dealloc(noddy_NoddyObject* self)
{
    PyObject_GC_UnTrack(self);
    Noddy_clear(self);
    PyObject_GC_Del(self);
}
</code></pre>


<p>最后再写一段Python程序来测试下该模块：  </p>


<pre><code>import gc
import noddy

gc.set_debug(gc.DEBUG_STATS | gc.DEBUG_LEAK)

o = noddy.Noddy()
l = [o]
o.first = l
del l
del o

gc.collect()
</code></pre>


<p>本文中的示例代码可从 https://github.com/wusuopu/python-c-extension-sample 获取到。  </p>

]]></content>
  </entry>
  
</feed>
