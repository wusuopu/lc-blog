<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>龍昌博客</title>
  <subtitle>从Pythoneer转向Rubist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xefan.com/"/>
  <updated>2018-11-16T10:46:15.384Z</updated>
  <id>http://www.xefan.com/</id>
  
  <author>
    <name>龍昌</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用python编写游戏修改器</title>
    <link href="http://www.xefan.com/archives/84171.html"/>
    <id>http://www.xefan.com/archives/84171.html</id>
    <published>2018-11-16T17:25:37.797Z</published>
    <updated>2018-11-16T10:46:15.384Z</updated>
    
    <content type="html"><![CDATA[<p>最近比较怀旧，在玩一个比较老的PC游戏。由于游戏难度太高了，于是就打算自己写一个修改器。<br>通过查阅资料，在 Windows 下的修改器主要需要用到四个函数：OpenProcess, CloseHandle, WriteProcessMemory, ReadProcessMemory。</p>
<p>这几个都是C++的函数，在Python中可以通过ctypes来直接调用。<br>然后接下来介绍一下基本的操作流程。</p>
<p>1.通过 任务管理器 或者其他方式得到需要修改的游戏进程。然后通过 <code>OpenProcess</code> 注入该进程。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">PROCESS_QUERY_INFORMATION = <span class="number">0x0400</span></div><div class="line">PROCESS_VM_OPERATION = <span class="number">0x0008</span></div><div class="line">PROCESS_VM_READ = <span class="number">0x0010</span></div><div class="line">PROCESS_VM_WRITE = <span class="number">0x0020</span></div><div class="line"></div><div class="line">hProcess = ctypes.windll.kernel32.OpenProcess(</div><div class="line">    PROCESS_QUERY_INFORMATION|PROCESS_VM_READ|PROCESS_VM_OPERATION|PROCESS_VM_WRITE,</div><div class="line">    <span class="keyword">False</span>, pid</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>2.然后可以通过 <code>ReadProcessMemory</code> 来扫描游戏的内存找到需要修改的数值项的内存地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buf = ctypes.c_int32()</div><div class="line">nread = ctypes.c_size_t()</div><div class="line">ret = ctypes.windll.kernel32.ReadProcessMemory(</div><div class="line">    hProcess,</div><div class="line">    base_addr,</div><div class="line">    ctypes.byref(buf),</div><div class="line">    ctypes.sizeof(buf),</div><div class="line">    ctypes.byref(nread)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>这里是读取 <code>base_addr</code> 地址之后的4个字节的内容。可以通过循环来遍历游戏的内存，找到需要修改的地址。<br>当然，为了方便也可以直接使用 Cheat Engine 之类的软件来查找，然后把找到的内存地址记录下来即可。<br><a href="/wp-content/uploads/2018/11/ce.png"><img src="/wp-content/uploads/2018/11/ce.png"></a></p>
<p>3.得到需要修改的内存地址之后，就可以 <code>WriteProcessMemory</code> 来修改该地址保存的值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buf = ctypes.c_int32(value)</div><div class="line">nread = ctypes.c_size_t()</div><div class="line">ret = ctypes.windll.kernel32.WriteProcessMemory(</div><div class="line">  hProcess,</div><div class="line">  base_addr,</div><div class="line">  ctypes.byref(buf),</div><div class="line">  ctypes.sizeof(buf),</div><div class="line">  ctypes.byref(nwrite)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>这里是往 <code>base_addr</code> 这个地址写入值为 <code>value</code> 的4字节内容。</p>
<p>4.最后如果不再需要修改了的话，就通过 <code>CloseHandle</code> 关闭该注入操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctypes.windll.kernel32.CloseHandle(hProcess)</div></pre></td></tr></table></figure></p>
<p>以上都是针对 Windows 系统的，对于 Linux 系统的话 可以通过 <code>ptrace</code> (<a href="http://man7.org/linux/man-pages/man2/ptrace.2.html" target="_blank" rel="external">http://man7.org/linux/man-pages/man2/ptrace.2.html</a>) 操作实现。由于我没有 Linux 的游戏就没有研究了。</p>
<p>上面修改器的完整源代码，如有需要可通过以下链接获取：<br><a href="https://github.com/wusuopu/cheat_engine_caesar3" target="_blank" rel="external">https://github.com/wusuopu/cheat_engine_caesar3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近比较怀旧，在玩一个比较老的PC游戏。由于游戏难度太高了，于是就打算自己写一个修改器。&lt;br&gt;通过查阅资料，在 Windows 下的修改器主要需要用到四个函数：OpenProcess, CloseHandle, WriteProcessMemory, ReadProces
    
    </summary>
    
      <category term="Python栏目" scheme="http://www.xefan.com/categories/Python%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="python" scheme="http://www.xefan.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>使用pytest测试flask应用</title>
    <link href="http://www.xefan.com/archives/84170.html"/>
    <id>http://www.xefan.com/archives/84170.html</id>
    <published>2018-11-06T15:12:52.301Z</published>
    <updated>2018-11-06T08:08:30.465Z</updated>
    
    <content type="html"><![CDATA[<p>python 本身就有 unittest 单元测试框架，但是觉得它并不是很好用，我更倾向于使用 pytest 。</p>
<p>下面通过一个例子来介绍如何使用 pytest 对 flask 应用进行单元测试。</p>
<p>首先新建一个 flask 应用，并针对根路径创建一条路由。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py</span></div><div class="line">app = flask.Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></div></pre></td></tr></table></figure>
<p>然后针对首页编写单元测试，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/test_app.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_home_page</span><span class="params">(client)</span>:</span></div><div class="line">    rv = client.get(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">assert</span> rv.status_code == <span class="number">200</span></div><div class="line">    <span class="keyword">assert</span> rv.data == <span class="string">b'ok'</span></div></pre></td></tr></table></figure>
<p>然后执行命令运行该测试用例： <code>pytest -s tests/test_app.py</code></p>
<p>在 pytest 中编写测试用例就只需要新建一个以 <code>test_</code> 开头的函数即可。</p>
<p>以上是针对flask路由作的最基本测试。接下来编写一个新的路由，该页面只有用户登录之后才能访问。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="meta">@app.route('/member')</span></div><div class="line"><span class="meta">@flask_security.decorators.login_required</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">member</span><span class="params">()</span>:</span></div><div class="line">    user = flask_security.core.current_user</div><div class="line">    <span class="keyword">return</span> str(user.id)</div></pre></td></tr></table></figure>
<p>要对该路由进行测试，则需要先创建一个用户。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/test_app.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_module</span><span class="params">(module)</span>:</span></div><div class="line">    App.testing = <span class="keyword">True</span></div><div class="line">    fixture.setup()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_module</span><span class="params">(module)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    """</div></pre></td></tr></table></figure></p>
<p>上面的 <code>setup_module</code> 和 <code>teardown_module</code> 函数分别是在所有的测试用例执行之前与执行之后执行。在这里我们通过 <code>setup_module</code> 在执行测试之前先创建一个用户。然后再创建一个 pytest 的 fixture:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/conftest.py</span></div><div class="line"></div><div class="line"><span class="meta">@pytest.fixture</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">auth_client</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">with</span> client.session_transaction() <span class="keyword">as</span> sess:</div><div class="line">        sess[<span class="string">'user_id'</span>] = str(fixture.users[<span class="number">0</span>].id)</div><div class="line"></div><div class="line">    <span class="keyword">yield</span> client</div></pre></td></tr></table></figure></p>
<p>这里创建了一个 <code>auth_client</code> fixture，之后所有以 <code>auth_client</code> 发起的请求都是登录状态的。</p>
<p>最后再针对 <code>/member</code> 路由编写两个测试用例，分别是未登录状态与登录状态下的。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_member_page_without_login</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    没有登录则跳转到登录页面</div><div class="line">    """</div><div class="line">    rv = client.get(<span class="string">'/member'</span>)</div><div class="line">    <span class="keyword">assert</span> rv.headers[<span class="string">'Location'</span>] == <span class="string">'http://localhost/login?next=%2Fmember'</span></div><div class="line">    <span class="keyword">assert</span> rv.status_code == <span class="number">302</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_member_page_with_login</span><span class="params">(auth_client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    已经登录则返回当前用户id</div><div class="line">    """</div><div class="line">    rv = auth_client.get(<span class="string">'/member'</span>)</div><div class="line">    <span class="keyword">assert</span> rv.status_code == <span class="number">200</span></div><div class="line">    <span class="keyword">assert</span> rv.data.decode(<span class="string">'utf8'</span>) == str(fixture.users[<span class="number">0</span>].id)</div></pre></td></tr></table></figure></p>
<p>以上就是一个简单的 flask 应用了。但是有时一个稍微复杂一点的应用会用到一些第三方的api。这时针对这种情况编写测试用例时就需要用到 mock 功能了。再编写一个新的路由页面：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># server.py</span></div><div class="line"></div><div class="line"><span class="meta">@app.route('/movies')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">movies</span><span class="params">()</span>:</span></div><div class="line">    data = utils.fetch_movies()</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>, <span class="number">500</span></div><div class="line">    <span class="keyword">return</span> flask.jsonify(data)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># utils.py</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_movies</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        url = <span class="string">'http://api.douban.com/v2/movie/top250?start=0&amp;count=1'</span></div><div class="line">        res = requests.get(url, timeout=<span class="number">5</span>)</div><div class="line">        <span class="keyword">return</span> res.json()</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        <span class="keyword">return</span> &#123;&#125;</div></pre></td></tr></table></figure>
<p>请求该路由会返回豆瓣top250的电影信息。然后再编写两个测试用例分别模拟api调用成功与失败的情况。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tests/test_app.py</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_movies_api</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    调用豆瓣api成功的情况</div><div class="line">    """</div><div class="line">    fetch_movies_patch = mock.patch(<span class="string">'utils.fetch_movies'</span>)</div><div class="line"></div><div class="line">    func = fetch_movies_patch.start()</div><div class="line">    func.return_value = &#123;<span class="string">'start'</span>: <span class="number">0</span>, <span class="string">'count'</span>: <span class="number">0</span>, <span class="string">'subjects'</span>: []&#125;</div><div class="line"></div><div class="line">    rv = client.get(<span class="string">'/movies'</span>)</div><div class="line">    <span class="keyword">assert</span> rv.status_code == <span class="number">200</span></div><div class="line">    <span class="keyword">assert</span> func.called</div><div class="line"></div><div class="line">    fetch_movies_patch.stop()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_movies_api_with_error</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    调用豆瓣api出错的情况</div><div class="line">    """</div><div class="line">    fetch_movies_patch = mock.patch(<span class="string">'utils.fetch_movies'</span>)</div><div class="line"></div><div class="line">    func = fetch_movies_patch.start()</div><div class="line">    func.return_value = <span class="keyword">None</span></div><div class="line"></div><div class="line">    rv = client.get(<span class="string">'/movies'</span>)</div><div class="line">    <span class="keyword">assert</span> rv.status_code == <span class="number">500</span></div><div class="line">    <span class="keyword">assert</span> func.called</div><div class="line"></div><div class="line">    fetch_movies_patch.stop()</div></pre></td></tr></table></figure></p>
<p>这里使用 python 的 mock 模块来模拟让某个函数返回固定的结果。</p>
<p>完整的代码请访问： <a href="https://github.com/wusuopu/flask-test-example" target="_blank" rel="external">https://github.com/wusuopu/flask-test-example</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python 本身就有 unittest 单元测试框架，但是觉得它并不是很好用，我更倾向于使用 pytest 。&lt;/p&gt;
&lt;p&gt;下面通过一个例子来介绍如何使用 pytest 对 flask 应用进行单元测试。&lt;/p&gt;
&lt;p&gt;首先新建一个 flask 应用，并针对根路径创建一
    
    </summary>
    
      <category term="Python栏目" scheme="http://www.xefan.com/categories/Python%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="python" scheme="http://www.xefan.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HAProxy+Nginx+gunicorn获取真实ip</title>
    <link href="http://www.xefan.com/archives/84169.html"/>
    <id>http://www.xefan.com/archives/84169.html</id>
    <published>2017-06-10T22:31:24.730Z</published>
    <updated>2017-06-10T14:48:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在部署在 nginx + uwsgi 应用时都是通过如下方法来获取真实的客户端ip的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">upstream app_server &#123;</div><div class="line">    server unix:///tmp/gunicorn.sock fail_timeout=0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  localhost;</div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_redirect off;</div><div class="line"></div><div class="line">        proxy_pass   http://app_server;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在 uwsgi 的应用程序中只需要读取 http headers 中的 X-Forwarded-For 字段即可。</p>
<p>但是最近由于运维架构的是采用 haproxy + nginx + uwsgi 是形式，导致了在 uwsgi 应用程序中获取到的 ip 都是 haproxy 的。<br>为了要获取到真实的ip地址，需要由 haproxy 将 ip 传给 nginx，再由 nginx 传给 uwsgi。<br>在网上搜索了半天 haproxy 的相关配置，感觉太复杂了。因此还是决定从 nginx 入手。</p>
<p>经过实验将 nginx 的配置改为如下即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">proxy_set_header X-Forwarded-For $http_x_forwarded_for;</div><div class="line">proxy_set_header Host $http_host;</div><div class="line">proxy_redirect off;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在部署在 nginx + uwsgi 应用时都是通过如下方法来获取真实的客户端ip的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;
    
    </summary>
    
      <category term="Python栏目" scheme="http://www.xefan.com/categories/Python%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="python" scheme="http://www.xefan.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>在Docker中运行X11程序</title>
    <link href="http://www.xefan.com/archives/84168.html"/>
    <id>http://www.xefan.com/archives/84168.html</id>
    <published>2017-05-06T19:45:30.987Z</published>
    <updated>2017-05-19T09:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果是Linux系统的话，相对比较方便。先构建一个带gui各应的docker image，然后将<br>本机的X11 sock挂载到container内，<br><code>docker run -ti --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix chrome</code></p>
<p>如果是mac OS系统的话，相对麻烦一些。</p>
<p>1.安装所需的软件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew install socat</div><div class="line">brew cask install xquartz</div></pre></td></tr></table></figure>
<p>2.依次运行刚刚安装的两个程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\&quot;$DISPLAY\&quot;</div><div class="line">open -a XQuartz</div></pre></td></tr></table></figure>
<p>3.设置X11， <code>XQuartz</code> -&gt; <code>Preference</code> -&gt; <code>Security</code> -&gt; <code>Allow connections from network clients</code></p>
<p>4.<code>docker run --rm -e DISPLAY=</code>ifconfig | grep “inet\ “ | tail -1 | cut -d “ “ -f 2<code>:0 chrome</code></p>
<p>对于已经启动了的container，可以在container内执行命令 <code>export DISPLAY=&lt;ip&gt;:0</code> 来设置 DISPLAY 从而使用本机的 X11 服务。</p>
<p>倘若当前你的 mac OS 没有连接网络，那么可能就没有ip地址供container内访问。<br>此时也许可以执行命令： <code>sudo ifconfig lo0 alias 10.200.10.1/24</code> 来手动设置一个ip。<br>然后在container内再设置 <code>export DISPLAY=10.200.10.1:0</code> 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果是Linux系统的话，相对比较方便。先构建一个带gui各应的docker image，然后将&lt;br&gt;本机的X11 sock挂载到container内，&lt;br&gt;&lt;code&gt;docker run -ti --rm -e DISPLAY=$DISPLAY -v /tmp/.X
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.xefan.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>由octpress迁移到了hexo</title>
    <link href="http://www.xefan.com/archives/84167.html"/>
    <id>http://www.xefan.com/archives/84167.html</id>
    <published>2017-01-22T10:24:05.512Z</published>
    <updated>2017-01-22T10:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天将博客的系统由原来的ruby octpress 迁移到了 nodejs hexo。</p>
<p>决定要进行迁移主要是两个原因：<br>1.使用 octpress 来生成页面感觉越来越慢了；<br>2.octpress 的页面样式表不知怎么的突然就坏掉了，整个页面显示都不正常了。这个是最主要的原因。</p>
<p>迁移的工作还算是比较顺利，只是体验了一下 hexo 感觉 bug 也不少。只得自己写些 patch，然后将就着用吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天将博客的系统由原来的ruby octpress 迁移到了 nodejs hexo。&lt;/p&gt;
&lt;p&gt;决定要进行迁移主要是两个原因：&lt;br&gt;1.使用 octpress 来生成页面感觉越来越慢了；&lt;br&gt;2.octpress 的页面样式表不知怎么的突然就坏掉了，整个页面显示
    
    </summary>
    
      <category term="网络日志" scheme="http://www.xefan.com/categories/%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="网络日志" scheme="http://www.xefan.com/tags/%E7%BD%91%E7%BB%9C%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>通过串口连接raspberry pi</title>
    <link href="http://www.xefan.com/archives/84166.html"/>
    <id>http://www.xefan.com/archives/84166.html</id>
    <published>2016-11-03T13:35:57.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在玩树莓派，有时没有网络，也没有显示器，此时如果想要连接树莓派执行一些操作的话会很麻烦。<br>因为之前玩过 ARM 的开发板编程，因此想能不能通过串口登录到 pi 呢。于是网上查了一下，还真的可以哦。<br>以下就作为备忘笔记记录一下操作过程。</p>
<p>1.首先需要一根 USB 转串口的线，如果没有的话可以去某宝上买一根吧，反正也不贵。我选的是 PL2303。<br>再根据系统以及芯片的不同而下载安装不同的驱动程序。 对于 mac OS 用户执行命令： <code>ls /dev/ | grep tty.usb</code> ，<br>如果驱动都安装正确的话应该是会有输出结果的。</p>
<p>2.然后在 pi 的系统上启用 serial。我安装的是 debian 系统，执行命令： <code>sudo raspi-config</code> ，<br>选择 <code>advanced options</code> -&gt; <code>serial</code> 进行启用 serial。</p>
<p>3.串口连接  </p>
<p>对于 Raspberry Pi3 的 GPIO 引脚如下：<br><img src="/wp-content/uploads/2016/11/03/pi3_gpio.png" alt="pi3_gpio"></p>
<p>串口线与 pi 的连接方式为： GND -&gt; GND, RXD -&gt; TXD, TXD -&gt; RXD， 如图：<br><img src="/wp-content/uploads/2016/11/03/pi3-board.jpg" alt="pi3-board"></p>
<p>最后在电脑上使用串口连接软件进行连接，对应的串口设置为 115200 8N1，如图：<br><img src="/wp-content/uploads/2016/11/03/raspberry-pi-serial.png" alt="raspberry-pi-serial"></p>
<p>参考资料： <a href="http://elinux.org/RPi_Serial_Connection" target="_blank" rel="external">http://elinux.org/RPi_Serial_Connection</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在玩树莓派，有时没有网络，也没有显示器，此时如果想要连接树莓派执行一些操作的话会很麻烦。&lt;br&gt;因为之前玩过 ARM 的开发板编程，因此想能不能通过串口登录到 pi 呢。于是网上查了一下，还真的可以哦。&lt;br&gt;以下就作为备忘笔记记录一下操作过程。&lt;/p&gt;
&lt;p&gt;1.首先
    
    </summary>
    
      <category term="嵌入式栏目" scheme="http://www.xefan.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="Raspberry pi" scheme="http://www.xefan.com/tags/Raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>使用CodePush对ReactNative进行热更新</title>
    <link href="http://www.xefan.com/archives/84165.html"/>
    <id>http://www.xefan.com/archives/84165.html</id>
    <published>2016-08-20T16:15:34.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://microsoft.github.io/code-push/" target="_blank" rel="external">CodePush</a>是微软提供的可用于对 Cordova 和 ReactNative 进行代码热更新的库。<br>在其官方的文档中已经写得很详细了，按照其说明来配置即可。我这里只是对在使用过程中遇到的一些坑作为总结。</p>
<h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>首先注册一个账号并创建一个 CodePush 的应用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install -g code-push-cli</div><div class="line">code-push register</div><div class="line">code-push app add &lt;appName&gt;</div></pre></td></tr></table></figure>
<h2 id="安装配置CodePush"><a href="#安装配置CodePush" class="headerlink" title="安装配置CodePush"></a>安装配置CodePush</h2><p>按照说明 <a href="https://github.com/Microsoft/react-native-code-push#getting-started，使用" target="_blank" rel="external">https://github.com/Microsoft/react-native-code-push#getting-started，使用</a> rnpm 进行安装即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save react-native-code-push</div><div class="line">rnpm link react-native-code-push</div></pre></td></tr></table></figure>
<p>安装完成之后还需要再进行一些配置，对于 iOS 需要将 <code>AppDelegate.m</code> 文件中的 <code>jsCodeLocation</code> 修改为： <code>jsCodeLocation = [CodePush bundleURL];</code>。<br>同时再在 <code>Info.plist</code> 文件中添加一项 <code>CodePushDeploymentKey</code>，其值为 CodePush 应用的 Deployment Key。</p>
<p>对于 android 需要在 <code>MainActivity</code> 类的 <code>getPackages</code> 方法中设置 Deployment Key。同时根据 ReactNative 的版本不同而使用不同的方法来设置 <code>getJSBundleFile</code>，<br>参考： <code>https://github.com/Microsoft/react-native-code-push#android-setup</code>。</p>
<h2 id="程序更新"><a href="#程序更新" class="headerlink" title="程序更新"></a>程序更新</h2><p>在安装、配置完成之后，即可以使用CodePush进行程序的更新操作了。<br>根据官方的说明只需要调用 <code>CodePush.sync()</code> 即可完成自动更新操作。<br>我针对自己的情况再进行封装了一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">function syncCodePush() &#123;</div><div class="line">  NetInfo.fetch().done(</div><div class="line">    (reach) =&gt; &#123;</div><div class="line">      // 检查网络环境</div><div class="line">      if (_.includes([&apos;wifi&apos;, &apos;WIFI&apos;, &apos;VPN&apos;], reach)) &#123;</div><div class="line">        CodePush.sync().done(</div><div class="line">          () =&gt; &#123;</div><div class="line">            // 检查更新成功</div><div class="line">          &#125;,</div><div class="line">          (err) =&gt; &#123;</div><div class="line">            // 更新失败</div><div class="line">          &#125;</div><div class="line">        );</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上函数是保证只有在wifi的网络环境下才进行更新操作，同时由于 <code>CodePush.sync()</code> 返回的是一个 <code>Promise</code> 对象，<br>在这里我就遇到了由于网络异常而下载出错，从而导致 app 崩溃。因此需要处理 <code>reject</code> 的情况。</p>
<p>有时在程序更新之后的首次运行时可能会需要作一些迁移的操作，这里可以使用 <code>getUpdateMetadata</code> 来检查程序是不是首次运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Codepush.getUpdateMetadata().then(</div><div class="line">  (update) =&gt; &#123;</div><div class="line">    if (update &amp;&amp; update.isFirstRun) &#123;</div><div class="line">      // 首次运行执行一些操作</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">).done( callback );</div></pre></td></tr></table></figure>
<h2 id="发布更新"><a href="#发布更新" class="headerlink" title="发布更新"></a>发布更新</h2><p>在 app 发布安装包发布出去之后，已经有用户下载安装了。此时如果再有 js 代码更新或者图片文件的改动的话，可以使用 CodePush 进行发布。<br>进入 ReactNative 的项目根目录，使用 code-push 命令进行发布更新。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code-push release-react DemoApp ios -m -d Staging --des &quot;更新描述&quot; -t &quot;~2.0.0&quot;</div></pre></td></tr></table></figure>
<p>以上命令是发布一个紧急更新到 Staging ，只有 ios appp 的版本为 2.0~3.0 的才会下载该更新包。<br>由于是紧急更新，app在下载安装完成之后会自动重启应用该更新包。否则的话就需要用户下次手动启动app时该更新包才会生效。</p>
<p>在 CodePush 中针对 ios 和 android 可以共用一个应用，只是我个人感觉这样在管理 deployment history 时不太方便。<br>因此我通常会创建两个应用，例如： DemoApp-iOS、DemoApp-Android 这样的。</p>
<p>需要注意的是，由于 CodePush 的 server 是在国外，因此下载的速度会比较慢。</p>
<p>最后我自己使用 Electron + Vue.js 开发了一个 CodePush 的简易管理工具，<a href="https://github.com/wusuopu/code-push-gui" target="_blank" rel="external">https://github.com/wusuopu/code-push-gui</a> 。<br>可以对 CodePush 的 app 跟 deployment 进行简单的管理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://microsoft.github.io/code-push/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CodePush&lt;/a&gt;是微软提供的可用于对 Cordova 和 ReactNative 进行代码热更新的库。&lt;br
    
    </summary>
    
      <category term="编程开发" scheme="http://www.xefan.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react" scheme="http://www.xefan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative获取设备屏幕尺寸</title>
    <link href="http://www.xefan.com/archives/84164.html"/>
    <id>http://www.xefan.com/archives/84164.html</id>
    <published>2016-07-31T16:25:17.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做移动开发过程中，有时我们需要适配不同尺寸大小的屏幕。这里我们就需要到获取设备屏幕的大小。<br>由于我们是使用的 ReactNative 来开发手机 app，这里就介绍一下在 ReactNative 中如何获取到设备屏幕的分辨率的。<br>也算是对之前踩坑的总结吧。</p>
<p>在此之前需要先了解 ReactNative 中的尺寸计算单位，它并不是使用的px。<a href="http://facebook.github.io/react-native/releases/next/docs/pixelratio.html" target="_blank" rel="external">http://facebook.github.io/react-native/releases/next/docs/pixelratio.html</a></p>
<h2 id="使用-Dimensions-模块"><a href="#使用-Dimensions-模块" class="headerlink" title="使用 Dimensions 模块"></a>使用 Dimensions 模块</h2><p>在 ReactNative 中有一个 Dimensions 模块，通过它可以获取当前设备的屏幕分辨率。<br>参考： <a href="http://facebook.github.io/react-native/releases/next/docs/dimensions.html" target="_blank" rel="external">http://facebook.github.io/react-native/releases/next/docs/dimensions.html</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var &#123;height, width&#125; = Dimensions.get(&apos;window&apos;);</div></pre></td></tr></table></figure>
<p>刚开始时我也是使用这种方法来得到整个屏幕的分辨率的，感觉轻松搞定。然而这里面却有一个坑。</p>
<p>首先来看看 ios 和 android 中的界面结构：</p>
<p><img src="/wp-content/uploads/2016/07/31/ios-screen-struct.png" alt="ios-screen-struct"><br><img src="/wp-content/uploads/2016/07/31/android-screen-struct.png" alt="android-screen-struct"></p>
<p>如图所示，屏幕的宽度计算比较简单，就是从左边到右边的距离即可。<br>然后就是屏幕的高度了，这里其实我们是需要获取到可用区域的高度。<br>如图所示，对于 ios 系统来说可用区域高度就是整个屏幕的高度减去 Status Bar 的高度；<br>对于 android 系统来说就是屏幕的高度减去 Status Bar 和 Soft Menu Bar 的高度。</p>
<h2 id="获取-iOS-设备的屏幕分辨率"><a href="#获取-iOS-设备的屏幕分辨率" class="headerlink" title="获取 iOS 设备的屏幕分辨率"></a>获取 iOS 设备的屏幕分辨率</h2><p>正如上面所说的，在 ios 下的计算方法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var WIDTH = Dimensions.get(&apos;window&apos;).width;</div><div class="line">var HEIGHT = Dimensions.get(&apos;window&apos;).height - STATUS_BAR_HEIGHT;</div></pre></td></tr></table></figure>
<p>在 ios 系统状态栏高度(STATUS_BAR_HEIGHT)通常为 20。<br>不过如果你设置了隐藏状态栏的话，那么 <code>STATUS_BAR_HEIGHT</code> 则为0。</p>
<p>以上是手机竖屏的情况，在横屏状态下则交换两个值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;</div><div class="line">var LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;</div></pre></td></tr></table></figure>
<p>到了这里虽然麻烦了一点，但是总体来说也还好。问题都解决了。<br>感觉生活是如此美好啊，然而这个世界上却还有一个系统名为 android。<br>它有着数不清种类屏幕大小的设备，然后瞬间感觉整个人都不好了。</p>
<h2 id="获取-Android-设备的屏幕分辨率"><a href="#获取-Android-设备的屏幕分辨率" class="headerlink" title="获取 Android 设备的屏幕分辨率"></a>获取 Android 设备的屏幕分辨率</h2><p>如果按照 ios 下的方法来做，获取到 <code>WIDTH</code> 是没有问题，<br>但是 <code>HEIGHT</code> 的话还需要减去 Status Bar 和 Soft Menu Bar 的高度。<br>因此我们还需要获取到状态栏的高度(STATUS_BAR_HEIGHT)和虚拟按钮的高度(SOFT_MENU_BAR_HEIGHT)。</p>
<p>这里我们使用<a href="https://github.com/jaysoo/react-native-extra-dimensions-android" target="_blank" rel="external">react-native-extra-dimensions-android</a>这个库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">const ExtraDimensions = require(&apos;react-native-extra-dimensions-android&apos;);</div><div class="line"></div><div class="line">const STATUS_BAR_HEIGHT = ExtraDimensions.get(&apos;STATUS_BAR_HEIGHT&apos;);</div><div class="line">const SOFT_MENU_BAR_HEIGHT = ExtraDimensions.get(&apos;SOFT_MENU_BAR_HEIGHT&apos;);</div><div class="line">const WIDTH = ExtraDimensions.get(&apos;REAL_WINDOW_WIDTH&apos;);</div><div class="line">const HEIGHT = ExtraDimensions.get(&apos;REAL_WINDOW_HEIGHT&apos;) - STATUS_BAR_HEIGHT - SOFT_MENU_BAR_HEIGHT;</div></pre></td></tr></table></figure>
<p>以上是设备竖屏的结果，在横屏下你以为是不是只需要交换两个值就搞定了呢。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;</div><div class="line">var LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;</div></pre></td></tr></table></figure>
<p>Naive!!如果这么轻松就搞定了的话，android就不叫做android了。</p>
<p>先来看看下面两张图片吧，分别是一个android平板设备在横屏和竖屏状态下的截图：</p>
<p><img src="/wp-content/uploads/2016/07/31/android-pad-landscape.png" alt="android-pad-landscape"><br><img src="/wp-content/uploads/2016/07/31/android-pad-portrait.png" alt="android-pad-portrait"></p>
<p>你把你手中的 android 手机分别进入横屏和竖屏状态下，再对照上面两张图片你会发现什么。<br>没错的，在平板设备上屏幕旋转之后 Soft Menu Bar 也跟着旋转了，<br>而在手机设备上 Soft Menu Bar 是始终固定在手机底部的。</p>
<p>尼玛，太坑爹了。看到这里瞬间呕血三升，要适配手机跟平板实现是太麻烦了。<br>以下是我的解决办法，先检查当前设备是否为平板，然后再分别处理。<br>至于平板的判断方法就自己想办法了，我的方法也不一定准。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (isPad) &#123;</div><div class="line">  LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT + SOFT_MENU_BAR_HEIGHT;</div><div class="line">  LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT - SOFT_MENU_BAR_HEIGHT;</div><div class="line">&#125; else &#123;</div><div class="line">  LANDSCAPE_WIDTH = HEIGHT + STATUS_BAR_HEIGHT;</div><div class="line">  LANDSCAPE_HEIGHT = WIDTH - STATUS_BAR_HEIGHT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是在 android 下遇到的第一个大坑。</p>
<p>到了这里我以为一切都该结束了吧，然而没想到还有一种手机叫做魅族。如下图：</p>
<p><img src="/wp-content/uploads/2016/07/31/Mezu-smart-bar.png" alt="Mezu-smart-bar"></p>
<p>在屏幕右下角其实是有一个按钮的，然而左图所示的，该按钮被魅族手机的 Smart Bar 遮住了。<br>进入系统设置将 Smart Bar 隐藏后效果如右图所示。</p>
<p>看到这里又吐了两口老血，此为第二个大坑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const SMART_BAR_HEIGHT = ExtraDimensions.get(&apos;SMART_BAR_HEIGHT&apos;);</div><div class="line"></div><div class="line">if (SMART_BAR_HEIGHT) &#123;</div><div class="line">  HEIGHT -= SMART_BAR_HEIGHT;</div><div class="line">&#125;</div><div class="line"></div><div class="line">....</div><div class="line">// 在上面 LANDSCAPE 的计算结果上再作如下处理</div><div class="line"></div><div class="line">if (SMART_BAR_HEIGHT) &#123;</div><div class="line">  LANDSCAPE_WIDTH += SMART_BAR_HEIGHT;</div><div class="line">  LANDSCAPE_HEIGHT -= SMART_BAR_HEIGHT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在魅族的手机上计算屏幕高度时还需要再减去 Smart Bar 的高度，<br>同时还需要注意的是， Smart Bar 跟平板上的Soft Menu Bar 一样会随着屏幕旋转而转动的。</p>
<p>最后还有一点需要注意的是，在安装 <code>react-native-extra-dimensions-android</code> 库时不能直接使用 <code>npm install --save react-native-extra-dimensions-android</code> 进行安装，<br>而是需要直接通过 git 仓库来安装： <code>npm install --save git+https://github.com/jaysoo/react-native-extra-dimensions-android.git</code>。</p>
<p>因为在 npm 上 <code>react-native-extra-dimensions-android</code> 的最新版为 0.17.0，<br>而 <code>SMART_BAR_HEIGHT</code> 的功能是在此之后才添加进来的。</p>
<p>在库的版本上面又被坑了一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做移动开发过程中，有时我们需要适配不同尺寸大小的屏幕。这里我们就需要到获取设备屏幕的大小。&lt;br&gt;由于我们是使用的 ReactNative 来开发手机 app，这里就介绍一下在 ReactNative 中如何获取到设备屏幕的分辨率的。&lt;br&gt;也算是对之前踩坑的总结吧。&lt;/
    
    </summary>
    
      <category term="编程开发" scheme="http://www.xefan.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react" scheme="http://www.xefan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative jsbundle管理</title>
    <link href="http://www.xefan.com/archives/84163.html"/>
    <id>http://www.xefan.com/archives/84163.html</id>
    <published>2016-06-26T12:02:30.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="http://www.xefan.com/archives/84162.html">上一篇文章</a>中介绍了 RN(ReactNative) 自动设置 development server IP 的方法。<br>这在开发过程中方便了不少，然而我在想能否更加方便一些呢。首先我们知道在开发 RN 应用时，jsbundle 有两种加载方式。<br>第一种是指定 url 通过网络进行加载；第二种是 pre-bundled 将 jsbundle 文件打包进 app 安装包中。<br>编译生成的安装包有 Debug 和 Release 两种模式，在 Debug 模式下默认是使用第一种方式加载 jsbundle，在 Release 模式下默认是使用第二种方式。</p>
<p>现在我的需求是编译生成三种模式的安装包：Debug、Release 和 Stage。前两种跟之前一样，<br>而 Stage 模式下是使用第二种方式加载 jsbundle， 但是生成的 jsbundle 是 DEV 状态下的。<br>这样在开发过程中给他人安装app进行测试时就不需要反复的修改配置了。</p>
<h2 id="修改-Android-的配置"><a href="#修改-Android-的配置" class="headerlink" title="修改 Android 的配置"></a>修改 Android 的配置</h2><p>对于的 android 的配置比较简单。只需修改 <code>android/app/build.gradle</code> 文件，新添加一个 <code>buildTypes</code> 即可。</p>
<p>在 <code>apply from: &quot;react.gradle&quot;</code> 之前添加如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">project.ext.react = [</div><div class="line">  bundleInStage: true</div><div class="line">]</div></pre></td></tr></table></figure>
<p>然后再修改配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    buildTypes &#123;</div><div class="line">        debug &#123;</div><div class="line">            applicationIdSuffix &quot;.debug&quot;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;&quot;XXXX(Debug)&quot;&apos;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled enableProguardInReleaseBuilds</div><div class="line">            proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;&quot;XXXX&quot;&apos;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        stage &#123;</div><div class="line">            initWith(buildTypes.debug)</div><div class="line">            applicationIdSuffix &quot;.stage&quot;</div><div class="line">            resValue &apos;string&apos;, &apos;app_name&apos;, &apos;&quot;XXXX(Stage)&quot;&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里添加了一个 <code>stage</code> buildTypes 继承至 <code>debug</code>。并且为了能够同时安装不同模式下的app，这里设置了不同模式 bundleID 的后缀。<br>同时还设置了不同模式下app的名称，以便区分。</p>
<p>然后进行 <code>android</code> 目录下执行 <code>./gradlew assemble</code> 命令，即可在 <code>android/app/build/outputs/apk</code> 目录生成 app-debug.apk、app-release.apk 和 app-stage.apk 三个 apk 包。</p>
<h2 id="修改-iOS-的配置"><a href="#修改-iOS-的配置" class="headerlink" title="修改 iOS 的配置"></a>修改 iOS 的配置</h2><p>首先将 Debug Configuration 复制为 Stage<br><img src="/wp-content/uploads/2016/06/26/Xcode-configuration.png" alt="Xcode-configuration"></p>
<p>然后进入 <code>Build Settings</code> 修改 <code>Preprocessor Macros</code>，对 <code>Stage</code> 添加一项配置： <code>STAGE=1</code><br><img src="/wp-content/uploads/2016/06/26/Xcode-buildSettings.png" alt="Xcode-buildSettings"></p>
<p>然后再编辑 <code>AppDelegate.m</code> 文件，修改 <code>jsCodeLocation</code> 相关配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#if STAGE</div><div class="line">#warning &quot;STAGE&quot;</div><div class="line">  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div><div class="line">#elif DEBUG</div><div class="line">#if TARGET_OS_SIMULATOR</div><div class="line">#warning &quot;DEBUG SIMULATOR&quot;</div><div class="line">  jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class="line">#else</div><div class="line">#warning &quot;DEBUG DEVICE&quot;</div><div class="line">  NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;SERVER_IP&quot;];</div><div class="line">  NSString *jsCodeUrlString = [NSString stringWithFormat:@&quot;http://%@:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;, serverIP];</div><div class="line">  NSString *jsBundleUrlString = [jsCodeUrlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div><div class="line">  jsCodeLocation = [NSURL URLWithString:jsBundleUrlString];</div><div class="line">#endif</div><div class="line">#else</div><div class="line">#warning &quot;PRODUCTION DEVICE&quot;</div><div class="line">  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>为了能够同时安装多个应用，还需要设置各个模式下的 Bundle Identifier。进入 <code>Build Settings</code> -&gt; <code>Packaging</code> -&gt; <code>Product Bundle Identifier</code><br><img src="/wp-content/uploads/2016/06/26/Xcode-bundleID.png" alt="Xcode-bundleID"></p>
<p>为了便于区分，最好给各个模式下的应用设置不同的AppName。进入 <code>Build Settings</code> -&gt; <code>User-Defined</code>，添加一项设置<br><img src="/wp-content/uploads/2016/06/26/Xcode-User-Defined.png" alt="Xcode-User-Defined"></p>
<p>然后再进入 <code>Info</code>，设置 <code>CFBundleDisplayName</code> 的值为 <code>$(BUNDLE_DISPLAY_NAME)</code></p>
<p>至此，配置已经修改完成。如果之前有使用 cocoapods 安装过第三方库的话，那么可能还需要再重新安装一遍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;http://www.xefan.com/archives/84162.html&quot;&gt;上一篇文章&lt;/a&gt;中介绍了 RN(ReactNative) 自动设置 development server IP 的方法。&lt;br&gt;这在开发过程中方便了不少，然而我在想能否
    
    </summary>
    
      <category term="编程开发" scheme="http://www.xefan.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react" scheme="http://www.xefan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative自动设置开发服务器IP</title>
    <link href="http://www.xefan.com/archives/84162.html"/>
    <id>http://www.xefan.com/archives/84162.html</id>
    <published>2016-06-18T21:40:01.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发 ReactNative 应用时，jsbundle 有两种加载方式。第一种是指定 url 通过网络进行加载；第二种是 pre-bundled 将 jsbundle 文件打包进 app 安装包中。</p>
<p>以下就是创建项目之后 ios 的默认配置。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">  /**</div><div class="line">   * Loading JavaScript code - uncomment the one you want.</div><div class="line">   *</div><div class="line">   * OPTION 1</div><div class="line">   * Load from development server. Start the server from the repository root:</div><div class="line">   *</div><div class="line">   * $ npm start</div><div class="line">   *</div><div class="line">   * To run on device, change `localhost` to the IP address of your computer</div><div class="line">   * (you can get this by typing `ifconfig` into the terminal and selecting the</div><div class="line">   * `inet` value under `en0:`) and make sure your computer and iOS device are</div><div class="line">   * on the same Wi-Fi network.</div><div class="line">   */</div><div class="line"></div><div class="line">  jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class="line"></div><div class="line">  /**</div><div class="line">   * OPTION 2</div><div class="line">   * Load from pre-bundled file on disk. The static bundle is automatically</div><div class="line">   * generated by the &quot;Bundle React Native code and images&quot; build step when</div><div class="line">   * running the project on an actual device or running the project on the</div><div class="line">   * simulator in the &quot;Release&quot; build configuration.</div><div class="line">   */</div><div class="line"></div><div class="line">//   jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div></pre></td></tr></table></figure>
<p>这里有个麻烦的地方就是，当我在真机设备上调试时。每次都需要执行 <code>ifconfig</code> 命令，然后将 <code>localhost</code> 修改为我的 ip 地址。并且在使用 git 进行代码管理时，一不小心将修改后的文件提交上去了，其他同事在 pull 时又会与自己的冲突。<br>最终实在忍受不了了，在想能不能编译时自动获取到本机的 ip 呢，这样就不用每次都手动修改了。于是找到了这篇文章： <a href="http://moduscreate.com/automated-ip-configuration-for-react-native-development/" target="_blank" rel="external">http://moduscreate.com/automated-ip-configuration-for-react-native-development/</a><br>我这里参考了他的方案并做了一点小调整。</p>
<p>按照他的步骤，首先添加 Run Script。<br>在 Xcode 中选择“Build Phases”，然后点击左上角的”+”选择“New Run Script Phase”。<br>在列表最后出现了“Run Script”，将其展开，然后编辑代码块的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INFOPLIST=&quot;$&#123;TARGET_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div><div class="line">echo &quot;writing to $INFOPLIST&quot;</div><div class="line">PLISTCMD=&quot;Add :SERVER_IP string $(ifconfig | grep inet\ | tail -1 | cut -d &quot; &quot; -f 2)&quot;</div><div class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</div><div class="line">PLISTCMD=&quot;Set :SERVER_IP $(ifconfig | grep inet\ | tail -1 | cut -d &quot; &quot; -f 2)&quot;</div><div class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</div></pre></td></tr></table></figure>
<p>第二步编辑 <code>AppDelegate.m</code> 文件。<br>将项目默认生成的 <code>jsCodeLocation</code> 配置删除掉，并添加代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#if DEBUG</div><div class="line">#if TARGET_OS_SIMULATOR</div><div class="line">#warning &quot;DEBUG SIMULATOR&quot;</div><div class="line">  jsCodeLocation = [NSURL URLWithString:@&quot;http://localhost:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;];</div><div class="line">#else</div><div class="line">#warning &quot;DEBUG DEVICE&quot;</div><div class="line">  NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;SERVER_IP&quot;];</div><div class="line">  NSString *jsCodeUrlString = [NSString stringWithFormat:@&quot;http://%@:8081/index.ios.bundle?platform=ios&amp;dev=true&quot;, serverIP];</div><div class="line">  NSString *jsBundleUrlString = [jsCodeUrlString stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</div><div class="line">  jsCodeLocation = [NSURL URLWithString:jsBundleUrlString];</div><div class="line">#endif</div><div class="line">#else</div><div class="line">#warning &quot;PRODUCTION DEVICE&quot;</div><div class="line">  jsCodeLocation = [[NSBundle mainBundle] URLForResource:@&quot;main&quot; withExtension:@&quot;jsbundle&quot;];</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>这里如果在模拟器中进行调试，那么 development server 则为 localhost；如果在真机设备中调试,那么 development server 则为电脑的 ip 地址。<br>到此已经可以实现自动设置 ip 地址了，如果还想要在 Chrome 中对设备进行调试，那么还需要修改一下 WebSocket 的配置。</p>
<p>第三步编辑 <code>RCTWebSocketExecutor.m</code> 文件。<br>在 Xcode 中打开 <yourproject> -&gt; Libraries -&gt; RCTWebSocket.xcodeproj -&gt; RCTWebSocketExecutor.m 文件，大概在文件 53 行左右的位置，将 <code>NSString *URLString = [NSString stringWithFormat:@&quot;http://localhost:%zd/debugger-proxy?role=client&quot;, port];</code> 修改为：</yourproject></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#if TARGET_OS_SIMULATOR</div><div class="line">    NSString *serverIP = @&quot;localhost&quot;;</div><div class="line">#else</div><div class="line">    NSString *serverIP = [[NSBundle mainBundle] objectForInfoDictionaryKey:@&quot;SERVER_IP&quot;];</div><div class="line">#endif</div><div class="line">    NSString *URLString = [NSString stringWithFormat:@&quot;http://%@:%zd/debugger-proxy?role=client&quot;, serverIP, port];</div></pre></td></tr></table></figure>
<p>现在配置已经完成了，接下来就试试看是否有效吧。</p>
<p>经过修改之后相对于之前已经方便了不少，只是我还遇到一个问题。那就是我的 MacBook 在办公室时的 ip 跟在家里的 ip 是不同的。<br>这样的话每次切换环境都需要重新编译一下应用，还是有点麻烦。于是乎我自己将第一步的脚本作了下修改，新的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">INFOPLIST=&quot;$&#123;TARGET_BUILD_DIR&#125;/$&#123;INFOPLIST_PATH&#125;&quot;</div><div class="line">echo &quot;writing to $INFOPLIST&quot;</div><div class="line">PLISTCMD=&quot;Add :SERVER_IP string $(hostname)&quot;</div><div class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</div><div class="line">PLISTCMD=&quot;Set :SERVER_IP $(hostname)&quot;</div><div class="line">echo -n &quot;$INFOPLIST&quot; | xargs -0 /usr/libexec/PlistBuddy -c &quot;$PLISTCMD&quot; || true</div></pre></td></tr></table></figure>
<p>这里我使用 hostname 来作为 development server 的地址，而不是 ip。这样的话即便是网络环境发生了变化，只要手机设备跟电脑处于同一个局域网内就不需要再重新编译应用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发 ReactNative 应用时，jsbundle 有两种加载方式。第一种是指定 url 通过网络进行加载；第二种是 pre-bundled 将 jsbundle 文件打包进 app 安装包中。&lt;/p&gt;
&lt;p&gt;以下就是创建项目之后 ios 的默认配置。&lt;/p&gt;
&lt;fi
    
    </summary>
    
      <category term="编程开发" scheme="http://www.xefan.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="react" scheme="http://www.xefan.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Mac OS中VirtualBox的Android蓝牙设置</title>
    <link href="http://www.xefan.com/archives/84161.html"/>
    <id>http://www.xefan.com/archives/84161.html</id>
    <published>2016-04-03T11:05:11.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在做手机开发时，由于没有 Android 设备，只得在模拟器中进行测试。然而在模拟器却没法访问本机的蓝牙设备，这对于要做蓝牙开发来说很不方便。</p>
<p>经过各种搜索终于找到了一个解决方案。首先需要以下工具：</p>
<ul>
<li>Mac OS系统</li>
<li>VirtualBox (<a href="https://www.virtualbox.org/" target="_blank" rel="external">https://www.virtualbox.org/</a>)</li>
<li>Android x86 (<a href="https://sourceforge.net/projects/android-x86/" target="_blank" rel="external">https://sourceforge.net/projects/android-x86/</a>)</li>
</ul>
<p>1.禁用系统的蓝牙服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ sudo launchctl unload /System/Library/LaunchDaemons/com.apple.blued.plist</div><div class="line"># 对于 Mountain Lion 系统执行如下命令：</div><div class="line">$ sudo kextunload -b com.apple.iokit.IOBluetoothSerialManager</div><div class="line">$ sudo kextunload -b com.apple.iokit.BroadcomBluetoothHCIControllerUSBTransport</div><div class="line"># 对于 Snow Leopard 系统执行如下命令：</div><div class="line">$ sudo kextunload -b com.apple.driver.BroadcomUSBBluetoothHCIController</div><div class="line">$ sudo kextunload -b com.apple.driver.AppleUSBBluetoothHCIController</div></pre></td></tr></table></figure>
<p>2.运行 VirtualBox</p>
<p>设置启用 USB 控制器，添加蓝牙设备，如图：</p>
<p><img src="/wp-content/uploads/2016/04/03/virtualbox-android-bluetooth.png" alt=""></p>
<p>然后运行 android 系统即可。</p>
<p>3.在退出 VirtualBox 之后，重新启用系统的蓝牙服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ sudo launchctl load /System/Library/LaunchDaemons/com.apple.blued.plist</div><div class="line"># 对于 Mountain Lion 系统执行如下命令：</div><div class="line">$ sudo kextload -b com.apple.iokit.IOBluetoothSerialManager</div><div class="line">$ sudo kextload -b com.apple.iokit.BroadcomBluetoothHCIControllerUSBTransport</div><div class="line"># 对于 Snow Leopard 系统执行如下命令：</div><div class="line">$ sudo kextload -b com.apple.driver.BroadcomUSBBluetoothHCIController</div><div class="line">$ sudo kextload -b com.apple.driver.AppleUSBBluetoothHCIController</div></pre></td></tr></table></figure>
<p>参考：<br><a href="https://www.virtualbox.org/ticket/2372#comment:17" target="_blank" rel="external">https://www.virtualbox.org/ticket/2372#comment:17</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做手机开发时，由于没有 Android 设备，只得在模拟器中进行测试。然而在模拟器却没法访问本机的蓝牙设备，这对于要做蓝牙开发来说很不方便。&lt;/p&gt;
&lt;p&gt;经过各种搜索终于找到了一个解决方案。首先需要以下工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS系统&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="编程开发" scheme="http://www.xefan.com/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://www.xefan.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>gulp+browserSync配置</title>
    <link href="http://www.xefan.com/archives/84160.html"/>
    <id>http://www.xefan.com/archives/84160.html</id>
    <published>2016-03-26T14:32:56.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Browsersync  是一个前端调试的利器，它能够让你在页面文件改动之后自动刷新浏览器，从而方便了前端的调试工作。</p>
<p>本文就是对于 Browsersync + Gulp 的配置作个简单的笔记。</p>
<ol>
<li>首先安装 Browsersync 与 Gulp:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install browser-sync gulp --save-dev</div></pre></td></tr></table></figure>
<ol>
<li>在 <code>gulpfile.js</code> 中创建新任务：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var browserSync = require(&apos;browser-sync&apos;).create();</div><div class="line"></div><div class="line">var config = &#123;</div><div class="line">  baseDir: &apos;src&apos;,</div><div class="line">  watchFiles: [ &apos;src/**/*.html&apos;, &apos;src/assets/css/*.css&apos;, &apos;src/assets/js/*.js&apos; ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">gulp.task(&apos;serve&apos;, function() &#123;</div><div class="line">  browserSync.init(&#123;</div><div class="line">    files: config.watchFiles,</div><div class="line">    server: &#123;</div><div class="line">      baseDir: config.baseDir</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这里表示以 <code>src</code> 目录作为根目录启动 HTTP 服务，并监听 <code>src</code> 目录下的所有 <code>html</code>、<code>css</code> 以及 <code>js</code> 类型的文件，当这些文件有改动时 Browsersync 会自动刷新浏览器页面。</p>
<p>如果想配合使用 SASS 之类的，可以参考： <a href="https://www.browsersync.io/docs/gulp/" target="_blank" rel="external">https://www.browsersync.io/docs/gulp/</a></p>
<p>同时为了避免之后每次都要重新配置一遍，于是我自己写了个简单的 <code>yo</code> 生成器： <a href="https://github.com/wusuopu/my-yeoman-generator" target="_blank" rel="external">https://github.com/wusuopu/my-yeoman-generator</a></p>
<p>由于这只是我自己 generator，并没有发布到 npm 上，因此只能手动进行安装。各位有兴趣的可以试试。使用方法：</p>
<ol>
<li><p>安装 yo 和 bower： <code>$ npm install -g yo bower</code></p>
</li>
<li><p>安装 generator:</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/wusuopu/my-yeoman-generator generator-wusuopu</div><div class="line">$ cd generator-wusuopu</div><div class="line">$ npm link</div></pre></td></tr></table></figure>
<ol>
<li>生成项目：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir webpage</div><div class="line">$ cd webpage</div><div class="line">$ yo wusuopu:bootstrap3</div></pre></td></tr></table></figure>
<p>这里 bootstrap3 generator 包含了 bootstrap3、font-awesome、jquery 这些常用的前端库，省得每次都需要重新下载一遍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Browsersync  是一个前端调试的利器，它能够让你在页面文件改动之后自动刷新浏览器，从而方便了前端的调试工作。&lt;/p&gt;
&lt;p&gt;本文就是对于 Browsersync + Gulp 的配置作个简单的笔记。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先安装 Browsersync 与 
    
    </summary>
    
      <category term="前端相关" scheme="http://www.xefan.com/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="js" scheme="http://www.xefan.com/tags/js/"/>
    
      <category term="gulp" scheme="http://www.xefan.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>HTTP Access Control跨域请求</title>
    <link href="http://www.xefan.com/archives/84159.html"/>
    <id>http://www.xefan.com/archives/84159.html</id>
    <published>2016-03-17T16:35:12.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 Ajax api 请求时遇到了跨域的问题，现在问题解决了顺便做个笔记。  </p>
<p>场景：现在主站域名为 example.org ，需要通过 ajax 请求 hello-world.example 上的资源。</p>
<h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><p>如果请求时遇到如下错误：<br><code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;http://example.org&#39; is therefore not allowed access.</code></p>
<p>则需要在 hello-world.example 的 server 端 Response Headers 中设置 <code>Access-Control-Allow-Origin</code> 字段。其值根据情况设置为 <code>http://example.org</code> 或者 <code>https://example.org</code> 。</p>
<h2 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h2><p>一般情况下只允许 GET 和 POST 请求，对于 RESTful 的 api 可能会有其他类型的请求。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  url: &apos;http://hello-world.example/sessions/me.json&apos;,</div><div class="line">  method: &apos;DELETE&apos;,</div><div class="line">  dataType: &apos;json&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这时如果出现方法不被允许，则需要在 server 端 Response Headers 中设置 <code>Access-Control-Allow-Methods</code> 字段。如： <code>Access-Control-Allow-Methods: GET, POST, DELETE</code> 。</p>
<h2 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h2><p>当在 hello-world.example 站点登录之后，浏览器会保存对应的 Cookies ，但是在 example.org 站点中使用 ajax 时发现 hello-world.example 的 Cookies 并没有附加到 Request Headers 中。</p>
<p>此时就需要设置 XMLHttpRequest 的 <code>withCredentials</code> 属性，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  url: &apos;http://hello-world.example/session/me.json&apos;,</div><div class="line">  method: &apos;GET&apos;,</div><div class="line">  dataType: &apos;json&apos;,</div><div class="line">  xhrFields: &#123;</div><div class="line">      withCredentials: true</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同时在 server 端 Response Headers 中设置 <code>Access-Control-Allow-Credentials</code> 字段。说明允许通过跨域修改 Cookies 。如： <code>Access-Control-Allow-Credentials: true</code></p>
<p>以上是常用的几个字段，更多设置参考手册： <a href="https://www.w3.org/TR/access-control/" target="_blank" rel="external">https://www.w3.org/TR/access-control/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在使用 Ajax api 请求时遇到了跨域的问题，现在问题解决了顺便做个笔记。  &lt;/p&gt;
&lt;p&gt;场景：现在主站域名为 example.org ，需要通过 ajax 请求 hello-world.example 上的资源。&lt;/p&gt;
&lt;h2 id=&quot;Access-Cont
    
    </summary>
    
      <category term="Web开发" scheme="http://www.xefan.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ajax" scheme="http://www.xefan.com/tags/ajax/"/>
    
  </entry>
  
  <entry>
    <title>Xcode文档离线安装</title>
    <link href="http://www.xefan.com/archives/84158.html"/>
    <id>http://www.xefan.com/archives/84158.html</id>
    <published>2016-01-03T16:52:11.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Xcode 中下载安装文档速度太慢了，不得已只得自行下载，然后再手动安装。</p>
<ol>
<li>首先在 <a href="https://developer.apple.com/library/downloads/docset-index.dvtdownloadableindex" target="_blank" rel="external">https://developer.apple.com/library/downloads/docset-index.dvtdownloadableindex</a> 找到需要下载的文档的下载地址。</li>
</ol>
<p>这里我需要下载的是 iOS 9.2 的文档，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!-- START iOS doc set --&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">  &lt;key&gt;fileSize&lt;/key&gt;</div><div class="line">  &lt;integer&gt;1071665431&lt;/integer&gt;</div><div class="line">  &lt;key&gt;identifier&lt;/key&gt;</div><div class="line">  &lt;string&gt;com.apple.adc.documentation.iOS&lt;/string&gt;</div><div class="line">  &lt;key&gt;name&lt;/key&gt;</div><div class="line">  &lt;string&gt;iOS 9.2 Documentation&lt;/string&gt;</div><div class="line">  &lt;key&gt;source&lt;/key&gt;</div><div class="line">  &lt;string&gt;https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg&lt;/string&gt;</div><div class="line">  &lt;key&gt;userInfo&lt;/key&gt;</div><div class="line">  &lt;dict&gt;</div><div class="line">    &lt;key&gt;ActivationPredicate&lt;/key&gt;</div><div class="line">    &lt;string&gt;$XCODE_VERSION &amp;gt;= &apos;7.2&apos;&lt;/string&gt;</div><div class="line">    &lt;key&gt;Category&lt;/key&gt;</div><div class="line">    &lt;string&gt;Documentation&lt;/string&gt;</div><div class="line">    &lt;key&gt;IconType&lt;/key&gt;</div><div class="line">    &lt;string&gt;IDEDownloadablesTypeDocSet&lt;/string&gt;</div><div class="line">    &lt;key&gt;InstallPrefix&lt;/key&gt;</div><div class="line">    &lt;string&gt;$(HOME)/Library/Developer/Shared/Documentation/DocSets&lt;/string&gt;</div><div class="line">    &lt;key&gt;InstalledIfAllReceiptsArePresentOrNewer&lt;/key&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;key&gt;com.apple.pkg.7.0.iOSDocset&lt;/key&gt;</div><div class="line">      &lt;string&gt;10.9.0.0.1.1449203766&lt;/string&gt;</div><div class="line">    &lt;/dict&gt;</div><div class="line">    &lt;key&gt;RequiresADCAuthentication&lt;/key&gt;</div><div class="line">    &lt;false/&gt;</div><div class="line">    &lt;key&gt;Summary&lt;/key&gt;</div><div class="line">    &lt;string&gt;My description of content&lt;/string&gt;</div><div class="line">  &lt;/dict&gt;</div><div class="line">  &lt;key&gt;version&lt;/key&gt;</div><div class="line">  &lt;string&gt;92.7&lt;/string&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;!-- END iOS doc set --&gt;</div></pre></td></tr></table></figure>
<p>下载地址为： <a href="https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg" target="_blank" rel="external">https://devimages.apple.com.edgekey.net/docsets/20151208/031-43202-A.dmg</a></p>
<p>如果觉得官网下载速度太慢了，也可以从我的百度网盘下载： <a href="http://pan.baidu.com/s/1pKsmkY3" target="_blank" rel="external">http://pan.baidu.com/s/1pKsmkY3</a> 。下载完成之后自行进行文件合并、md5校验。</p>
<ol>
<li>将下载的 dmg 文件移动到 <code>~/Library/Caches/com.apple.dt.Xcode/Downloads/</code> 目录下（如果目录不存在，自行创建），<br>并重命名为 <code>&lt;identifier&gt;-&lt;version&gt;.dmg</code> 这样的形式，在这里为： <code>com.apple.adc.documentation.iOS-92.7.dmg</code></li>
</ol>
<p>然后转到文档所在目录： <code>~/Library/Developer/Shared/Documentation/DocSets</code>，如果对应的文档文件已存在则删除。<br><code>rm -rf com.apple.adc.documentation.iOS.docset</code></p>
<ol>
<li>打开 Xcode ，点击下载对应的文档。此时应该会跳过下载步骤而直接进行安装。</li>
</ol>
<p><img src="/wp-content/uploads/2016/01/03/xcode1.png" alt="Xcode"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Xcode 中下载安装文档速度太慢了，不得已只得自行下载，然后再手动安装。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先在 &lt;a href=&quot;https://developer.apple.com/library/downloads/docset-index.dvtdownloada
    
    </summary>
    
      <category term="资源分享" scheme="http://www.xefan.com/categories/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="Xcode" scheme="http://www.xefan.com/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>javascript使用async进行流程控制</title>
    <link href="http://www.xefan.com/archives/84157.html"/>
    <id>http://www.xefan.com/archives/84157.html</id>
    <published>2015-12-13T21:39:26.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>突然发现博客好久没有更新了，主要是因为最近这几个月比较忙。之前由 Python 转向了 Ruby，现在又由后端转向了前端。<br>这几个月接触的内容略有点多，信息量有点大，主要都是 js 相关的。准备之后抽时间将这些知识整理整理，沉淀沉淀。</p>
<h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><p>由于 js 是异步的，之前在使用 loopback 进行 server 端开发时，很容易就出现了比较深层次的回调嵌套。<br><a href="https://github.com/caolan/async" target="_blank" rel="external">async.js</a>是 js 的一个工具，可以用来方便的控制 js 中的异步流程的，类似的库还有 Promise、RxJS 等。<br>最初它是设计用于 nodejs 的，不过在浏览器端也可以使用。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装方法很简单，直接使用 npm 即可： <code>npm install async</code> 。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>首先是加载 async 库，在 server 端使用 <code>var async = require(&#39;async&#39;);</code>，<br>在浏览器端直接引用即可： <code>&lt;script type=&quot;text/javascript&quot; src=&quot;async.js&quot;&gt;&lt;/script&gt;</code>。</p>
<p>async 提供一些集合操作方法和流程控制方法，我比较常用的是：<code>each</code>、<code>map</code>、<code>series</code>、<code>waterfall</code> 这些方法。<br>其中 <code>each</code>、<code>map</code> 方法与 <code>lodash</code> 的类似，可以用来遍历某个集合并执行一些操作。</p>
<p><code>each</code> 方法定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.each(collection, iterator, [callback])</div></pre></td></tr></table></figure>
<p>该方法会对 <code>collection</code> 每个元素都调用 <code>iterator</code> 操作， <code>iterator</code> 函数原型为： <code>iterator(item, callback)</code>。<br>当 <code>collection</code> 中的所有元素遍历完成或者执行 <code>iterator</code> 时发生错误就会调用 <code>callback</code> 回调，原型为： <code>callback(err)</code>。</p>
<p><code>each</code> 方法只是对每个元素进行操作，如果还需要获取操作的结果，那么可以使用 <code>map</code> 方法。定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.map(collection, iterator, [callback])</div></pre></td></tr></table></figure>
<p><code>map</code> 与 <code>each</code> 类似，只是 <code>callback</code> 定义为： <code>callback(err, results)</code>。<br><code>results</code> 为 <code>iterator</code> 操作的结果集合。</p>
<p>如下是一个例子，一次读取多个文件的内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.map([<span class="string">'file1'</span>,<span class="string">'file2'</span>,<span class="string">'file3'</span>], fs.readFile, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>)</span>&#123;</div><div class="line">    <span class="comment">// doSomething();</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>series</code> 与 <code>map</code> 类似，不过 <code>series</code> 是遍历一个方法合集并挨个执行，然后返回结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.series(tasks, [callback])</div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.series([</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, <span class="string">'one'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, <span class="string">'two'</span>);</div><div class="line">  &#125;</div><div class="line">],</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>)</span>&#123;</div><div class="line">  <span class="comment">// doSomething();</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意，以上这些方法各个任务的完成时间顺序是不确定的。如果有一些操作是需要按照先后顺序执行，可以使用 <code>waterfall</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span>.waterfall(tasks, [callback])</div></pre></td></tr></table></figure>
<p>例如在 <code>loopback</code> 的一个 <code>controller</code> 中，提供修改用户密码的功能。原始写法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/user/password'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  User.findById(req.body.id, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) doSomething();</div><div class="line">    user.password = req.body.password;</div><div class="line">    user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) doSomething();</div><div class="line">      res.status(<span class="number">200</span>).end();</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的例子功能还比较简单，回调层级不是很深。不过如果使用 <code>waterfall</code> 来控制就更为简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/user/password'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">async</span>.waterfall([</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">      User.findById(req.body.id, callback);</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">user, callback</span>)</span>&#123;</div><div class="line">      user.password = req.body.password;</div><div class="line">      user.save(callback);</div><div class="line">    &#125;</div><div class="line">  ], <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) doSomething();</div><div class="line">    res.status(<span class="number">200</span>).end();</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;突然发现博客好久没有更新了，主要是因为最近这几个月比较忙。之前由 Python 转向了 Ruby，现在又由后端转向了前端。&lt;br&gt;这几个月接
    
    </summary>
    
      <category term="前端相关" scheme="http://www.xefan.com/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="js" scheme="http://www.xefan.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS学习笔记7——与rails整合</title>
    <link href="http://www.xefan.com/archives/84156.html"/>
    <id>http://www.xefan.com/archives/84156.html</id>
    <published>2015-08-27T13:01:33.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>要在 rails 中使用 angular 直接在页面中引入进行即可，这个倒是不难。<br>只是在开发过程中突然发现了一个问题，就是 angular 的模板应该如何组织呢。<br>如果全写成内联模板这个不太好维护，如果是写成单个文件放在 public 目录下也不太妥。<br>不过好在这个问题已经有人解决了，有 angular-rails-templates 这么一个库：<a href="https://github.com/pitr/angular-rails-templates" target="_blank" rel="external">https://github.com/pitr/angular-rails-templates</a></p>
<p>首先安装该库：<code>gem &#39;angular-rails-templates&#39;</code></p>
<p>然后创建目录 <code>app/assets/javascripts/templates</code>，<br>并在 <code>app/assets/javascripts/application.js</code> 中加载对应的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//= require angular-rails-templates</div><div class="line">//= require_tree ./templates</div></pre></td></tr></table></figure>
<p>该目录下的模板文件命名与 rails 的视图命名类似，如： <code>foo.html</code>，<code>foo.html.erb</code>，<code>foo.html.haml</code>,<code>foo.html.slim</code>。</p>
<p>可以参考我的一个例子： <a href="https://github.com/wusuopu/rails-billing" target="_blank" rel="external">https://github.com/wusuopu/rails-billing</a></p>
<p>这里我是使用 bower 进行安装 angular 的库，首先安装 <code>gem &#39;bower-rails&#39;</code> 。</p>
<p>然后初始化 bower_rails： <code>rails g bower_rails:initialize</code><br>编辑 <code>Bowerfile</code>，添加所需要的依赖包：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">asset &apos;angular&apos;</div><div class="line">asset &apos;angular-route&apos;</div><div class="line">asset &apos;angular-resource&apos;</div><div class="line">asset &apos;angular-mocks&apos;</div><div class="line">asset &apos;angular-flash&apos;</div><div class="line">asset &apos;angular-loading-bar&apos;</div><div class="line">asset &apos;angular-flash-messages&apos;</div><div class="line">asset &apos;angular-translate&apos;</div><div class="line">asset &apos;angular-bootstrap&apos;</div><div class="line">asset &apos;bootstrap-sass-official&apos;</div><div class="line">asset &apos;components-font-awesome&apos;</div></pre></td></tr></table></figure>
<p>再执行命令： <code>rake bower:install</code> 进行安装。</p>
<p>接着编辑 <code>config/initializers/assets.rb</code> 添加配置： <code>Rails.application.config.assets.paths &lt;&lt; Rails.root.join(&quot;vendor&quot;,&quot;assets&quot;,&quot;bower_components&quot;)</code></p>
<p>最后加载依赖文件 <code>app/assets/javascripts/application.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//= require angular/angular</div><div class="line">//= require angular-route/angular-route</div><div class="line">//= require angular-resource/angular-resource</div><div class="line">//= require angular-flash-messages/angular-flash</div><div class="line">//= require angular-loading-bar/build/loading-bar</div><div class="line">//= require angular-translate/angular-translate</div><div class="line">//= require angular-bootstrap/ui-bootstrap-tpls</div><div class="line">//= require angular-rails-templates</div><div class="line">//= require_tree ./templates</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要在 rails 中使用 angular 直接在页面中引入进行即可，这个倒是不难。&lt;br&gt;只是在开发过程中突然发现了一个问题，就是 angular 的模板应该如何组织呢。&lt;br&gt;如果全写成内联模板这个不太好维护，如果是写成单个文件放在 public 目录下也不太妥。&lt;br&gt;
    
    </summary>
    
      <category term="前端相关" scheme="http://www.xefan.com/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="js" scheme="http://www.xefan.com/tags/js/"/>
    
      <category term="angular" scheme="http://www.xefan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS学习笔记6——与jQuery、Bootstrap结合</title>
    <link href="http://www.xefan.com/archives/84155.html"/>
    <id>http://www.xefan.com/archives/84155.html</id>
    <published>2015-08-24T10:25:28.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>如果想要在 angular 内部调用 jQuery 的函数（如 jQuery 的 ajax 功能）比较简单，直接调用 <code>$.ajax</code> 即可。<br>但是如果想要在 angular 外部调用其函数就稍微麻烦一点，毕竟这也与 angular 的设计理念不符。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&quot;PageController&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  var appModule = angular.module(&apos;myApp&apos;, []);</div><div class="line">  appModule.controller(&apos;PageController&apos;, [&apos;$scope&apos;, &apos;$http&apos;, function($scope, $http)&#123;</div><div class="line">      ...</div><div class="line">  &#125;]);</div></pre></td></tr></table></figure>
<p>例如上个这段代码，如果想要从外部访问 <code>PageController</code> 中的某些内容。则可以先获取 <code>PageController</code> 的上下文对象($scope)：<code>angular.element($(&#39;[ng-controller=&quot;PageController&quot;]&#39;)).scope();</code><br>在外部修改了 <code>scope</code> 的某些值时会发现对应的视图并没有更新，这时还需要调用 <code>scope</code> 的 <code>$digest</code> 方法进行同步，或者直接调用 <code>$apply</code> 方法进行操作。</p>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><p>之前使用 angularjs 时遇到了 Bootstrap 的控件不能正常使用了，如 dropdown 组件点击了没有效果。<br>经过分析发现是 angularjs 将 Bootstrap 的组件的事件给截获了。</p>
<p>好在有 angular-bootstrap 这么一个组件可以将它们整合在一起。</p>
<p><a href="http://angular-ui.github.io/bootstrap/" target="_blank" rel="external">http://angular-ui.github.io/bootstrap/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery&quot;&gt;&lt;a href=&quot;#jQuery&quot; class=&quot;headerlink&quot; title=&quot;jQuery&quot;&gt;&lt;/a&gt;jQuery&lt;/h2&gt;&lt;p&gt;如果想要在 angular 内部调用 jQuery 的函数（如 jQuery 的 ajax 功能）比较简单，
    
    </summary>
    
      <category term="前端相关" scheme="http://www.xefan.com/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="js" scheme="http://www.xefan.com/tags/js/"/>
    
      <category term="angular" scheme="http://www.xefan.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>在Ruby中使用DATA和__END__将代码和数据混合</title>
    <link href="http://www.xefan.com/archives/84154.html"/>
    <id>http://www.xefan.com/archives/84154.html</id>
    <published>2015-08-23T10:12:08.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直不理解 <code>__END__</code> 的用法，现在看了这篇文章后才算是了解了，于是便翻译之。<br>《Mixing code and data in Ruby with DATA and __END__》: <a href="http://blog.honeybadger.io/data-and-end-in-ruby/" target="_blank" rel="external">http://blog.honeybadger.io/data-and-end-in-ruby/</a></p>
<hr>
<p>你知道 Ruby 提供了一种方法在你的脚本中可以将源文件作为数据源来使用吗？当你在写一些一次性的脚本用于验证概念时这个小技巧会为你节约一些时间。让我们来看看吧。</p>
<h2 id="DATA-和-END"><a href="#DATA-和-END" class="headerlink" title="DATA 和 __END__"></a>DATA 和 __END__</h2><p>在下面这个例子中，我使用了一个有趣的关键字 <code>__END__</code>。所有在 <code>__END__</code> 下面的内容将会被 Ruby 解释器所忽略。但是有趣的是 ruby 为你提供了一个称为 <code>DATA</code> 的 IO 对象，就像你可以读取其他任何文件一样，它能让你读取到 <code>__END__</code> 以下的所有内容。</p>
<p>下面这个例子中，我们遍历每一行并进行输出。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DATA.each_line <span class="keyword">do</span> <span class="params">|line|</span></div><div class="line">  puts line</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line">Doom</div><div class="line">Quake</div><div class="line">Diablo</div></pre></td></tr></table></figure>
<p>关于这个技术我最喜欢的实例是使用 <code>DATA</code> 来包含一个 ERB 模板。它同样也可用于 YAML、CSV等等。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'erb'</span></div><div class="line"> </div><div class="line">time = Time.now</div><div class="line">renderer = ERB.new(DATA.read)</div><div class="line">puts renderer.result()</div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line">The current time is &lt;%= time %&gt;.</div></pre></td></tr></table></figure>
<p>实际上你也可以使用 <code>DATA</code> 来读取 <code>__END__</code> 关键字以上的内容。那是因为 <code>DATA</code> 实际上是一个指向了整个源文件，并定位到 <code>__END__</code> 关键字的位置。你可以试试看在输出之前将 IO 对象反转。下面这个例子将会输出整个源文件。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DATA.rewind</div><div class="line">puts DATA.read <span class="comment"># prints the entire source file</span></div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line">meh</div></pre></td></tr></table></figure>
<h2 id="多文件问题"><a href="#多文件问题" class="headerlink" title="多文件问题"></a>多文件问题</h2><p>这个技术最大的缺点是它只能用于单个文件的脚本，直接运行该文件，不能在其他文件进行导入。</p>
<p>下面这个例子，我们有两个文件，并且每个都有它们自己的 <code>__END__</code> 部分。然而却只有一个全局 <code>DATA</code> 对象。因此第二个文件的 <code>__END__</code> 部分刚访问不到了。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># first.rb</span></div><div class="line"><span class="keyword">require</span> <span class="string">"./second"</span></div><div class="line"> </div><div class="line">puts <span class="string">"First file\n----------------------"</span></div><div class="line">puts DATA.read</div><div class="line"> </div><div class="line">print_second_data()</div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line">First end clause</div></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># second.rb</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_second_data</span></span></div><div class="line">  puts <span class="string">"Second file\n----------------------"</span></div><div class="line">  puts DATA.read <span class="comment"># Won't output anything, since first.rb read the entire file</span></div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line"> </div><div class="line">Second end clause</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">snhorne ~/tmp $ ruby first.rb</div><div class="line">First file</div><div class="line">----------------------</div><div class="line">First end clause</div><div class="line"> </div><div class="line">Second file</div><div class="line">----------------------</div></pre></td></tr></table></figure>
<h2 id="对于多文件的一个解决方案"><a href="#对于多文件的一个解决方案" class="headerlink" title="对于多文件的一个解决方案"></a>对于多文件的一个解决方案</h2><p>在 Sinatra 中有一个很酷的特性是它允许你在你应用的 <code>__END__</code> 部分添加多个内联模板。它看起来像下面这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This code is from the Sinatra docs at http://www.sinatrarb.com/intro.html</span></div><div class="line"><span class="keyword">require</span> <span class="string">'sinatra'</span></div><div class="line"> </div><div class="line">get <span class="string">'/'</span> <span class="keyword">do</span></div><div class="line">  haml <span class="symbol">:index</span></div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">__END__</span></div><div class="line"> </div><div class="line">@@ layout</div><div class="line">%html</div><div class="line"> </div><div class="line">  = yield</div><div class="line"> </div><div class="line">@@ index</div><div class="line">%div.title Hello world.</div></pre></td></tr></table></figure>
<p>sinatra 是如何实现的呢？毕竟你的应用可能是运行在 rack 上。在生产环境中你不能再通过 <code>ruby myapp.rb</code> 来运行！他们必须有一种在多文件中使用 <code>DATA</code> 的解决方案。</p>
<p>因此如果你稍微深入一下 Sinatra 的源代码，你会发现它们并没有使用 <code>DATA</code>。而是使用了跟下面这段代码类似的方案。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># I'm paraphrasing. See the original at https://github.com/sinatra/sinatra/blob/master/lib/sinatra/base.rb#L1284</span></div><div class="line">app, data = File.read(__FILE_<span class="number">_</span>).split(<span class="regexp">/^__END__$/</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>实际上它比这个要更复杂一些，因为它们不想读取 <code>__FILE__</code>，它只是 <code>sinatra/base.rb</code> 文件。它们其实是需要获取调用了该方法的文件的内容。它们通过解析 <code>caller</code> 的结果来获取。</p>
<p><code>caller</code> 方法将会告诉你当前运行的方法是从哪调用的。这里是个简单的例子：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">some_method</span></span></div><div class="line">  puts caller</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line">some_method <span class="comment"># =&gt; caller.rb:5:in `&lt;main&gt;'</span></div></pre></td></tr></table></figure>
<p>现在可以简单地获取到文件名了，然后从该文件中再提取出与 <code>DATA</code> 等价的内容。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_caller_data</span></span></div><div class="line">  puts File.read(caller.first.split(<span class="string">":"</span>).first).split(<span class="string">"__END__"</span>, <span class="number">2</span>).last</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h2 id="请善用它，不要作恶"><a href="#请善用它，不要作恶" class="headerlink" title="请善用它，不要作恶"></a>请善用它，不要作恶</h2><p>希望对于这些技巧你不要经常使用。它们不会使得代码干净、可维护。</p>
<p>然后，你偶尔需要一些又快又脏的实现一个一次性的脚本或者验证一些概念。此时 <code>DATA</code> 和 <code>__END__</code> 就非常有用了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直不理解 &lt;code&gt;__END__&lt;/code&gt; 的用法，现在看了这篇文章后才算是了解了，于是便翻译之。&lt;br&gt;《Mixing code and data in Ruby with DATA and __END__》: &lt;a href=&quot;http://blog.ho
    
    </summary>
    
      <category term="Ruby栏目" scheme="http://www.xefan.com/categories/Ruby%E6%A0%8F%E7%9B%AE/"/>
    
    
      <category term="Ruby" scheme="http://www.xefan.com/tags/Ruby/"/>
    
      <category term="翻译" scheme="http://www.xefan.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Mac下使用supervisor进行服务管理</title>
    <link href="http://www.xefan.com/archives/84153.html"/>
    <id>http://www.xefan.com/archives/84153.html</id>
    <published>2015-08-22T17:32:32.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚切换到 Mac 平台上，感觉各种不适应。之前使用 Ubuntu 时，有 service 命令可以对服务进行管理，<br>但是在 Mac 系统下没有对应的工具。也许有人说可以用 launchctl 啊。但是 launchctl 的服务是开机自动启动的，<br>而我又不想要开机自动启动，只想在需要时启动，使用完后就停止。</p>
<p>由于没有相应的工具，因此我只得在终端下通过命令来启动服务，但是这个又得一直打开着一个新的终端标签。<br>对于有洁癖的我来说，表示很不爽。本来想自己写个脚本来管理的，但是这个又得针对每个服务写个脚本，也很麻烦。<br>正在纠结的时候想起了还有 supervisor 可以用。</p>
<p>supervisor 是使用 python 开发的一个后台服务管理程序。</p>
<p>首先使用 brew 安装 python 工具： <code>brew install python</code>，并覆盖掉系统自带的 python。<br>因为我有洁癖不想将软件安装在系统目录中，因此就再单独安装一个 python。<br>若对此不在意的可跳过此步。</p>
<p>然后再安装 supervisor： <code>pip install supervisor</code>。<br>supervisor 不支持 python3，并且如果你使用的是系统自带的 python ，可能需要在命令前加上 sudo。</p>
<p>安装完成之后默认是不会创建配置文件的，因此再手动创建配置文件 <code>/usr/local/etc/supervisord.conf</code>，我的配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">[unix_http_server]</div><div class="line">file=/tmp/supervisor.sock                                 ; path to your socket file</div><div class="line"></div><div class="line">[supervisord]</div><div class="line">logfile=/usr/local/var/log/supervisord/supervisord.log    ; supervisord log file</div><div class="line">logfile_maxbytes=50MB                                     ; maximum size of logfile before rotation</div><div class="line">logfile_backups=10                                        ; number of backed up logfiles</div><div class="line">loglevel=error                                            ; info, debug, warn, trace</div><div class="line">pidfile=/usr/local/var/run/supervisord.pid                ; pidfile location</div><div class="line">nodaemon=false                                            ; run supervisord as a daemon</div><div class="line">minfds=1024                                               ; number of startup file descriptors</div><div class="line">minprocs=200                                              ; number of process descriptors</div><div class="line">user=root                                                 ; default user</div><div class="line">childlogdir=/usr/local/var/log/supervisord/               ; where child log files will live</div><div class="line"></div><div class="line">[rpcinterface:supervisor]</div><div class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</div><div class="line"></div><div class="line">[supervisorctl]</div><div class="line">serverurl=unix:///tmp/supervisor.sock                     ; use a unix:// URL  for a unix socket</div><div class="line"></div><div class="line">[program:mongod]</div><div class="line">command=/usr/local/bin/mongod --config /usr/local/etc/mongod.conf</div><div class="line">autostart=false</div><div class="line">autorestart=true</div><div class="line"></div><div class="line">[program:redis]</div><div class="line">command=/usr/local/bin/redis-server /usr/local/etc/redis.conf</div><div class="line">autostart=false</div><div class="line">autorestart=true</div><div class="line"></div><div class="line">[program:nginx]</div><div class="line">command=/usr/local/bin/nginx -c /usr/local/etc/nginx/nginx.conf</div><div class="line">autostart=false</div><div class="line">autorestart=true</div></pre></td></tr></table></figure>
<p>这里我的这几个服务都没有设置为自动启动，如有需要可自行将 <code>autostart</code> 设置为 true。</p>
<p>最后执行 <code>supervisord</code> 命令启动 supervisor 服务。之后就可以通过 <code>supervisorctl</code> 命令来进行服务管理了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近刚切换到 Mac 平台上，感觉各种不适应。之前使用 Ubuntu 时，有 service 命令可以对服务进行管理，&lt;br&gt;但是在 Mac 系统下没有对应的工具。也许有人说可以用 launchctl 啊。但是 launchctl 的服务是开机自动启动的，&lt;br&gt;而我又不想
    
    </summary>
    
      <category term="教程" scheme="http://www.xefan.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="http://www.xefan.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Riot.js之初体验</title>
    <link href="http://www.xefan.com/archives/84152.html"/>
    <id>http://www.xefan.com/archives/84152.html</id>
    <published>2015-08-21T09:55:14.000Z</published>
    <updated>2017-01-21T16:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Riot(<a href="http://riotjs.com/)按照官方的介绍，它是一个类似于" target="_blank" rel="external">http://riotjs.com/)按照官方的介绍，它是一个类似于</a> React 的微型框架。<br>压缩之后的文件只有差不多 15K 的大小，相比其他基本上都是上百K大小的框架来说确实是很微型的。</p>
<p>同时它的官方还给出了与 React 和 Polymer 的对比，各位感兴趣可以看看： <a href="http://riotjs.com/compare/" target="_blank" rel="external">http://riotjs.com/compare/</a></p>
<p>下面通过一个例子来体验一下。</p>
<p>先下载 Riot 库文件： <a href="https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js" target="_blank" rel="external">https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js</a><br>然后新建一个文件 <code>index.html</code>，内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tabs exampe<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line">      .tabContent__item&#123;</div><div class="line">        display:none;</div><div class="line">      &#125;</div><div class="line">      .tabContent__item.is-active&#123;</div><div class="line">        display:block;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">riot-tabs</span>&gt;</span><span class="tag">&lt;/<span class="name">riot-tabs</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tabs.tag"</span> <span class="attr">type</span>=<span class="string">"riot/tag"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"riot+compiler.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span></div><div class="line">      riot.mount('riot-tabs');</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接着再创建文件 <code>tabs.tag</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;riot-tabs&gt;</div><div class="line">  &lt;h2&gt;Tabs&lt;/h2&gt;</div><div class="line">  &lt;ul&gt;</div><div class="line">    &lt;li each=&#123; tab, i in tabs &#125; class=&quot;tabItem &#123; is-active: parent.isActiveTab(tab.ref) &#125;&quot; onclick=&#123; parent.toggleTab &#125;&gt;&#123;tab.title&#125;&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">  &lt;div class=&quot;tabContent&quot;&gt;</div><div class="line">    &lt;div each=&#123; tab, i in tabs &#125; class=&quot;tabContent__item &#123; is-active: parent.isActiveTab(tab.ref) &#125;&quot;&gt;&#123;tab.content&#125;&lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  this.tabs = [</div><div class="line">    &#123; title: &apos;Tab 1&apos;, ref: &apos;tab1&apos;, content: &quot;(1) Lorem ipsum dolor&quot; &#125;,</div><div class="line">    &#123; title: &apos;Tab 2&apos;, ref: &apos;tab2&apos;, content: &quot;(2) Lorem ipsum dolor&quot; &#125;,</div><div class="line">    &#123; title: &apos;Tab 3&apos;, ref: &apos;tab3&apos;, content: &quot;(3) Lorem ipsum dolor&quot; &#125;</div><div class="line">  ]</div><div class="line"></div><div class="line">  this.activeTab = &apos;tab1&apos;</div><div class="line"></div><div class="line">  isActiveTab(tab) &#123;</div><div class="line">    return this.activeTab === tab</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  toggleTab(e) &#123;</div><div class="line">    this.activeTab = e.item.tab.ref</div><div class="line">    return true</div><div class="line">  &#125;</div><div class="line">&lt;/riot-tabs&gt;</div></pre></td></tr></table></figure>
<p>这个是 javascript 与 html 的混合。当然还可以使用纯 js 的写法，将 <code>tabs.tag</code> 改为 <code>tabs.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">riot.tag(&apos;riot-tabs&apos;, &apos;&lt;h2&gt;Tabs&lt;/h2&gt; &lt;ul&gt; &lt;li each=&quot;&#123; tab, i in tabs &#125;&quot; class=&quot;tabItem &#123; is-active: parent.isActiveTab(tab.ref) &#125;&quot; onclick=&quot;&#123; parent.toggleTab &#125;&quot;&gt;&#123;tab.title&#125;&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;tabContent&quot;&gt; &lt;div each=&quot;&#123; tab, i in tabs &#125;&quot; class=&quot;tabContent__item &#123; is-active: parent.isActiveTab(tab.ref) &#125;&quot;&gt;&#123;tab.content&#125;&lt;/div&gt; &lt;/div&gt;&apos;, function(opts) &#123;</div><div class="line"></div><div class="line">  this.tabs = [</div><div class="line">    &#123; title: &apos;Tab 1&apos;, ref: &apos;tab1&apos;, content: &quot;(1) Lorem ipsum dolor&quot; &#125;,</div><div class="line">    &#123; title: &apos;Tab 2&apos;, ref: &apos;tab2&apos;, content: &quot;(2) Lorem ipsum dolor&quot; &#125;,</div><div class="line">    &#123; title: &apos;Tab 3&apos;, ref: &apos;tab3&apos;, content: &quot;(3) Lorem ipsum dolor&quot; &#125;</div><div class="line">  ];</div><div class="line"></div><div class="line">  this.activeTab = &apos;tab1&apos;;</div><div class="line"></div><div class="line">  this.isActiveTab = function(tab) &#123;</div><div class="line">    return this.activeTab === tab;</div><div class="line">  &#125;.bind(this);</div><div class="line"></div><div class="line">  this.toggleTab = function(e) &#123;</div><div class="line">    this.activeTab = e.item.tab.ref;</div><div class="line">    return true;</div><div class="line">  &#125;.bind(this);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同时将 <code>index.html</code> 中的 <code>&lt;script src=&quot;tabs.tag&quot; type=&quot;riot/tag&quot;&gt;&lt;/script&gt;</code> 修改为 <code>&lt;script src=&quot;tabs.js&quot; type=&quot;riot/tag&quot;&gt;&lt;/script&gt;</code> 。</p>
<p>好了，现在打开浏览器看下效果吧。</p>
<p>体验了一下，感觉它比 angular 之类的框架的学习成本要低。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Riot(&lt;a href=&quot;http://riotjs.com/)按照官方的介绍，它是一个类似于&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://riotjs.com/)按照官方的介绍，它是一个类似于&lt;/a&gt; React 的微型框架。&lt;br&gt;压
    
    </summary>
    
      <category term="前端相关" scheme="http://www.xefan.com/categories/%E5%89%8D%E7%AB%AF%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="js" scheme="http://www.xefan.com/tags/js/"/>
    
  </entry>
  
</feed>
