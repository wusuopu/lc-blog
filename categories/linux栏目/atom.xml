<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux栏目 | 龍昌博客]]></title>
  <link href="http://www.xefan.com/categories/linux栏目/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-27T13:50:19+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vagrant使用笔记]]></title>
    <link href="http://www.xefan.com/archives/84141.html"/>
    <updated>2015-02-24T19:17:43+08:00</updated>
    <id>http://www.xefan.com/archives/84141-Vagrant使用笔记</id>
    <content type="html"><![CDATA[<p>Vgrant是一个基于 Ruby 使用 Virtualbox 进行创建和部署虚拟化环境的工具。
类似的工具之前有使用过 Docker。就我个人而言这两款工具之间，Docker是轻量级的VM，
因此性能应该会比较好，但是只能在64位的系统下使用。
而 Vgrant 是使用 Virtualbox 进行虚拟化，因此性能上不及 Docker，
不过它可以在32/64位的 Linux、Windows 等系统上运行。</p>

<p>我觉得 Vgrant 比较适合用于在开发环境中使用，而 Docker 比较适合用于生产环境。</p>

<h2>安装</h2>

<p>首先安装 virtualbox，然后再安装 Vgrant。</p>

<p>1.通过源代码安装</p>

<pre><code>git clone https://github.com/mitchellh/vagrant
cd vagrant
bundle install
rake install
</code></pre>

<p>2.通过安装包安装<br/>
根据情况选择下载对应的安装包： <a href="http://www.vagrantup.com/downloads.html">http://www.vagrantup.com/downloads.html</a></p>

<p>注意：如果是 Windows 系统，可能还需要将 Vgrant 的路径添加到环境变量中，以便使用 vgrant 命令。</p>

<h2>使用</h2>

<p>Vagrant 的使用方法也很简单，基本如下：</p>

<pre><code># 这里我先添加一个 ArchLinux 的镜像
vagrant box add archlinux http://vagrant.srijn.net/archlinux-x64-2014-01-07.box
# 进行初始化
vagrant init archlinux
# 运行虚拟机
vagrant up
# 如果需要进行ssh连接到虚拟机中进行一些操作，可以执行该命令
vagrant ssh
</code></pre>

<p>其他的一些命令：</p>

<pre><code># 关闭虚拟机
vagrant halt
# 删除创建的虚拟机
vagrant destroy
</code></pre>

<p>vagrant的一些镜像： <a href="http://www.vagrantbox.es/">http://www.vagrantbox.es/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker使用笔记]]></title>
    <link href="http://www.xefan.com/archives/84124.html"/>
    <updated>2014-09-21T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84124-Docker使用笔记</id>
    <content type="html"><![CDATA[<p>docker是一个Linux下的应用容器引擎。使用它可以很方便地将程序以及依赖都打包到一个可移植的容器中。最后体验了一下，使用docker配置了一个Web开发环境。这样就不用担心每次重装系统之后都要重新配置开发环境。</p>


<h3>安装</h3>


<p>首先是安装docker应用程序，目前只有64位系统才能使用。</p>


<pre><code>$ [sudo] apt-get install apparmor apparmor-profiles apparmor-utils
$ [sudo] apt-get install aufs-tools
$ [sudo] apt-get install cgroup-lite

$ wget https://get.docker.io/builds/Linux/x86_64/docker-latest.tgz
$ [sudo] tar xf docker-latest.tgz -C /
</code></pre>


<h3>基本用法</h3>


<p>安装完成之后使用 <code>[sudo] docker -d</code> 命令启动docker的daemon进程。</p>


<p>以下是一些常用命令的用法介绍：</p>


<pre><code>docker version            # 查看版本
docker search TERM        # 搜索镜像
docker pull NAME[:TAG]    # 下载镜像
</code></pre>




<p>启动镜像：</p>


<pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker run IMAGE -t -i /bin/bash                        # 进入镜像的shell环境
docker run IMAGE -p 12345:8000 -t -i /bin/bash          # 进入镜像的shell环境，将主机的12345端口映射到容器的8000端口

</code></pre>




<p>容器与镜像管理：</p>


<pre><code>docker ps [OPTIONS]                              # 列出容器
docker images [OPTIONS] [NAME]                   # 列出镜像
docker rm [OPTIONS] CONTAINER [CONTAINER...]     # 删除容器
docker rmi IMAGE [IMAGE...]                      # 删除镜像

docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]    # 根据修改的容器创建一个新的镜像
docker commit -m &quot;centos&quot; f9ccb5cef3c0 wusuopu/centos6
docker push NAME[:TAG]                                  # 上传镜像
</code></pre>




<pre><code>docker inspect CONTAINER|IMAGE [CONTAINER|IMAGE...]     # 查看一个容器或者镜像的详细信息
docker logs CONTAINER     # 查看日志
docker start CONTAINER [CONTAINER...]                   # 启动镜像
docker stop CONTAINER [CONTAINER...]                    # 停止镜像
docker tag [OPTIONS] IMAGE [REGISTRYHOST/][USERNAME/]NAME[:TAG]   # 给镜像打tag
docker diff CONTAINER     # 查看容器文件系统的变化
docker cp CONTAINER:PATH HOSTPATH                       # 将文件从容器复制到主机
</code></pre>




<p>导入、导出：</p>


<pre><code>docker export CONTAINER                                 # 导出容器到标准输出
docker export red_panda &gt; latest.tar

docker import URL|- [REPOSITORY[:TAG]]                  # 导入文件为镜像
docker import http://example.com/exampleimage.tgz
cat exampleimage.tgz | sudo docker import - exampleimagelocal:new
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下安装sudo工具]]></title>
    <link href="http://www.xefan.com/archives/83817.html"/>
    <updated>2013-04-14T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83817-Linux下安装sudo工具</id>
    <content type="html"><![CDATA[<p>以gentoo为例，先执行命令安装sudo工具<br/>
<code># emerge sudo</code></p>

<p>然后再进行配置。sudo的配置文件是/etc/sudoers。应当永远使用visudo命令编辑/etc/sudoers文件。visudo会锁住sudoers文件，保存修改到临时文件，然后检查文件格式，确保正确后才会覆盖sudoers文件。必须保证sudoers格式正确，否则sudo将无法运行。</p>

<p>编辑/etc/sudoers文件，加入以下内容：
<code>
Defaults    env_reset
Defaults    secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
</code></p>

<p>要为某个用户提供特权，使其可以使用sudo执行所有命令，在配置文件中加入：<br/>
<code>用户名   ALL=(ALL) ALL</code></p>

<p>如果只想允许本地登陆的用户使用sudo：<br/>
<code>用户名   主机名=(ALL) ALL</code></p>

<p>允许admin用户组成员无密码使用sudo：<br/>
<code>%admin      ALL=(ALL) NOPASSWD: ALL</code></p>

<p>请把用户名替换为实际用户名称。</p>

<p>只为用户启用部分特权：<br/>
<code>用户名 主机名=/sbin/halt,/sbin/reboot -Syu</code><br/>
<code>该用户只能使用sudo执行halt、reboot。</code></p>

<p>在~/.bashrc中加入 complete -cf sudo 开启sudo的自动补全。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo安装笔记]]></title>
    <link href="http://www.xefan.com/archives/83811.html"/>
    <updated>2013-01-27T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83811-Gentoo安装笔记</id>
    <content type="html"><![CDATA[<p>参考官方手册，并整理一下。<a href="http://www.gentoo.org/doc/zh_cn/handbook/">http://www.gentoo.org/doc/zh_cn/handbook/</a>
下载iso文件，并使用其进行引导系统。安装光盘上提供了几个内核。默认的是gentoo。<br/>
即使用boot:gentoo来启动安装光盘即可。</p>

<p>整个安装过程需要联网进行，请确保网络已经配置好了。</p>

<p>1、先创建一个分区，然后挂载到/mnt/gentoo目录下。</p>

<p>2、安装需要的安装文件<br/>
(1)、下载stage3 tarball文件，并解压到安装目录下，也就是/mnt/gentoo。<br/>
(2)、下载安装Portage文件。<br/>
<code># cd /mnt/gentoo</code><br/>
<code># tar xvf portage-lastest.bar.bz2 -C /mnt/gentoo/usr</code></p>

<p>3、配置编译选项<br/>
定义CFLAGS和CXXFLAGS变量</p>

<pre><code># nano -w /mnt/gentoo/etc/portage/make.conf

CFLAGS="-O2 -march=i686 -pipe"
# 两个变量使用相同的设置
CXXFLAGS="${CFLAGS}"
</code></pre>

<p>4、安装Gentoo基本系统<br/>
为了快速下载源代码，建议选择一个速度快的境像。我用的网易的源，在make.conf文件中添加以下内容。<br/>
<code>GENTOO_MIRRORS="http://mirrors.163.com/gentoo/"</code></p>

<p>(1)、拷贝DNS信息<br/>
<code># cp -L /etc/resolv.conf /mnt/gentoo/etc</code></p>

<p>(2)、挂载proc和dev文件系统<br/>
<code># mount -t proc none /mnt/gentoo/proc</code><br/>
<code># mount -o bind /dev /mnt/gentoo/dev</code></p>

<p>(3)、进入新系统环境<br/>
<code># chroot /mnt/gentoo /bin/bash</code><br/>
<code># env-update</code><br/>
<code># source /etc/profile</code><br/>
<code># export PS1="(chroot)$PS1"</code></p>

<p>(4)、配置Portage<br/>
更新Portage树<br/>
<code># emerge --sync</code></p>

<p>修改/etc/locale.gen文件设置locale然后再执行命令locale-gen</p>

<p>5、配置内核<br/>
(1)、设置时区，我这用的是上海的时区。<br/>
<code># cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>

<p>(2)、安装源码<br/>
<code># emerge gentoo-sources</code><br/>
然后内核源码就会下载到/usr/src/linux目录下。转到该目录进行内核编译配置。<br/>
<code># cd /usr/src/linux</code><br/>
执行以下命令进行手动配置，手动配置就要注意驱动都要选对，并且要编译进内核，不要编译成模块。反正我是编译了好几次系统都不能正常启动。最后我就使用自动配置。<br/>
<code># make menuconfig</code></p>

<p>自动编译内核首先先安装genkernel<br/>
<code># emerge genkernel</code><br/>
然后复制光盘上的内核配置文件到genkernel搜索配置文件的默认位置。<br/>
  # zcat /proc/config.gz &gt; /usr/share/genkernel/arch/x86/kernel-config<br/>
现在执行如下命令编译内核。这样编译出来的内核支持几乎所有配件，但是耗时较多。<br/>
<code># genkernel all</code><br/>
编译完成后将会在/boot目录下生成内核文件和initrd文件。</p>

<p>6、配置系统<br/>
(1)、文件系统信息<br/>
编辑/etc/fstab文件，设置分区的挂载。</p>

<p>(2)、网络信息<br/>
编辑/etc/conf.d/hostname文件，设置主机名。<br/>
编辑/etc/conf.d/net 文件，设置ip。<br/>
手动设置ip，设置 config_eth0和routes_eth0：<br/>
config_eth0=( &ldquo;192.168.0.2 netmask 255.255.255.0 brd 192.168.0.255&rdquo; )<br/>
routes_eth0=( &ldquo;default via 192.168.0.1&rdquo; )<br/>
使用DHCP，请定义一下config_eth0：<br/>
config_eth0=( &ldquo;dhcp&rdquo; )</p>

<p>创建启动脚本，并设置自动启动。</p>

<pre><code># cd /etc/init.d
# ls -s net.lo net.eth0
# rc-update add net.eth0 default
</code></pre>

<p>(3)、系统信息<br/>
设置root密码，并创建一个普通用户。<br/>
<code># passwd</code><br/>
<code># useradd users</code></p>

<p>7、安装一些系统工具<br/>
根据自己需求再安装一些系统工具。<br/>
(1)、系统日志工具<br/>
<code># emerge syslog-ng</code><br/>
<code># rc-update add syslog-ng default</code></p>

<p>(2)、守护进程<br/>
<code># emerge vixie-cron</code><br/>
<code># rc-update add vixie-cron default</code></p>

<p>(3)、网络工具<br/>
<code># emerge dhcpd</code><br/>
<code># emerge ppp</code></p>

<p>8、配置引导程序<br/>
Gentoo提供的引导程序有GRUB和LILO，我用的是GRUB。<br/>
安装Grub，请根据自己的情况进行调整。<br/>
&#8220;`</p>

<h1>emerge grub</h1>

<h1>grep -v rootfs /proc/mounts &gt; /etc/mtab</h1>

<h1>grub-install &ndash;no-floppy /dev/sda</h1>

<h1>update-grub -o /boot/grub/grub.conf</h1>

<pre><code>
9、重启系统  
</code></pre>

<h1>eixt</h1>

<h1>umount /mnt/gentoo/{dev,proc,}</h1>

<h1>reboot</h1>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arch Linux 2012.12.01安装方法]]></title>
    <link href="http://www.xefan.com/archives/83809.html"/>
    <updated>2013-01-03T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83809-Arch Linux 2012.12.01安装方法</id>
    <content type="html"><![CDATA[<p>自从上次我的Arch系统崩溃之后我就改用其它系统了，距离现在已有小半年了。突然发现Arch又更新了，于是下下来体验一下。<br/>
在新版的ArchLinux中已经不在使用AIF(Arch Installation Framwork)了，而是使用新的脚本工具(Arch Install Scripts)，<a href="https://github.com/falconindy/arch-install-scripts">https://github.com/falconindy/arch-install-scripts</a></p>

<p>新版的安装过程是通过网络安装，因此整个过程需要联网才行。</p>

<p>1、首先为Arch分配一个分区，然后挂载到/mnt目录。如果使用多个分区，还需要创建它们并正确挂载（/mnt/boot, /mnt/home, &hellip;），这样genfstab才能自动检测到它们。</p>

<p>2、安装基本系统<br/>
先编辑/etc/pacman.d/mirrorlist选择首先镜像。<br/>
然后使用pacstrap脚本安装基本系统。<br/>
<code># pacstrap /mnt base base-devel</code></p>

<p>3、安装引导器<br/>
安装一个Bootloader，Grub或者Syslinux。<br/>
(1)安装GRUB:<br/>
如果是BIOS用户执行命令：<br/>
<code># pacstrap /mnt grub-bios</code><br/>
如果是EFI用户执行命令：<br/>
<code># pacstrap /mnt grub-efi-x86_64</code></p>

<p>(2)安装Syslinux：<br/>
<code>#pacstrap /mnt syslinux</code></p>

<p>4、配置系统<br/>
(1)生成fstab文件<br/>
<code># genfstab -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab</code></p>

<p>(2)chroot到新安装的系统中去<br/>
<code># arch-chroot /mnt</code></p>

<p>(3)进行一些系统配置<br/>
设置主机名：修改/etc/hostname文件，将主机名写入里面。<br/>
设置时区： cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br/>
设置locale： 修改/etc/locale.gen文件，然后再执行命令locale-gen<br/>
创建一个初始的RAM disk： mkinitcpio -p linux<br/>
设置root用户的密码： passwd root<br/>
配置引导器，在我的电脑上是依次执行如下命令，这个请结合自己的情况进行设置：<br/>
<code># grub-install --no-floppy /dev/sda</code><br/>
<code># grub-mkconfig -o /boot/grub/grub.cfg</code></p>

<p>其余的根据自己的需要再进行设置。</p>

<p>5、重启进入新系统<br/>
先退出chroot，然后卸载之前挂载在/mnt的分区。<br/>
<code># umount /mnt</code><br/>
然后重启进入新系统并以root用户登陆。<br/>
现在一个基本的Arch系统就已经安装好了，接下来可以根据自己的需要来安装相应的软件。</p>

<p>6、安装应用软件<br/>
Arch系统刚安装好后发现居然连ifconfig命令都没有，可以使用如下命令安装：<br/>
<code># pacman -S net-tools dnsutils inetutils iproute2</code></p>

<p>安装Yaourt<br/>
在/etc/pacman.conf中添加以下内容：<br/>
<code>
[archlinuxfr]
Server = http://repo.archlinux.fr/$arch
</code></p>

<p>然后再执行命令: pacman -Syu yaourt</p>

<p>安装Xorg：<br/>
<code># pacman -S xorg-server xorg-xinit xorg-utils xorg-server-utils</code><br/>
安装显示驱动(根据自己的情况选择安装相应的驱动)：<br/>
<code># pacman -S xf86-video-fbdev</code><br/>
安装evdev，支持大部分即插即用设备<br/>
<code># pacman -S xf86-input-evdev</code><br/>
安装默认的测试环境：<br/>
<code># pacman -S xorg-twm xorg-xclock xterm</code><br/>
然后启动X会话，如果能够看到一个终端和一个时钟就表示已经安装成功了：<br/>
<code>$ startx</code></p>
]]></content>
  </entry>
  
</feed>
