<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web开发 | 龍昌博客]]></title>
  <link href="http://www.xefan.com/categories/web开发/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-19T13:35:55+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用Unicorn部署rails应用]]></title>
    <link href="http://www.xefan.com/archives/84142.html"/>
    <updated>2015-04-05T20:47:15+08:00</updated>
    <id>http://www.xefan.com/archives/84142-使用Unicorn部署rails应用</id>
    <content type="html"><![CDATA[<p>玩 rails 也有段时间了，最近研究下怎么部署一个 rails 应用。在几年前的话要部署 rails 应用是件很麻烦的事，
但是近几年出现了一些比较好的工具可以方便的进行 rails 部署。如： Unicorn、thin、Passenger等。</p>

<p>Unicorn 是一个 Rack 应用的HTTP服务器。之前玩 Python 的时候也有一个 Gunicorn ，使用它来部署 Python 的 Web 应用
也很方便，可以参考我之前的那篇文件 <a href="84138.html">《使用gunicorn部署Django》</a> 。</p>

<p>接下来简单分享下使用 Nginx + Unicorn 来部署 rails 的配置。</p>

<h2>安装</h2>

<p>首先安装 unicorn 包： <code>$ gem install unicorn</code></p>

<p>然后编译一下静态文件：</p>

<pre><code>$ RAILS_ENV=production rake assets:clean
$ RAILS_ENV=production rake assets:precompile
</code></pre>

<p>下载配置文件： <code>$ curl -o config/unicorn.rb https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb</code></p>

<p>接着根据情况修改相关配置，如： working_directory、listen 等。
例如我的是需要同时监听网络端口和 sock 文件，那么我的 listen 设置如下：</p>

<pre><code>listen "#{root_path}/tmp/sockets/unicorn.sock", :backlog =&gt; 64
listen 8081, :tcp_nopush =&gt; true
</code></pre>

<h2>配置 Nginx</h2>

<p>然后配置 Nginx 的反向代理，以下是我的 Nginx 配置示例：</p>

<pre><code>upstream rails_server {
  server unix:/app_path/tmp/sockets/unicorn.sock fail_timeout=0;
}

server {
  listen 80;
    server_name webserver localhost;

    root /app_path/public;

  try_files $uri $uri @unicorn;

  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://rails_server;
  }

  location ~ /\.ht {
    deny  all;
  }
}
</code></pre>

<h2>启动服务</h2>

<p>配置完成之后，最后启动服务。</p>

<pre><code>$ bundle exec unicorn_rails -c config/unicorn.rb -D -E production
$ sudo service nginx start
</code></pre>

<p>然后再在浏览器中访问试试。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用gunicorn部署Django]]></title>
    <link href="http://www.xefan.com/archives/84138.html"/>
    <updated>2014-12-13T21:03:27+08:00</updated>
    <id>http://www.xefan.com/archives/84138-使用gunicorn部署Django</id>
    <content type="html"><![CDATA[<p><a href="http://gunicorn.org/">Gunicorn</a> 是 Python的 一个 WSGI HTTP服务器，根据它的介绍说是它来自于 Ruby 的 Unicorn。可以方便的部署 Python 的 Web 程序，而且本身支持多种 Python 的框架，如 Django、Paster等。</p>

<p>通过介绍来看貌似很不错的样子，只可惜我现在不玩 Python 了，于是就简单体验一下。</p>

<h2>简单应用</h2>

<p>首先是安装，这个可以直接使用 <code>pip</code> 来完成：</p>

<pre><code>$ pip install gunicorn
</code></pre>

<p>然后再根据官方文档的介绍部署一个简单的例子试试：</p>

<pre><code>$ cd examples
$ cat test.py
# -*- coding: utf-8 -
#
# This file is part of gunicorn released under the MIT license.
# See the NOTICE for more information.

def app(environ, start_response):
    """Simplest possible application object"""
    data = 'Hello, World!\n'
    status = '200 OK'
    response_headers = [
        ('Content-type','text/plain'),
        ('Content-Length', str(len(data)))
    ]
    start_response(status, response_headers)
    return iter([data])

$ gunicorn -b 0.0.0.0:8000 --workers=2 test:app
</code></pre>

<p>好的，现在程序运行起来了，可以访问 <a href="http://localhost:8000">http://localhost:8000</a> 看下效果。</p>

<p>gunicorn 也可以通过配置文件来设置一些内容， 一个配置文件是一个 python 脚本，格式类似 <code>.ini</code> 。通过 <code>-c</code> 参数指定要使用的配置文件。如：</p>

<pre><code># config.ini
bind = ["0.0.0.0:8000", "unix:///tmp/gunicorn.sock"]
workers = 3 
</code></pre>

<p>gunicorn 还能与 Django 和 Paster 应用集成：</p>

<pre><code>$ gunicorn --env DJANGO_SETTINGS_MODULE=myproject.settings myproject.wsgi:application
$ gunicorn --paste development.ini -b :8080 --chdir /path/to/project
</code></pre>

<h2>与 Nginx 部署</h2>

<p>gunicorn 本身也是一个 WSGI 应用，可以与 Nginx 一同使用。
以下是 Nginx + Gunicorn 部署 Django 的事例， Nginx 配置如下：</p>

<pre><code># nginx.conf
http {
    include mime.types;
    default_type application/octet-stream;
    access_log /tmp/nginx.access.log combined;
    sendfile on;

    upstream app_server {
        server unix:/tmp/gunicorn.sock fail_timeout=0;
        # For a TCP configuration:
        # server 192.168.0.7:8000 fail_timeout=0;
    }

    server {
        listen 80 default;
        client_max_body_size 4G;
        server_name _;

        keepalive_timeout 5;

        # path for static files
        root /path/to/app/current/public;

        location / {
            # checks for static file, if not found proxy to app
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_redirect off;

            proxy_pass   http://app_server;
        }

        error_page 500 502 503 504 /500.html;
        location = /500.html {
            root /path/to/app/current/public;
        }
    }
}
</code></pre>

<p>Gunicorn 的配置文件：</p>

<pre><code># gunicorn.ini
import os

bind = ["0.0.0.0:8000", "unix:///tmp/gunicorn.sock"]
workers = 3
chdir = os.path.dirname(os.path.realpath(__file__))
raw_env = ["DJANGO_SETTINGS_MODULE=app.settings"]
accesslog = "/tmp/gunicorn-access.log"
errorlog = "/tmp/gunicorn.log"
daemon = True
pidfile = "/tmp/gunicorn.pid"
</code></pre>

<p>运行：</p>

<pre><code>$ gunicorn -c gunicorn.ini myproject.wsgi:application
$ service nginx start
</code></pre>

<h2>其他内容</h2>

<p>与 WSGI 应用一样，如果之后配置有改动可以向 gunicorn 服务进程发送 <code>HUP</code> 信号让其重新加载配置：</p>

<pre><code>$ kill -s HUP &lt;pid&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx + Uwsgi + Django环境配置]]></title>
    <link href="http://www.xefan.com/archives/84135.html"/>
    <updated>2014-11-11T21:02:17+08:00</updated>
    <id>http://www.xefan.com/archives/84135-Nginx+uwsgi+Django环境配置</id>
    <content type="html"><![CDATA[<p>有段时间没折腾 Django 了，又有点生疏了。最近又部署了一下 Django 的环境，顺便作个笔记以便之后查阅。</p>

<p>首先安装 nginx、uwsgi 以及 uwsgi 的 python 插件。</p>

<p>然后新建一个 uwsgi 的配置文件：</p>

<pre><code>[uwsgi]
uid = www-data
chdir = /repo/django-blog
virtualenv = /repo/django-blog/pyenv2.7/    # python虚拟环境，没有可以不设置
env = DJANGO_SETTINGS_MODULE=blog.settings
module = blog.wsgi:application
master = true
plugin = python
pidfile = /tmp/blog-master.pid
socket = /tmp/blog.sock
enable-threads = true
post-buffering=1024000
post-buffering-busize=655360
</code></pre>

<p>这里我们的 Django 项目代码位于 <code>/repo/django-blog</code> ，项目的配置文件为： <code>blog/settings.py</code> 。</p>

<p><code>virtualenv</code> 项表明我们使用的是 <code>virtualenv</code> 环境，也可以直接系统的 python 环境。不过还是建议使用虚拟环境，以免软件包版本冲突。</p>

<p><code>post-buffering</code> 和 <code>post-buffering-busize</code> 这两项设置了 POST 请求时缓冲区的大小，该值可根据自己的情况进行调整。之前遇到过由于缓冲区不足导致返回的内容不完整。</p>

<p>再安装对应的 python 依赖包，然后运行 uwsgi 服务。</p>

<p>接着修改 nginx 的配置：</p>

<pre><code>server {
  listen 80;
  server_name localhost;

  client_max_body_size 50m;

  access_log /var/log/nginx/blog-access.log;
  error_log /var/log/nginx/blog-error.log;

  location / {
    uwsgi_pass unix:///tmp/blog.sock;
    include uwsgi_params;
  }

  location /static {
    alias /repo/django-blog/static/;
  }
}
</code></pre>

<p>这个内容比较简单， <code>client_max_body_size</code> 项是用于设置 http 请求的 body 最大大小。如果你的程序中有文件上传的，那么就需要根据自身情况来设置允许上传文件的最大值。</p>

<p>最后再启动 nginx 服务。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx + Php + FastCGI配置]]></title>
    <link href="http://www.xefan.com/archives/84121.html"/>
    <updated>2014-08-01T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84121-nginx + php + FastCGI配置</id>
    <content type="html"><![CDATA[<p>最近在弄PHP，于是乎把配置过程作一个笔记以免忘了。</p>


<h2>PHP安装、配置</h2>


<p>我是通过源代码编译的形式进行安装的，基本步骤如下：</p>


<pre><code>$ tar xf php-5.5.12.tar.bz2
$ cd php-5.5.12
$ './configure'  '--prefix=/opt/myphp' '--with-mysql' '--enable-safe-mode' '--enable-ftp' '--enable-zip' '--with-jpeg-dir' '--with-bz2' '--with-png-dir' '--with-freetype-dir' '--with-iconv' '--with-libxml-dir' '--with-xmlrpc' '--with-zlib-dir' '--with-gd' '--enable-gd-native-ttf' '--with-curl' '--with-gettext' '--with-pear' '--enable-fpm' '--enable-fastcgi' '--with-ncurses' '--with-mcrypt' '--with-mhash' '--with-openssl' '--with-pcre-dir' '--enable-pdo' '--enable-phar' '--enable-json' '--enable-mbstring' '--with-pdo-mysql' '--with-pdo-sqlite' '--with-readline' '--enable-bcmath'
$ make
$ sudo make install
</code></pre>




<p>安装完成之后进入安装目录修改配置文件 lib/php.ini (没有则创建)，添加时区设置：</p>


<pre><code>date.timezone=Asia/Shanghai
</code></pre>




<p>然后运行PHP的FastCGI服务：</p>


<pre><code>./bin/php-cgi -b 9000
</code></pre>




<h2>nginx配置</h2>


<p>nginx可以直接从仓库进行安装：</p>


<pre><code>sudo pacman -S nginx
</code></pre>




<p>或者：</p>


<pre><code>sudo apt-get install nginx
</code></pre>




<p>安装完成之后修改配置，添加一条新的虚拟主机：</p>


<pre><code>server {
    listen 8000;
    server_name localhost;

    root /var/www;

    location / {
        index index.php;
    }

    location ~ \.php$ {
        fastcgi_pass   127.0.0.1:9000;
        fastcgi_index  index.php;  
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include        fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME  /var/www/$fastcgi_script_name;
    }

}
</code></pre>




<p>然后再创建文件 /var/www/index.php</p>


<pre><code>&lt;?php
  phpinfo();
?&gt;
</code></pre>




<p>现在通过浏览器访问 http://127.0.0.1:8000/ 应该就可以看到效果了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack开发简介]]></title>
    <link href="http://www.xefan.com/archives/84103.html"/>
    <updated>2014-05-02T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84103-Rack开发简介</id>
    <content type="html"><![CDATA[<p>Rack是Ruby应用与web服务器之间的一个接口，它在服务器与应用程序之间作为中间件，可以对用户的请求和程序的返回数据进行处理。现在几乎所有主流的Ruby web框架都是支持Rack接口的。</p>


<p>Rack与Python的wsgi很相似，在它的规格书（http://rack.rubyforge.org/doc/SPEC.html）中也说道它采用了WSGI的一些内容。</p>


<h2>开始</h2>


<p>首先安装Rack:</p>


<pre><code>[sudo] gem install rack
</code></pre>


<p>然后通过一个简单的例子来讲解。</p>


<pre><code>require "rack"
rack_app = lambda{|env| [200, {}, ["Hello World!"]]}
Rack::Handler::WEBrick.run rack_app, :Port =&gt; 3000
</code></pre>


<p>执行上述代码，然后访问 http://127.0.0.1:3000 会看到 &#8220;Hello World!&#8221;。</p>


<p>上面代码中的rack_app即是一个Rack应用。Rack应用除了lambda之外也还可以使用其他对象，只要满足以下条件即可：<br>
  * 可响应call方法的对象；<br>
  * 接收一个参数rack环境 environment 。它是一个散列表，包含了CGI的信息和rack的一些变量；<br>
  * 返回一个有三个值的数组，第一个值为返回状态 status；第二个值为返回头 headers，也是一个散列表；第三个值为返回正文 body，它必须是一个可响应each方法并生成字符串的对象，例如字符串数组。</p>


<p>WEBrick是Handler的一种。Handler用于将web服务器与Rack连接。使用 Rack::Handler.constants 可以查看Rack包含的所有Handler。</p>


<h2>请求/Request</h2>


<p>在Rack应用中可以直接操作env参数来访问请求信息，但是这种方法不太方便。对于这种操作Rack::Request对象提供了方便的接口。</p>


<pre><code>request = Rack::Request.new env
</code></pre>


<p>创建request对象时传入env参数。</p>


<h2>响应/Response</h2>


<p>Rack应用的返回值是一个有三个值的数组，包含了返回状态、返回头和返回正文。对于简单的程序手动构建数组还行，如果是复杂的程序则要考虑自动构建了。<br>
同样的可以使用Rack::Request对象来创建返回数据。</p>


<pre><code>response = Rack::Response.new
response.finish
</code></pre>


<p>内容填充完之后调用response对象的finish方法生成符合Rack规范的数组对象。</p>

]]></content>
  </entry>
  
</feed>
