<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Windows | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/windows/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2016-03-17T17:27:04+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows下静态编译Qt4]]></title>
    <link href="http://www.xefan.com/archives/83668.html"/>
    <updated>2011-12-29T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83668-Windows下静态编译Qt4</id>
    <content type="html"><![CDATA[<p>既然是静态编译，那就要编译出来的程序不信赖于任何dll文件。<br/>
首先下载qt-win-opensource-4.7.4-mingw.exe： <a href="http://get.qt.nokia.com/qt/source/qt-win-opensource-4.7.4-mingw.exe">http://get.qt.nokia.com/qt/source/qt-win-opensource-4.7.4-mingw.exe</a> 和MinGW-gcc440_1.zip： <a href="http://get.qt.nokia.com/misc/MinGW-gcc440_1.zip">http://get.qt.nokia.com/misc/MinGW-gcc440_1.zip</a></p>

<p>然后依次解压MinGW-gcc440_1.zip、安装qt-win-opensource-4.7.4-mingw.exe。记得要将gcc的目录和qt的目录添加到环境变量中。</p>

<p>然后打开DOS窗口并切换到Qt的目录（比如我的是D:\Qt\4.7.4），再设置两个变量<br/>
<em>set QTDIR=D:\Qt\4.7.4</em><br/>
<em> set QMAKESPEC=win32-g++</em></p>

<p>再编辑D:\Qt\4.7.4\mkspecs\win32-g++\qmake.conf文件（最好先备份），改两处：<br/>
<em>QMAKE_LFLAGS = -enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc</em><br/>
修改为<br/>
<em>QMAKE_LFLAGS = <span style="color: #ff0000;">-static</span> -enable-stdcall-fixup -Wl,-enable-auto-import -Wl,-enable-runtime-pseudo-reloc</em><br/>
再将<br/>
<em>QMAKE_LFLAGS_DLL = -shared</em><br/>
修改为<br/>
<em>QMAKE_LFLAGS_DLL = -static</em></p>

<p>再执行命令：<br/>
configure -platform win32-g++ <span style="color: #ff0000;">-release</span> -opensource <span style="color: #ff0000;">-static</span> -fast -qt-sql-sqlite -plugin-sql-sqlite -qt-zlib -qt-gif -qt-libpng -qt-libmng -qt-libtiff -qt-libjpeg -no-webkit -nomake examples -nomake docs -nomake demos</p>

<p>如果有提问是否遵守LGPL协议，选y。配置完成后，最后两句是这样的：<br/>
Qt is now configured for building. Just run mingw32-make.<br/>
To reconfigure, run mingw32-make confclean and configure.</p>

<p>cd src<br/>
mingw32-make -i -k</p>

<p>注意：我们只在在Qt子目录src里运行make。不要在整个qt库的大目录下运行make。只在src目录make，这样只编译核心的Qt库和一些插件，节省时间，而且有核心Qt库就够用了。<br/>
如果在D:\Qt\4.7.4\ 整个大目录下运行make，那么make还会去重新编译生成tools目录下的代码，重新做工具程序，像assistant.exe、designer.exe、linguist.exe、qmlviewer.exe等等（生成后全在bin目录）。这些工具使用静态库生成后巨大无比。这些工具程序不管是静态链接还是动态链接生成的，对我们编程压根没影响，都一样用。</p>

<p>好了，接下来就是漫长的等待。2个多小时左右就应该可以编译完成了。<br/>
此时再用Qt编译生成的可执行文件不用再信赖Qt的动态库了,但是文件比较大随便一个都是10M以上，而且如果使用的是从qt官网下载的MinGW-gcc编译生成的可执行文件还是会信赖mingwm10.dll动态库。这个只需换一个版本的编译器即可，我用的是这个： <a href="http://115.com/file/dn3fkn1g">http://115.com/file/dn3fkn1g</a></p>

<p>如果嫌这个过程太麻烦可以直接下载我编译好的静态库来使用：<br/>
Qt4.7.4_Win32静态库.part1.rar： <a href="http://115.com/file/dn3zwayy  ">http://115.com/file/dn3zwayy  </a>
Qt4.7.4_Win32静态库.part2.rar： <a href="http://115.com/file/dn3zwa9g  ">http://115.com/file/dn3zwa9g  </a>
这个是完整版的，解压下来有2G多。如果觉得太大了可以下载精简版：<br/>
Qt4.7.4_Win32静态库精简版.rar： <a href="http://115.com/file/bhy7bat6  ">http://115.com/file/bhy7bat6  </a>
精简版只保留了编译时需要的库文件和qmake等必要的工具，解压下来有500M左右。<br/>
注意：只有解压到D盘根目录下才能使用<br/>
编译器用的是mingw-7.2.exe： <a href="http://115.com/file/dn3fkn1g">http://115.com/file/dn3fkn1g</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下静态编译win32的GTK程序]]></title>
    <link href="http://www.xefan.com/archives/83665.html"/>
    <updated>2011-11-27T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83665-Linux下静态编译win32的GTK程序</id>
    <content type="html"><![CDATA[<p>首先感谢hangyu网友分享的GTK静态库。<br/>
原帖地址：<a href="http://forum.ubuntu.org.cn/viewtopic.php?f=162&amp;amp;t=354286">http://forum.ubuntu.org.cn/viewtopic.php?f=162&amp;amp;t=354286</a> <br>
下载地址：<a href="http://code.google.com/p/static-gtk2-mingw32/">http://code.google.com/p/static-gtk2-mingw32/</a></p>

<p>先说一下在Windows下编译的方法。</p>

<p>解压文件，然后进入解压后的bin目录执行命令：<br/>
<em>pkg-config.exe &ndash;libs &ndash;cflags &ldquo;gtk+-2.0&rdquo;</em><br/>
如果出现以下错误<br/>
Package gtk+-2.0 was not found in the pkg-config search path.<br/>
Perhaps you should add the directory containing `gtk+-2.0.pc&#8217;<br/>
to the PKG_CONFIG_PATH environment variable<br/>
No package &lsquo;gtk+-2.0&rsquo; found<br/>
则先执行命令：<em>set PKG_CONFIG_PATH=你的解压路径\lib\pkgconfig</em> 设置PKG_CONFIG_PATH环境变量</p>

<p>我得到的结果是：<br/>
-mms-bitfields -IE:/Dev-Cpp/gtk+-2.0/include/gtk-2.0 -IE:/Dev-Cpp/gtk+-2.0/lib/gtk-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/atk-1.0 -IE:/Dev-Cpp/gtk+-2.0/include/cairo -IE:/Dev-Cpp/gtk+-2.0/include/gdk-pixbuf-2.0 -IE:/Dev-Cpp/gtk+-2.0/include/pango-1.0 -IE:/Dev-Cpp/gtk+-2.0/include/glib-2.0 -IE:/Dev-Cpp/gtk+-2.0/lib/glib-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/pixman-1 -IE:/Dev-Cpp/gtk+-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/freetype2 -I/gtk-dev/include/libpng14 -LE:/Dev-Cpp/gtk+-2.0/lib -L/gtk-dev/lib -lgtk-win32-2.0 -lgdk-win32-2.0 -limm32 -lshell32 -luuid -latk-1.0 -lpangocairo-1.0 -lgio-2.0 -lshlwapi -ldnsapi -lgdk_pixbuf-2.0 -ltiff -ljpeg -ljasper -lpangoft2-1.0 -lpangowin32-1.0 -lusp10 -lfontconfig -lexpat -lpango-1.0 -lcairo -lpixman-1 -lfreetype -lmsimg32 -lgdi32 -lpng -lz -lm -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lglib-2.0 -lintl -liconv -lws2_32 -lole32</p>

<p>记得保存这个结果，作为编译时的参数在后面要用到。<br/>
然后编译一个程序试试，将以下代码保存为test.c文件。</p>

<pre><code class="c">#include &lt;gtk/gtk.h&gt;
int main(int argc,char *argv[]){
    GtkWidget *window, *label;
    gtk_init(&amp;argc,&amp;argv);
    window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
    gtk_window_set_title(GTK_WINDOW(window),"Hellow World");
    g_signal_connect(G_OBJECT(window), "destroy", G_CALLBACK(gtk_main_quit), NULL);
    label = gtk_label_new("龙昌博客:http://www.xefan.com");
    gtk_container_add (GTK_CONTAINER (window), label);
    gtk_widget_show_all(window);
    gtk_main();
    return 0;
}
</code></pre>

<p>执行命令进行编译：<br/>
gcc -o test.exe test.c -mms-bitfields -IE:/Dev-Cpp/gtk+-2.0/include/gtk-2.0 -IE:/Dev-Cpp/gtk+-2.0/lib/gtk-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/atk-1.0 -IE:/Dev-Cpp/gtk+-2.0/include/cairo -IE:/Dev-Cpp/gtk+-2.0/include/gdk-pixbuf-2.0 -IE:/Dev-Cpp/gtk+-2.0/include/pango-1.0 -IE:/Dev-Cpp/gtk+-2.0/include/glib-2.0 -IE:/Dev-Cpp/gtk+-2.0/lib/glib-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/pixman-1 -IE:/Dev-Cpp/gtk+-2.0/include -IE:/Dev-Cpp/gtk+-2.0/include/freetype2 -I/gtk-dev/include/libpng14 -LE:/Dev-Cpp/gtk+-2.0/lib -L/gtk-dev/lib -lgtk-win32-2.0 -lgdk-win32-2.0 -limm32 -lshell32 -luuid -latk-1.0 -lpangocairo-1.0 -lgio-2.0 -lshlwapi -ldnsapi -lgdk_pixbuf-2.0 -ltiff -ljpeg -ljasper -lpangoft2-1.0 -lpangowin32-1.0 -lusp10 -lfontconfig -lexpat -lpango-1.0 -lcairo -lpixman-1 -lfreetype -lmsimg32 -lgdi32 -lpng -lz -lm -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lglib-2.0 -lintl -liconv -lws2_32 -lole32</p>

<p>如果不出错的话则生成一个test.exe的可执行文件。<br/>
如果没有gcc的话，可以下载安装一个MinGW程序，我之前用MinGW的gcc 4.4.0版本来编译结果出错了，然后换了个4.6版本的才能顺利编译，下载地址：<a href="http://nuwen.net/mingw.html">http://nuwen.net/mingw.html</a></p>

<p>然后再介绍下在Linux下交叉编译的方法。</p>

<p>前一篇文章介绍了在Linux下交叉编译Windows程序的方法。现在只需把上面的参数的路径改下即可。</p>

<p>我的Windows的E盘在Linux下挂载到/mnt/Win_E ，再用上面的程序测试，执行命令：<br/>
i486-mingw32-gcc -o test.exe test.c -mms-bitfields -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/gtk-2.0 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/lib/gtk-2.0/include -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/atk-1.0 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/cairo -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/gdk-pixbuf-2.0 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/pango-1.0 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/glib-2.0 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/lib/glib-2.0/include -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/pixman-1 -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include -I/mnt/Win_E/Dev-Cpp/gtk+-2.0/include/freetype2 -I/gtk-dev/include/libpng14  -L/mnt/Win_E/Dev-Cpp/gtk+-2.0/lib -L/gtk-dev/lib -lgtk-win32-2.0 -lgdk-win32-2.0 -limm32 -lshell32 -luuid -latk-1.0 -lpangocairo-1.0 -lgio-2.0 -lshlwapi -ldnsapi -lgdk_pixbuf-2.0 -ltiff -ljpeg -ljasper -lpangoft2-1.0 -lpangowin32-1.0 -lusp10 -lfontconfig -lexpat -lpango-1.0 -lcairo -lpixman-1 -lfreetype -lmsimg32 -lgdi32 -lpng -lz -lm -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lglib-2.0 -lintl -liconv -lws2_32 -lole32</p>

<p>然后生成 test.exe文件，可以用wine来测试下是否可用。</p>

<p>这个生成的文件好像有点大了，随便一个都是25M以上。使用命令：<br/>
i486-mingw32-strip hellow.exe<br/>
一下子可以减到7M左右。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux下交叉编译windows程序]]></title>
    <link href="http://www.xefan.com/archives/83663.html"/>
    <updated>2011-11-25T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83663-linux下交叉编译windows程序</id>
    <content type="html"><![CDATA[<p>有时候需要编写在Windows下运行的程序，但是又不想切换到Windows下来编译，于是就想在Linux下来编译Windows下运行的exe文件。</p>

<p>这个需要先安装mingw32交叉编译工具。<br/>
ubuntu下使用命令：sudo apt-get install mingw32进行安装，<br/>
Arch Linux下使用命令：sudo pacman -S mingw32-binutils mingw32-gcc mingw32-pthreads mingw32-runtime mingw32-w32api</p>

<p>安装完后测试一下效果。<br/>
将以下代码保存为mingw32_test.c文件。</p>

<pre><code class="c">int main(int argc, char *argv)
{
    printf("Windows Compiler Test\nhttp://www.xefan.com\n");
    return 0;
}
</code></pre>

<p>然后执行命令：</p>

<pre><code>[lcj@lcj C]$ i486-mingw32-gcc -o mingw32_test.exe mingw32_test.c
mingw32_test.c: In function 'main':
mingw32_test.c:3:5: warning: incompatible implicit declaration of built-in function 'printf' [enabled by default]
[lcj@lcj C]$ wine mingw32_test.exe
Windows Compiler Test
http://www.xefan.com
[lcj@lcj C]$
</code></pre>

<p>经测试在wine下能正常运行，在虚拟机里的WinXP下测试也可正常运行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyGTK for Win32集成安装包]]></title>
    <link href="http://www.xefan.com/archives/83572.html"/>
    <updated>2011-08-08T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83572-PyGTK for Win32集成安装包</id>
    <content type="html"><![CDATA[<p>这个是国外的一强人制作的，支持Python2.5~2.7。
该安装包包含如下内容：</p>

<p>PyGTK 2.17.0 with numpy support</p>

<p>PyGobject 2.21.5</p>

<p>PyCairo 1.8.10</p>

<p>PyGtkspell, PyGTKhtml2, PyGDL 2.25.3</p>

<p>PyGDA 2.29.1</p>

<p>PyGST (Python Gstreamer) 0.10.20</p>

<p>PyWebkitGTK 1.18</p>

<p>PyClutter 1.3.2 with gst and gtk binding</p>

<p>PyGTKGlExt 1.1.0</p>

<p>PyGoocanvas 0.14.1</p>

<p>PyGTKSourceview 2.10.0</p>

<p>PyGTKImageview 1.2.0</p>

<p>PyRSVG 2.30</p>

<p>PyScintilla 1.99</p>

<p>PMing 4.4</p>

<p>Python Poppler 0.12 GPL</p>

<p>VIPSCC 7.24</p>

<p>安装之前请卸载之前的版本。</p>

<p>2011-07-02<br/>
pygtk_aio-2011_win32_installer_py25-27-rev5.exe<br/>
md5:32c0558754ae06e14d5db466037ce174<br/>
下载地址： <a href="http://u.115.com/file/aqzkqxd3">http://u.115.com/file/aqzkqxd3</a></p>

<p>2011-03-30<br/>
pygtk_aio-2011_win32_installer_py25-27-rev4.exe<br/>
md5:eb80322f7da800196cb77d79d7e7d6a2<br/>
下载地址：<a href="http://u.115.com/file/clgslsma">http://u.115.com/file/clgslsma</a></p>

<p>pygtk_aio-2011_win32_installer-rev2.exe<br/>
下载地址：<a href="http://u.115.com/file/aqzknhvq">http://u.115.com/file/aqzknhvq</a></p>

<p>原作者博客：<a href="http://opensourcepack.blogspot.com/2011/01/conservative-all-in-one-pygtk-installer.html">http://opensourcepack.blogspot.com/2011/01/conservative-all-in-one-pygtk-installer.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Windows下安装GTK]]></title>
    <link href="http://www.xefan.com/archives/83448.html"/>
    <updated>2010-10-30T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83448-在Windows下安装GTK</id>
    <content type="html"><![CDATA[<p><strong>GTK 简介 </strong></p>

<p>GTK (GIMP Toolkit) 是一套用于创建图形用户界面的工具包。它遵循 LGPL许可证，所以可以用它来开发开源软件、自由软件，甚至是封闭源代码的商业软件，而不用花费任何费用来购买许可证和使用权。当前，GTK 已经被成功地应用到 了大量的自由软件及商业软件中，已经取得了很大的成功。<br/>
GTK是跨平台的，它能够运行于Linux/Unix/Windows/MacOS及嵌入式系统</p>

<p>下面就来介绍一下在Windows一搭建GTK开发环境。<br/>
首先需要先安装C/C++开发环境，GTK支持Cygwin、MSYS、Dec-Cpp、MSVC这几种。这里偶用的是Dev-Cpp。在前一篇文章《在Windows下安装gcc》（ <a href="http://www.xefan.com/archives/83446.html">http://www.xefan.com/archives/83446.html</a> ）介绍了Dev-Cpp的安装。</p>

<p><strong>下载、安装GTK</strong></p>

<p>下载地址：<a href="http://gladewin32.sourceforge.net/">http://gladewin32.sourceforge.net/</a></p>

<p>由于我们是用于开发，所以就选择下载<strong><em>Gtk+ 2.12.9 Development Environment Revision 2</em></strong>这个。下载完后安装gtk-dev-2.12.9-win32-2.exe，安装过程全部按照默然的就可以了，留意一下的是选择IDE的时候确定一下是Dev-Cpp就可以了。安装完毕后系统环境变量和Dev-Cpp的目录设置应该都已经设置好了。<br/>
1、查看系统环境变量：右键单击“我的电脑”–&gt;“属性”–&gt;“高级”–&gt;“环境变量”–&gt;“系统变量”，可以看到Path增加了“%GTK_BASEPATH%bin”。</p>

<p>2、查看Dev-Cpp的目录设置：“工具”–&gt;“编译器选项”–&gt;“目录”，选择“库”可以看到“C:GTKbin”;选择“C包含文件”可以看到“C:GTKINCLUDE”……</p>

<p>接下来我们进行测试一下，打开 Dev-C++，建立一个新的工程，添加一个新文件：</p>

<pre>#include &lt;gtk/gtk.h&gt;
int main(int argc, char *argv[])
{
GtkWidget *window;
gtk_init(&amp;argc, &amp;argv);
window = gtk_window_new(GTK_WINDOW_TOPLEVEL);
gtk_window_set_title(GTK_WINDOW(window), "Hello World");
gtk_widget_show(window);
gtk_main();
return 0 ;
}</pre>


<p>这个时候还不能编译，需要修改工程属性，在&#8221;工程-&gt;工程属性-&gt;参数&#8221; 或 &ldquo;工具-&gt;编译选项&#8221;中的链接器框里面填入：</p>

<ul> -lgtk-win32-2.0 -lgdk-win32-2.0 -latk-1.0 -lgdk_pixbuf-2.0 -lpangowin32-1.0 -lgdi32 -lpango-1.0 -lgobject-2.0 -lgmodule-2.0 -lglib-2.0 -lintl -liconv</ul>


<p>在编译选项里面填入：</p>

<ul> -mms-bitfields</ul>


<p>就可以编译通过了。</p>

<p>在运行以后，你会发现出现一个空白窗口，标题为 Hello World。</p>

<p><img class="aligncenter" title="Dev Cpp-GTK" src="http://img208.poco.cn/mypoco/myphoto/20101030/13/5545129120101030135311028.jpg" alt="" width="533" height="446" /></p>
]]></content>
  </entry>
  
</feed>
