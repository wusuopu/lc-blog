<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Js | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/js/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-13T22:56:53+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记1——基础入门]]></title>
    <link href="http://www.xefan.com/archives/84147.html"/>
    <updated>2015-08-13T22:54:04+08:00</updated>
    <id>http://www.xefan.com/archives/84147-AngularJS学习笔记1——基础入门</id>
    <content type="html"><![CDATA[<p>angularjs 是一款前端的 MVVM 框架，目前 2.0 好像也快要发布了。
angularjs 2.0 的理念又变为了 Web 组件，与 1.x 不兼容。
于是这里就把之前 angularjs 1.x 的学习笔记整理一下，作为以后回顾吧。</p>

<p>相关的事例代码可以从 <a href="https://github.com/wusuopu/angularjs-practice">https://github.com/wusuopu/angularjs-practice</a> 获取。</p>

<h2>简单事例</h2>

<p>&#8220;`
&lt;!doctype html>
<html lang="en" ng-app>
<head>
    <meta charset="utf-8">
    <title>基本例子</title>
    <script src="http://www.xefan.com/lib/angular-1.0.4.min.js"></script>
</head>
<body>
  <p>1 + 2 = 1</p>
  <div ng-controller="DemoController">
    <p></p>
  </div>
</body></p>

<script type="text/javascript" charset="utf-8">
  function DemoController($scope){
    $scope.content = "简单的控制器例子";
  }
</script>


<p></html>
&#8220;`</p>

<p>以上是一个最简单的例子。</p>

<pre><code>&lt;html lang="en" ng-app&gt;
</code></pre>

<p>html 的 <code>ng-app</code> 属性表明在该页面中启用 angularjs。</p>

<pre><code>  &lt;p&gt;1 + 2 = 1&lt;/p&gt;
</code></pre>

<p>在页面加载完成之后 angularjs 会解析大括号内的表达式，并进行渲染。</p>

<pre><code>  &lt;div ng-controller="DemoController"&gt;
    &lt;p&gt;&lt;/p&gt;
  &lt;/div&gt;
</code></pre>

<p><code>ng-controller</code> 表示在该标签下定义一个控制器。一个控制器就是一个普通的 js 函数。</p>

<p>&#8220;`</p>

<script type="text/javascript" charset="utf-8">
  function DemoController($scope){
    $scope.content = "简单的控制器例子";
  }
</script>


<p>&#8220;`</p>

<p>这里定义 <code>DemoController</code> 控制器函数，并传入一个 <code>$scope</code> 参数，它是用于表示该控制器的上下文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用nvm进行node多版本管理]]></title>
    <link href="http://www.xefan.com/archives/84039.html"/>
    <updated>2014-01-23T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84039-使用nvm进行node多版本管理</id>
    <content type="html"><![CDATA[<p>nvm与Python的virtualenv和Ruby的rvm类似。<br>
NVM (Node Version Manager，Node多版本管理器)是一个通用的叫法,它目前有许多不同的实现。通常我们说的 nvm 是指 https://github.com/creationix/nvm 或者 https://github.com/visionmedia/n 。这两个工具都是使用shell编写的。</p>


<h2>n</h2>


<p>个人感觉 n 比较简洁些，它就只有一个脚本文件。  </p>


<h3>安装</h3>


<p>如果已经安装了npm的话，可以直接执行命令进行安装n :</p>


<pre><code>$ npm install -g n
</code></pre>


<p>或者是直接获取源代码安装：</p>


<pre><code>$ git clone https://github.com/visionmedia/n.git
$ cd n
$ [sudo] make install
</code></pre>


<h3>使用</h3>


<p>直接运行 n 命令查看所有已安装的版本。</p>


<pre><code>$ n
</code></pre>


<p>运行命令 n <version> 进行安装指定版本的node。 version 可以是 stable(最新稳定版)、latest(最新版)或者具体的版本数字。</p>


<pre><code>$ n stable
install : v0.10.24
mkdir : /usr/local/n/versions/0.10.24
fetch : http://nodejs.org/dist/v0.10.24/node-v0.10.24-linux-x64.tar.gz
</code></pre>


<p>指定的版本将会安装在 /usr/local/n/versions 目录下。</p>


<p>运行命令 n rm <version> 删除已安装指定版本的node。</p>


<p>运行命令 n use <version> 选择使用指定版本的node。</p>


<h2>nvm</h2>


<h3>安装</h3>


<pre><code>$ git clone https://github.com/creationix/nvm.git ~/.nvm
$ source ~/.nvm/nvm.sh
</code></pre>


<h3>使用</h3>


<p>查看已安装的版本：</p>


<pre><code>$ nvm ls
</code></pre>


<p>查看可以安装的版本：</p>


<pre><code>$ nvm ls-remote
</code></pre>


<p>安装指定的版本：</p>


<pre><code>$ nvm install &lt;version&gt;
</code></pre>


<p>指定的版本将会直接安装在 nvm 程序所在的目录下。</p>


<p>删除指定的版本：</p>


<pre><code>$ nvm uninstall &lt;version&gt;
</code></pre>


<p>使用选定的版本：</p>


<pre><code>$ nvm use &lt;version&gt;
</code></pre>

]]></content>
  </entry>
  
</feed>
