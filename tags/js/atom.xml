<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Js | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/js/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-27T13:50:19+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记6——与rails整合]]></title>
    <link href="http://www.xefan.com/archives/84156.html"/>
    <updated>2015-08-27T13:01:33+08:00</updated>
    <id>http://www.xefan.com/archives/84156-AngularJS学习笔记6——与rails整合</id>
    <content type="html"><![CDATA[<p>要在 rails 中使用 angular 直接在页面中引入进行即可，这个倒是不难。
只是在开发过程中突然发现了一个问题，就是 angular 的模板应该如何组织呢。
如果全写成内联模板这个不太好维护，如果是写成单个文件放在 public 目录下也不太妥。
不过好在这个问题已经有人解决了，有 angular-rails-templates 这么一个库：<a href="https://github.com/pitr/angular-rails-templates">https://github.com/pitr/angular-rails-templates</a></p>

<p>首先安装该库：<code>gem 'angular-rails-templates'</code></p>

<p>然后创建目录 <code>app/assets/javascripts/templates</code>，
并在 <code>app/assets/javascripts/application.js</code> 中加载对应的文件：</p>

<pre><code>//= require angular-rails-templates
//= require_tree ./templates
</code></pre>

<p>该目录下的模板文件命名与 rails 的视图命名类似，如： <code>foo.html</code>，<code>foo.html.erb</code>，<code>foo.html.haml</code>,<code>foo.html.slim</code>。</p>

<p>可以参考我的一个例子： <a href="https://github.com/wusuopu/rails-billing">https://github.com/wusuopu/rails-billing</a></p>

<p>这里我是使用 bower 进行安装 angular 的库，首先安装 <code>gem 'bower-rails'</code> 。</p>

<p>然后初始化 bower_rails： <code>rails g bower_rails:initialize</code><br/>
编辑 <code>Bowerfile</code>，添加所需要的依赖包：</p>

<pre><code>asset 'angular'
asset 'angular-route'
asset 'angular-resource'
asset 'angular-mocks'
asset 'angular-flash'
asset 'angular-loading-bar'
asset 'angular-flash-messages'
asset 'angular-translate'
asset 'angular-bootstrap'
asset 'bootstrap-sass-official'
asset 'components-font-awesome'
</code></pre>

<p>再执行命令： <code>rake bower:install</code> 进行安装。</p>

<p>接着编辑 <code>config/initializers/assets.rb</code> 添加配置： <code>Rails.application.config.assets.paths &lt;&lt; Rails.root.join("vendor","assets","bower_components")</code></p>

<p>最后加载依赖文件 <code>app/assets/javascripts/application.js</code>：</p>

<pre><code>//= require angular/angular
//= require angular-route/angular-route
//= require angular-resource/angular-resource
//= require angular-flash-messages/angular-flash
//= require angular-loading-bar/build/loading-bar
//= require angular-translate/angular-translate
//= require angular-bootstrap/ui-bootstrap-tpls
//= require angular-rails-templates
//= require_tree ./templates
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记6——与jQuery、Bootstrap结合]]></title>
    <link href="http://www.xefan.com/archives/84155.html"/>
    <updated>2015-08-24T10:25:28+08:00</updated>
    <id>http://www.xefan.com/archives/84155-AngularJS学习笔记6——与jQuery、Bootstrap结合</id>
    <content type="html"><![CDATA[<h2>jQuery</h2>

<p>如果想要在 angular 内部调用 jQuery 的函数（如 jQuery 的 ajax 功能）比较简单，直接调用 <code>$.ajax</code> 即可。<br/>
但是如果想要在 angular 外部调用其函数就稍微麻烦一点，毕竟这也与 angular 的设计理念不符。</p>

<p>&#8220;`</p>

<div ng-controller="PageController">
  &#8230;
</div>




<p><script>
  var appModule = angular.module(&lsquo;myApp&rsquo;, []);
  appModule.controller(&lsquo;PageController&rsquo;, [&lsquo;$scope&rsquo;, &lsquo;$http&rsquo;, function($scope, $http){
      &hellip;
  }]);
```</p>

<p>例如上个这段代码，如果想要从外部访问 <code>PageController</code> 中的某些内容。则可以先获取 <code>PageController</code> 的上下文对象($scope)：<code>angular.element($('[ng-controller="PageController"]')).scope();</code><br/>
在外部修改了 <code>scope</code> 的某些值时会发现对应的视图并没有更新，这时还需要调用 <code>scope</code> 的 <code>$digest</code> 方法进行同步，或者直接调用 <code>$apply</code> 方法进行操作。</p>

<h2>Bootstrap</h2>

<p>之前使用 angularjs 时遇到了 Bootstrap 的控件不能正常使用了，如 dropdown 组件点击了没有效果。<br/>
经过分析发现是 angularjs 将 Bootstrap 的组件的事件给截获了。</p>

<p>好在有 angular-bootstrap 这么一个组件可以将它们整合在一起。</p>

<p><a href="http://angular-ui.github.io/bootstrap/">http://angular-ui.github.io/bootstrap/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riot.js之初体验]]></title>
    <link href="http://www.xefan.com/archives/84152.html"/>
    <updated>2015-08-21T09:55:14+08:00</updated>
    <id>http://www.xefan.com/archives/84152-Riot.js之初体验</id>
    <content type="html"><![CDATA[<p>Riot(<a href="http://riotjs.com/">http://riotjs.com/</a>)按照官方的介绍，它是一个类似于 React 的微型框架。
压缩之后的文件只有差不多 15K 的大小，相比其他基本上都是上百K大小的框架来说确实是很微型的。</p>

<p>同时它的官方还给出了与 React 和 Polymer 的对比，各位感兴趣可以看看： <a href="http://riotjs.com/compare/">http://riotjs.com/compare/</a></p>

<p>下面通过一个例子来体验一下。</p>

<p>先下载 Riot 库文件： <a href="https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js  ">https://raw.githubusercontent.com/riot/riot/master/riot+compiler.min.js  </a>
然后新建一个文件 <code>index.html</code>，内容如下：</p>

<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;meta name="viewport" content="width=device-width"&gt;
    &lt;title&gt;Tabs exampe&lt;/title&gt;
    &lt;style type="text/css" media="screen"&gt;
      .tabContent__item{
        display:none;
      }
      .tabContent__item.is-active{
        display:block;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;riot-tabs&gt;&lt;/riot-tabs&gt;

    &lt;script src="tabs.tag" type="riot/tag"&gt;&lt;/script&gt;
    &lt;script src="riot+compiler.min.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" charset="utf-8"&gt;
      riot.mount('riot-tabs');
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>接着再创建文件 <code>tabs.tag</code>：</p>

<pre><code>&lt;riot-tabs&gt;
  &lt;h2&gt;Tabs&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li each={ tab, i in tabs } class="tabItem { is-active: parent.isActiveTab(tab.ref) }" onclick={ parent.toggleTab }&gt;{tab.title}&lt;/li&gt;
  &lt;/ul&gt;
  &lt;div class="tabContent"&gt;
    &lt;div each={ tab, i in tabs } class="tabContent__item { is-active: parent.isActiveTab(tab.ref) }"&gt;{tab.content}&lt;/div&gt;
  &lt;/div&gt;

  this.tabs = [
    { title: 'Tab 1', ref: 'tab1', content: "(1) Lorem ipsum dolor" },
    { title: 'Tab 2', ref: 'tab2', content: "(2) Lorem ipsum dolor" },
    { title: 'Tab 3', ref: 'tab3', content: "(3) Lorem ipsum dolor" }
  ]

  this.activeTab = 'tab1'

  isActiveTab(tab) {
    return this.activeTab === tab
  }

  toggleTab(e) {
    this.activeTab = e.item.tab.ref
    return true
  }
&lt;/riot-tabs&gt;
</code></pre>

<p>这个是 javascript 与 html 的混合。当然还可以使用纯 js 的写法，将 <code>tabs.tag</code> 改为 <code>tabs.js</code>：</p>

<pre><code>riot.tag('riot-tabs', '&lt;h2&gt;Tabs&lt;/h2&gt; &lt;ul&gt; &lt;li each="{ tab, i in tabs }" class="tabItem { is-active: parent.isActiveTab(tab.ref) }" onclick="{ parent.toggleTab }"&gt;{tab.title}&lt;/li&gt; &lt;/ul&gt; &lt;div class="tabContent"&gt; &lt;div each="{ tab, i in tabs }" class="tabContent__item { is-active: parent.isActiveTab(tab.ref) }"&gt;{tab.content}&lt;/div&gt; &lt;/div&gt;', function(opts) {

  this.tabs = [
    { title: 'Tab 1', ref: 'tab1', content: "(1) Lorem ipsum dolor" },
    { title: 'Tab 2', ref: 'tab2', content: "(2) Lorem ipsum dolor" },
    { title: 'Tab 3', ref: 'tab3', content: "(3) Lorem ipsum dolor" }
  ];

  this.activeTab = 'tab1';

  this.isActiveTab = function(tab) {
    return this.activeTab === tab;
  }.bind(this);

  this.toggleTab = function(e) {
    this.activeTab = e.item.tab.ref;
    return true;
  }.bind(this);

});
</code></pre>

<p>同时将 <code>index.html</code> 中的 <code>&lt;script src="tabs.tag" type="riot/tag"&gt;&lt;/script&gt;</code> 修改为 <code>&lt;script src="tabs.js" type="riot/tag"&gt;&lt;/script&gt;</code> 。</p>

<p>好了，现在打开浏览器看下效果吧。</p>

<p>体验了一下，感觉它比 angular 之类的框架的学习成本要低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记5——路由]]></title>
    <link href="http://www.xefan.com/archives/84151.html"/>
    <updated>2015-08-20T20:58:53+08:00</updated>
    <id>http://www.xefan.com/archives/84151-AngularJS学习笔记5——路由</id>
    <content type="html"><![CDATA[<p>angularjs 的 <code>ngRoute</code> 模块提供了前端路由的功能。
在 angularjs 1.3 中 route 模块被单独提取了出来，要使用其功能需要将引用进来。</p>

<pre><code>  &lt;script src="http://www.xefan.com/lib/angular-1.3.15.min.js"&gt;&lt;/script&gt;
  &lt;script src="http://www.xefan.com/lib/angular-route-1.3.15.min.js"&gt;&lt;/script&gt;
</code></pre>

<pre><code>var routeApp = angular.module('routeApp', ['ngRoute']);
routeApp.config(['$routeProvider',function ($routeProvider) {
    $routeProvider
    .when('/list', {
      templateUrl: 'list.html',
      controller: 'RouteListCtl'
    })
    .when('/list/:id', {
        templateUrl: 'detail.html',
        controller: 'RouteDetailCtl'
    })
    .otherwise({
      redirectTo: '/list'
    });
}]);
</code></pre>

<p>这里定义了两条路由规则，对应的视图模板分别为 list.html 和 detail.html</p>

<p>视图模板有三种定义方式：<br/>
方法1：编写在单独的文件中，然后 angularjs 通过 ajax 获取其内容；<br/>
方法2：直接在页面中使用 script 标签定义，如： <code>&lt;script type="text/ng-template" id="list.html"&gt; .... &lt;/script&gt;</code>；<br/>
方法3：使用 <code>$templateCache</code> 进行定义，如:<br/>
<code>
routeApp.run(function($templateCache) {
  $templateCache.put('list.html', '...');
});
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记4——依赖注入]]></title>
    <link href="http://www.xefan.com/archives/84150.html"/>
    <updated>2015-08-19T13:33:33+08:00</updated>
    <id>http://www.xefan.com/archives/84150-AngularJS学习笔记4——依赖注入</id>
    <content type="html"><![CDATA[<h2>依赖注入</h2>

<p>之前有遇到过 angularjs 的代码压缩之后就报错了，通过查文档得知是因为 angularjs 是通过变量名来查找相应服务的。
而 js 代码压缩之后变量名就变化了，从而无法找到相应的服务而报错。因此就需要指明依赖服务。</p>

<pre><code>function SomeController($scope, $http) { ... }
</code></pre>

<p>例如以上代码就是定义了 <code>SomeController</code> 这个一个控制器，并依赖 <code>$scope</code> 和 <code>$http</code> 两个服务。
但是当该代码压缩之后，这两个参数名都变化了。因此还需要使用以下代码来指明所需的依赖。</p>

<pre><code>SomeController.$inject = ['$scope', '$http'];
</code></pre>

<p>或者另一个写法：</p>

<pre><code>angular.module('app', [])
       .controller('SomeController', ['$scope', '$http', function($scope, $http){

}]);
</code></pre>

<p>这样就可以保证我们的代码压缩之后也能正常运行了。</p>

<h2>自定义服务</h2>

<p>上面的 <code>$http</code> 服务为我们提供了 ajax 的功能。</p>

<p>需要自定义服务的可以使用 <code>module.factory</code> 方法或者 <code>module.service</code> 方法进行注册服务。
这两个方法稍微有些不同，一般我习惯使用 <code>module.factory</code> 。
然后在需要使用自定义服务的地方，将其添加到依赖列表中即可。</p>
]]></content>
  </entry>
  
</feed>
