<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Js | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/js/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-18T18:37:00+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记3——表单]]></title>
    <link href="http://www.xefan.com/archives/84149.html"/>
    <updated>2015-08-18T18:32:35+08:00</updated>
    <id>http://www.xefan.com/archives/84149-AngularJS学习笔记3——表单</id>
    <content type="html"><![CDATA[<h2>双向绑定</h2>

<p>使用 <code>ngModel</code> 指令将输入框与 model 进行绑定，如： <code>&lt;input type="text" ng-model="text" name="text" /&gt;</code><br/>
当输入框或者 model 的值其中一方改变都会影响另一方。</p>

<h2>表单验证</h2>

<p>之前表单验证都是用的 jquery-validation 这个插件，这需要编写大量的 js 代码用于逻辑控制，
现在改用 angularjs 之后方便了许多，不过还是要编写大量的视图代码。</p>

<p>一个简单的例子： <a href="https://github.com/wusuopu/angularjs-practice/blob/master/static/form/validate.html">https://github.com/wusuopu/angularjs-practice/blob/master/static/form/validate.html</a></p>

<pre><code>    &lt;form action="#" name="user_form" ng-submit="submitForm(user_form.$valid, $event)" novalidate&gt;

        &lt;div class="form-group" ng-class="{'has-error' : user_form.name.$invalid &amp;&amp; user_form.name.$dirty, 'has-success' : user_form.name.$valid}"&gt;
            &lt;label&gt;Name&lt;/label&gt;
            &lt;input type="text" name="name" class="form-control" ng-model="formData.name" required&gt;
            &lt;p ng-show="user_form.name.$invalid &amp;&amp; user_form.name.$dirty" class="help-block"&gt;You name is required.&lt;/p&gt;
        &lt;/div&gt;
    .....
    &lt;/form&gt;
</code></pre>

<p>首先为 form 表单设置 <code>name</code> 属性，并设置 <code>novalidate</code> 属性禁止浏览器使用 HTML5 自带的验证功能。
然后对于需要验证的字段添加相应的验证属性，angularjs 内建的验证规则如下：</p>

<ul>
<li>email</li>
<li>max</li>
<li>maxlength</li>
<li>min</li>
<li>minlength</li>
<li>number</li>
<li>pattern</li>
<li>required</li>
<li>url</li>
<li>date</li>
<li>datetimelocal</li>
<li>time</li>
<li>week</li>
<li>month</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记2——模板]]></title>
    <link href="http://www.xefan.com/archives/84148.html"/>
    <updated>2015-08-14T22:00:21+08:00</updated>
    <id>http://www.xefan.com/archives/84148-AngularJS学习笔记2——模板</id>
    <content type="html"><![CDATA[<h2>ngRepeat</h2>

<p>对于一些需要循环遍历的对象可以使用 <code>ngRepeat</code> 指令。 如：</p>

<pre><code>  &lt;li ng-repeat="msg in messages"&gt;{{$index}} {{msg}}&lt;/li&gt;

  // 对于 messages 数组进行遍历
  $scope.messages =  [
    "第一条消息",
    "第二条消息",
    "第三条消息",
    "第四条消息",
    "第五条消息"
  ];
</code></pre>

<h2>ngSwitch</h2>

<p>使用 <code>ngSwitch</code> 指令在不同条件下显示不同内容。</p>

<p>&#8220;`</p>

<div ng-controller="ExampleController">
  <select ng-model="selection" ng-options="item for item in items">
  </select>
  <code>selection={{selection}}</code>
  <hr/>
  <div class="animate-switch-container"
    ng-switch="selection">
      <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
      <div class="animate-switch" ng-switch-when="home">Home Span</div>
      <div class="animate-switch" ng-switch-default>default</div>
  </div>
</div>




<script type="text/javascript">
angular.module('myApp', []).controller('ExampleController', ['$scope', function($scope) {
  $scope.items = ['settings', 'home', 'other'];
  $scope.selection = $scope.items[0];
}]);
</script>


<p>&#8220;`</p>

<h2>Filter</h2>

<p>使用 <code>filter</code> 指令过滤需要的内容，基本形式： <code>{{ expression | filter }}</code>
如果有用过其他模板引擎的话（如：Jinja）应该很好理解的。</p>

<p>angularjs 提供了一些内置的过滤器：date, json, lowercase, uppercase 等。</p>

<h2>ngIf</h2>

<p>基本形式： <code>&lt;ANY ng-if="expression"&gt; ... &lt;/ANY&gt;</code>
当 <code>expression</code> 的值为真时才会输出该标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS学习笔记1——基础入门]]></title>
    <link href="http://www.xefan.com/archives/84147.html"/>
    <updated>2015-08-13T22:54:04+08:00</updated>
    <id>http://www.xefan.com/archives/84147-AngularJS学习笔记1——基础入门</id>
    <content type="html"><![CDATA[<p>angularjs 是一款前端的 MVVM 框架，目前 2.0 好像也快要发布了。
angularjs 2.0 的理念又变为了 Web 组件，与 1.x 不兼容。
于是这里就把之前 angularjs 1.x 的学习笔记整理一下，作为以后回顾吧。</p>

<p>相关的事例代码可以从 <a href="https://github.com/wusuopu/angularjs-practice">https://github.com/wusuopu/angularjs-practice</a> 获取。</p>

<h2>简单事例</h2>

<p>&#8220;`
&lt;!doctype html>
<html lang="en" ng-app>
<head>
    <meta charset="utf-8">
    <title>基本例子</title>
    <script src="http://www.xefan.com/lib/angular-1.0.4.min.js"></script>
</head>
<body>
  <p>1 + 2 = {{ 1 + 2 }}</p>
  <div ng-controller="DemoController">
    <p>{{content}}</p>
  </div>
</body></p>

<script type="text/javascript" charset="utf-8">
  function DemoController($scope){
    $scope.content = "简单的控制器例子";
  }
</script>


<p></html>
&#8220;`</p>

<p>以上是一个最简单的例子。</p>

<pre><code>&lt;html lang="en" ng-app&gt;
</code></pre>

<p>html 的 <code>ng-app</code> 属性表明在该页面中启用 angularjs。</p>

<pre><code>  &lt;p&gt;1 + 2 = {{ 1 + 2 }}&lt;/p&gt;
</code></pre>

<p>在页面加载完成之后 angularjs 会解析大括号内的表达式，并进行渲染。</p>

<pre><code>  &lt;div ng-controller="DemoController"&gt;
    &lt;p&gt;{{content}}&lt;/p&gt;
  &lt;/div&gt;
</code></pre>

<p><code>ng-controller</code> 表示在该标签下定义一个控制器。一个控制器就是一个普通的 js 函数。</p>

<p>&#8220;`</p>

<script type="text/javascript" charset="utf-8">
  function DemoController($scope){
    $scope.content = "简单的控制器例子";
  }
</script>


<p>&#8220;`</p>

<p>这里定义 <code>DemoController</code> 控制器函数，并传入一个 <code>$scope</code> 参数，它是用于表示该控制器的上下文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用nvm进行node多版本管理]]></title>
    <link href="http://www.xefan.com/archives/84039.html"/>
    <updated>2014-01-23T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84039-使用nvm进行node多版本管理</id>
    <content type="html"><![CDATA[<p>nvm与Python的virtualenv和Ruby的rvm类似。<br>
NVM (Node Version Manager，Node多版本管理器)是一个通用的叫法,它目前有许多不同的实现。通常我们说的 nvm 是指 https://github.com/creationix/nvm 或者 https://github.com/visionmedia/n 。这两个工具都是使用shell编写的。</p>


<h2>n</h2>


<p>个人感觉 n 比较简洁些，它就只有一个脚本文件。  </p>


<h3>安装</h3>


<p>如果已经安装了npm的话，可以直接执行命令进行安装n :</p>


<pre><code>$ npm install -g n
</code></pre>


<p>或者是直接获取源代码安装：</p>


<pre><code>$ git clone https://github.com/visionmedia/n.git
$ cd n
$ [sudo] make install
</code></pre>


<h3>使用</h3>


<p>直接运行 n 命令查看所有已安装的版本。</p>


<pre><code>$ n
</code></pre>


<p>运行命令 n <version> 进行安装指定版本的node。 version 可以是 stable(最新稳定版)、latest(最新版)或者具体的版本数字。</p>


<pre><code>$ n stable
install : v0.10.24
mkdir : /usr/local/n/versions/0.10.24
fetch : http://nodejs.org/dist/v0.10.24/node-v0.10.24-linux-x64.tar.gz
</code></pre>


<p>指定的版本将会安装在 /usr/local/n/versions 目录下。</p>


<p>运行命令 n rm <version> 删除已安装指定版本的node。</p>


<p>运行命令 n use <version> 选择使用指定版本的node。</p>


<h2>nvm</h2>


<h3>安装</h3>


<pre><code>$ git clone https://github.com/creationix/nvm.git ~/.nvm
$ source ~/.nvm/nvm.sh
</code></pre>


<h3>使用</h3>


<p>查看已安装的版本：</p>


<pre><code>$ nvm ls
</code></pre>


<p>查看可以安装的版本：</p>


<pre><code>$ nvm ls-remote
</code></pre>


<p>安装指定的版本：</p>


<pre><code>$ nvm install &lt;version&gt;
</code></pre>


<p>指定的版本将会直接安装在 nvm 程序所在的目录下。</p>


<p>删除指定的版本：</p>


<pre><code>$ nvm uninstall &lt;version&gt;
</code></pre>


<p>使用选定的版本：</p>


<pre><code>$ nvm use &lt;version&gt;
</code></pre>

]]></content>
  </entry>
  
</feed>
