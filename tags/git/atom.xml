<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Git | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/git/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-24T10:28:02+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[自动生成.gitignore文件]]></title>
    <link href="http://www.xefan.com/archives/84048.html"/>
    <updated>2014-03-07T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84048-自动生成.gitignore文件</id>
    <content type="html"><![CDATA[<p>.gitignore文件是用于对git进行设置，让其忽略对某些文件的跟踪。</p>


<p>最近发现每创建一个新的仓库都要把.gitignore文件重新写一遍，甚是麻烦。于是就想能否自动生成.gitignore文件，这样的话就比较方便。最后找到了 gitignore.io 这个网站，它可以根据需求生成相应的.gitignore文件。比较你是用vim编辑器编写python代码，则输入vim  python就会生成对应vim和python的gitignore文件了。</p>


<p>为了方便使用我编写了一个shell脚本。从 https://gist.github.com/wusuopu/9408486 下载代码，保存为mkgitignore，并加上执行权限。然后执行如下命令生成.gitignore文件。</p>


<pre><code>$ mkgitignore vim,python
$ mkgitignore vim,python .gitignore
</code></pre>


<p>第一条命令是直接将结果输出到终端，第二条命令是将结果输出到.gitignore文件中。</p>


<p>最后补充一个git的小知识：<br>
如果想要在所有的项目中都忽略掉某些文件的话，那么可以设置一个全局的gitignore。执行如下命令：</p>


<pre><code>$ git config --global core.excludesfile ~/.gitignore
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分享两个vim的git插件]]></title>
    <link href="http://www.xefan.com/archives/83877.html"/>
    <updated>2013-08-11T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83877-分享两个vim的git插件</id>
    <content type="html"><![CDATA[<p>1.vim-git</p>

<p>我只是简单体验发一下，个人觉得这个就是用vim的命令把git的命令包装了一下，还不如直接在终端下操作方便。</p>

<p>常用命令<br/>
:GitAdd<br/>
:GitCommit<br/>
:GitStatus<br/>
:GitLog<br/>
:GitCheckout<br/>
:GitDiff<br/>
:GitPull<br/>
:GitPush</p>

<p>快捷键<br/>
&lt;Leader&gt;gd 等同于 :GitDiff<br/>
&lt;Leader&gt;gD 等同于 :GitDiff —cached<br/>
&lt;Leader&gt;gs 等同于 :GitStatus<br/>
&lt;Leader&gt;gl 等同于 :GitLog<br/>
&lt;Leader&gt;ga 等同于 :GitAdd<br/>
&lt;Leader&gt;gA 等同于 :GitAdd &lt;cfile&gt;<br/>
&lt;Leader&gt;gc 等同于 :GitCommit</p>

<p>下载地址：<a href="https://github.com/motemen/git-vim.git">https://github.com/motemen/git-vim.git</a></p>

<p>2.vim-fugitive</p>

<p>感觉这个比较强大，尤其是配合vimdiff来查看文件的发动非常方便。
它的说明文档介绍到如果你的vim版本低于7.2，那么建议同时也把vim-git安装上。</p>

<p>下载地址：<a href="https://github.com/tpope/vim-fugitive.git">https://github.com/tpope/vim-fugitive.git</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用VIM管理git]]></title>
    <link href="http://www.xefan.com/archives/83786.html"/>
    <updated>2012-09-14T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83786-使用VIM管理git</id>
    <content type="html"><![CDATA[<p>之前看到在emacs下有管理git的插件，于是就想在vim下也有类似的没。网上搜了下，找到了Git-Vim，可以在VIM下管理git。
项目地址为: <a href="http://github.com/motemen/git-vim">http://github.com/motemen/git-vim</a></p>

<p>安装了之后就可以直接在vim里输入命令管理git了，如:GitStatus就是git status，快捷键是&lt;Leader&gt;gs。（&lt;Leader&gt;默认为\，你也可以自己修改）</p>

<p>更多的用法可以看它的README</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常用命令]]></title>
    <link href="http://www.xefan.com/archives/83706.html"/>
    <updated>2012-03-13T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83706-Git常用命令</id>
    <content type="html"><![CDATA[<p>最近正在看Git，做个笔记，把常用的命令记下。</p>

<p>git init 初始化<br/>
git add &lt;file&gt; 将file添加到跟踪<br/>
git commit -m &ldquo;..&rdquo; 将修改提交到库，备注为&#8221;&hellip;&ldquo;<br/>
git commit -a -m &rdquo;&hellip;&ldquo; 将所有跟踪文件全部提交<br/>
git status 查看状态<br/>
git rm &lt;file&gt; 移除文件，之后再commit提交<br/>
git mv &lt;file1&gt; &lt;file2&gt; 移动文件，之后再commit提交</p>

<p>git log 查看记录<br/>
git commit &ndash;amend 修改最后一次提交<br/>
git remote -v 查看远程仓库，-v显示地址<br/>
git remote add &lt;shortname&gt; &lt;url&gt; 添加远程仓库，别名为shortname<br/>
git fetch &lt;remote-name&gt; 从远程仓库抓取数据<br/>
git push &lt;remote-name&gt; &lt;branch&gt; 从本地branch推送到远程remote</p>

<p>git tag 显示所有标签<br/>
git tag -l &lt;reg&gt; 按照reg表达式来搜索标签<br/>
git tag -a &lt;name&gt; -m &ldquo;..&rdquo; 创建标签<br/>
git tag -a &lt;name&gt; &lt;hash&gt; 为某次提交打标签<br/>
git push remote —tags 推送本地所有标签</p>

<p>git branch &lt;name&gt; 从当前分支新建一个分支<br/>
git checkout &lt;name&gt; 切换到name分支<br/>
git checkout -b &lt;name&gt; 新建并切换到name分支<br/>
Gti merge &lt;name&gt; 将name分支合并到当前分支<br/>
git branch -d &lt;name&gt; 删除name分支<br/>
git branch -v 查看各分支最后一次提交</p>

<p>git fetch &lt;remote-name&gt; 从远程分支获取数据<br/>
git push &lt;remote&gt; [localbranch]:[remotebranch] 推送本地localbran到远程remotebranch，若localbranch参数为空则删除远程remotebranch分支<br/>
git chekcout -b &lt;branch&gt; &lt;remote/branch&gt; 从远程分支分化出一个新本地分支</p>

<p>git stash 暂存不想提交的修改<br/>
git stash list 查看暂存列表<br/>
git stash apply &lt;stash-name&gt; 应用暂存</p>

<p>git checkout —set-upstream &lt;localbranch&gt; &lt;remote/branch&gt; 本地分支localbranch跟踪远程分支branch<br/>
git clone &lt;url&gt; 克隆远程项目</p>

<p>git submodule add &lt;url&gt; &lt;name&gt; 创建子模块，保存到name目录<br/>
git submodule init 初始化子模块<br/>
git submodule update 从远程下载更新子模块</p>

<p>git archive [&ndash;format==tar|zip] [&ndash;prefix=&lt;prefix&gt;/] [-o file] &lt;commit&gt; [&lt;path&gt;&hellip;] 将commit提交记录中的path目录下的文件以format格式打包导出到file<br/>
git revert HEAD^ 撤消前前一次提交<br/>
git revert &lt;hash&gt; 撤消指定的版本<br/>
git revert —hard &lt;commit&gt; 彻底回退到某个版本</p>
]]></content>
  </entry>
  
</feed>
