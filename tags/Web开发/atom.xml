<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Web开发 | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/Web开发/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2014-12-21T20:04:33+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rack开发简介]]></title>
    <link href="http://www.xefan.com/archives/84103.html"/>
    <updated>2014-05-02T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84103-Rack开发简介</id>
    <content type="html"><![CDATA[<p>Rack是Ruby应用与web服务器之间的一个接口，它在服务器与应用程序之间作为中间件，可以对用户的请求和程序的返回数据进行处理。现在几乎所有主流的Ruby web框架都是支持Rack接口的。</p>


<p>Rack与Python的wsgi很相似，在它的规格书（http://rack.rubyforge.org/doc/SPEC.html）中也说道它采用了WSGI的一些内容。</p>


<h2>开始</h2>


<p>首先安装Rack:</p>


<pre><code>[sudo] gem install rack
</code></pre>


<p>然后通过一个简单的例子来讲解。</p>


<pre><code>require "rack"
rack_app = lambda{|env| [200, {}, ["Hello World!"]]}
Rack::Handler::WEBrick.run rack_app, :Port =&gt; 3000
</code></pre>


<p>执行上述代码，然后访问 http://127.0.0.1:3000 会看到 &#8220;Hello World!&#8221;。</p>


<p>上面代码中的rack_app即是一个Rack应用。Rack应用除了lambda之外也还可以使用其他对象，只要满足以下条件即可：<br>
  * 可响应call方法的对象；<br>
  * 接收一个参数rack环境 environment 。它是一个散列表，包含了CGI的信息和rack的一些变量；<br>
  * 返回一个有三个值的数组，第一个值为返回状态 status；第二个值为返回头 headers，也是一个散列表；第三个值为返回正文 body，它必须是一个可响应each方法并生成字符串的对象，例如字符串数组。</p>


<p>WEBrick是Handler的一种。Handler用于将web服务器与Rack连接。使用 Rack::Handler.constants 可以查看Rack包含的所有Handler。</p>


<h2>请求/Request</h2>


<p>在Rack应用中可以直接操作env参数来访问请求信息，但是这种方法不太方便。对于这种操作Rack::Request对象提供了方便的接口。</p>


<pre><code>request = Rack::Request.new env
</code></pre>


<p>创建request对象时传入env参数。</p>


<h2>响应/Response</h2>


<p>Rack应用的返回值是一个有三个值的数组，包含了返回状态、返回头和返回正文。对于简单的程序手动构建数组还行，如果是复杂的程序则要考虑自动构建了。<br>
同样的可以使用Rack::Request对象来创建返回数据。</p>


<pre><code>response = Rack::Response.new
response.finish
</code></pre>


<p>内容填充完之后调用response对象的finish方法生成符合Rack规范的数组对象。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用css3绘制lxde桌面]]></title>
    <link href="http://www.xefan.com/archives/84032.html"/>
    <updated>2014-01-15T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84032-使用css3绘制lxde桌面</id>
    <content type="html"><![CDATA[<p>最近在学习CSS，本来是打算写点小东西练习练习。正好自己用的是linux系统的lxde桌面，于是就用CSS来绘制一个lxde。</p>


<p>在做的过程中发现了less，感觉很不错，于是就把less也加进来了。</p>


<p>最后的效果图：</p>


<p><img src="https://github.com/wusuopu/css3-lxde/blob/master/snapshoot/lxde0.png?raw=true" /></p>


<p><img src="https://github.com/wusuopu/css3-lxde/blob/master/snapshoot/lxde1.png?raw=true" /></p>


<p><img src="https://github.com/wusuopu/css3-lxde/blob/master/snapshoot/lxde2.png?raw=true" /></p>


<p>源代码： https://github.com/wusuopu/css3-lxde</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用CSS3绘制海贼王]]></title>
    <link href="http://www.xefan.com/archives/84018.html"/>
    <updated>2013-12-11T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84018-使用CSS3绘制海贼王</id>
    <content type="html"><![CDATA[<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;">之前国外有网友用CSS3绘制了一个哆啦A梦，最近也在学习CSS，于是就自己画了一个海贼王的图标。</p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;"></p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;">以下是画出来的效果：</p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;"></p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;"><a href="http://www.xefan.com/wp-content/uploads/2013/12/lufei.png"><img class="aligncenter size-medium wp-image-84019" title="lufei" src="http://www.xefan.com/wp-content/uploads/2013/12/lufei-300x233.png" alt="" width="300" height="233" /></a></p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;"></p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;"></p>


<p style="-qt-block-indent: 0; text-indent: 0px; margin: 0px;">以下是原图：</p>


<p style="-qt-paragraph-type: empty; -qt-block-indent: 0; text-indent: 0px; margin: 0px;"><a href="http://www.xefan.com/wp-content/uploads/2013/12/caimao.jpg"><img class="aligncenter size-medium wp-image-84021" title="caimao" src="http://www.xefan.com/wp-content/uploads/2013/12/caimao-300x192.jpg" alt="" width="300" height="192" /></a></p>


<p>源代码： <a href="https://gist.github.com/wusuopu/7910942">https://gist.github.com/wusuopu/7910942</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python wsgi教程5——POST请求]]></title>
    <link href="http://www.xefan.com/archives/84015.html"/>
    <updated>2013-12-08T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84015-python wsgi教程5——POST请求</id>
    <content type="html"><![CDATA[<p>当请求方法为POST时，请求字符串会放在HTTP的body中。可以使用环境变量中的wsgi.input进行读取。同时CONTENT_LENGTH变量记录了内容的长度。</p>

<p>下面是一个简单的例子：</p>

<pre><code class="python">#!/usr/bin/env python

from wsgiref.simple_server import make_server
from cgi import parse_qs, escape

html = """
&lt;html&gt;
&lt;body&gt;
   &lt;form method="post" action=""&gt;
      &lt;p&gt;
         Age: &lt;input type="text" name="age"&gt;
         &lt;/p&gt;
      &lt;p&gt;
         Hobbies:
         &lt;input name="hobbies" type="checkbox" value="software"&gt; Software
         &lt;input name="hobbies" type="checkbox" value="tunning"&gt; Auto Tunning
         &lt;/p&gt;
      &lt;p&gt;
         &lt;input type="submit" value="Submit"&gt;
         &lt;/p&gt;
      &lt;/form&gt;
   &lt;p&gt;
      Age: %s&lt;br&gt;
      Hobbies: %s
      &lt;/p&gt;
   &lt;/body&gt;
&lt;/html&gt;
"""

def application(environ, start_response):

   # the environment variable CONTENT_LENGTH may be empty or missing
   try:
      request_body_size = int(environ.get('CONTENT_LENGTH', 0))
   except (ValueError):
      request_body_size = 0

   # When the method is POST the query string will be sent
   # in the HTTP request body which is passed by the WSGI server
   # in the file like wsgi.input environment variable.
   request_body = environ['wsgi.input'].read(request_body_size)
   d = parse_qs(request_body)

   age = d.get('age', [''])[0] # Returns the first age value.
   hobbies = d.get('hobbies', []) # Returns a list of hobbies.

   # Always escape user input to avoid script injection
   age = escape(age)
   hobbies = [escape(hobby) for hobby in hobbies]

   response_body = html % (age or 'Empty',
               ', '.join(hobbies or ['No Hobbies']))

   status = '200 OK'

   response_headers = [('Content-Type', 'text/html'),
                  ('Content-Length', str(len(response_body)))]
   start_response(status, response_headers)

   return [response_body]

httpd = make_server('localhost', 8051, application)
httpd.serve_forever()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python wsgi教程4——GET请求]]></title>
    <link href="http://www.xefan.com/archives/84013.html"/>
    <updated>2013-12-08T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84013-python wsgi教程4——GET请求</id>
    <content type="html"><![CDATA[<p>执行之前的程序，然后在浏览器中打开 <a href="http://localhost:8051/?a=10&amp;b=w&amp;b=r">http://localhost:8051/?a=10&amp;b=w&amp;b=r</a> 这样的url。</p>

<p>环境变量字典中保存了请求信息REQUEST_METHOD和QUERY_STRING。问号之后的内容即为此次请求字符串的值。可以写一个函数对它进行解析，或者直接使用CGI模块的parse_qs函数，它返回一个字典，其值为一个列表。</p>

<p>下面是一个简单的例子：</p>

<pre><code class="python">#!/usr/bin/env python

from wsgiref.simple_server import make_server
from cgi import parse_qs, escape

html = """
&lt;html&gt;
&lt;body&gt;
   &lt;form method="get" action=""&gt;
      &lt;p&gt;
         Age: &lt;input type="text" name="age"&gt;
         &lt;/p&gt;
      &lt;p&gt;
         Hobbies:
         &lt;input name="hobbies" type="checkbox" value="software"&gt; Software
         &lt;input name="hobbies" type="checkbox" value="tunning"&gt; Auto Tunning
         &lt;/p&gt;
      &lt;p&gt;
         &lt;input type="submit" value="Submit"&gt;
         &lt;/p&gt;
      &lt;/form&gt;
   &lt;p&gt;
      Age: %s&lt;br&gt;
      Hobbies: %s
      &lt;/p&gt;
   &lt;/body&gt;
&lt;/html&gt;"""

def application(environ, start_response):

   # Returns a dictionary containing lists as values.
   d = parse_qs(environ['QUERY_STRING'])

   # In this idiom you must issue a list containing a default value.
   age = d.get('age', [''])[0] # Returns the first age value.
   hobbies = d.get('hobbies', []) # Returns a list of hobbies.

   # Always escape user input to avoid script injection
   age = escape(age)
   hobbies = [escape(hobby) for hobby in hobbies]

   response_body = html % (age or 'Empty',
               ', '.join(hobbies or ['No Hobbies']))

   status = '200 OK'

   # Now content type is text/html
   response_headers = [('Content-Type', 'text/html'),
                  ('Content-Length', str(len(response_body)))]
   start_response(status, response_headers)

   return [response_body]

httpd = make_server('localhost', 8051, application)
# Now it is serve_forever() in instead of handle_request().
# In Windows you can kill it in the Task Manager (python.exe).
# In Linux a Ctrl-C will do it.
httpd.serve_forever()
</code></pre>
]]></content>
  </entry>
  
</feed>
