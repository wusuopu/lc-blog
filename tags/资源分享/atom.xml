<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 资源分享 | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/资源分享/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2015-08-22T17:56:18+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用distcc加快编译速度]]></title>
    <link href="http://www.xefan.com/archives/84027.html"/>
    <updated>2014-01-07T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84027-使用distcc加快编译速度</id>
    <content type="html"><![CDATA[<p>distcc是一个分布式的C/C++编译工具，它可以组织一个网络内的多台计算机同时进行某个编译任务。</p>


<p>对于Debian系列的系统可以执行如下命令进行安装：</p>


<p>$ sudo apt-get install distcc</p>


<h3>使用</h3>


<p>1、首先得先运行服务器软件</p>


<p>运行如下命令启动distccd服务，并接收192.168.1网段内的所有TCP连接：</p>


<pre><code>$ distccd --allow 192.168.1.0/24 --log-level error --log-file /tmp/distccd.log --daemon
</code></pre>


<p>2、运行客户端软件</p>


<p>设置服务器列表：<br>
设置DISTCC_HOSTS环境变量；或者修改 ~/.distcc/hosts 或者 /etc/distcc/hosts 文件。<br>
每行一个服务器主机地址，主机地址可以是如下格式：  </p>


<pre><code>localhost       表示本地
HOST            TCP连接到该主机的3632端口
HOST:PORT       TCP连接到该主机的指定端口
@HOST           使用ssh连接
USER@HOST       使用指定用户进行ssh连接
</code></pre>


<p>所有的服务器的架构最好是相同的。都是32位或者都是64位。  </p>


<p>3、在编译的时候使用distcc</p>


<p>如果工程使用automake机制：<br>
在configure阶段执行&#8221;CC=distcc ./configure&#8221; ，然后再执行&#8221;make -j XX; make install&#8221;。</p>


<p>如果工程由GNU make管理：<br>
修改Makefile使得在原来C/C++编译器名称前加上&#8221;distcc &#8220;，例如设置CC=&#8221;distcc arm-linux-gcc&#8221;。然后执行&#8221;make -j XX&#8221;。</p>


<p>如果工程由SCons管理：<br>
修改SConstruct使得在原来C/C++编译器名称前加上&#8221;distcc &#8220;。导出环境变量HOME和DISTCC_HOSTS到构建环境（注意SCons不会自动把系统环境变量导出到builder子进程）：</p>


<pre><code>Environment(ENV={'HOME': os.environ['HOME'],'DISTCC_HOSTS': ‘localhost 10.0.0.2’},...)
</code></pre>


<p>然后执行&#8221;scons -j XX&#8221;。</p>


<h3>实例</h3>


<p>接下来编译Python源代码，测试一下distcc。</p>


<pre><code>$ tar xfv Python-2.7.5.tar
$ cd Python-2.7.5
$ ./configure
$ time make
make  124.32s user 7.11s system 94% cpu 2:19.24 total
$ time make
make  0.17s user 0.04s system 89% cpu 0.241 total
$ make clean
$ time make
make  123.52s user 7.32s system 96% cpu 2:16.12 total
</code></pre>


<p>正常编译花了2分10多秒的时间。</p>


<pre><code>$ cat /etc/distcc/hosts
10.0.0.129
localhost
$ tar xfv Python-2.7.5.tar
$ cd Python-2.7.5
$ CC=distcc ./configure
$ time make -j 3
make -j 3  49.58s user 5.53s system 30% cpu 3:01.40 total
$ time make -j 3
make -j 3  0.60s user 0.24s system 7% cpu 11.482 total
$ make clean
$ time make -j 3
make -j 3  46.17s user 5.20s system 40% cpu 2:05.66 total
</code></pre>


<p>使用129这台主机和本机一起进行编译，结果花了3分钟的时间。好像使用distcc编译还比正常的编译方式更耗时，有可能是时间花费在了网络传输上。</p>


<p>如果有多台主机的话效果应该会好些。还有可以配合使用ccache和distcc进一步加快编译速度。</p>


<p>下图是distcc提供的监控工具，用于查看编译执行的情况：</p>


<p><a href="http://www.xefan.com/wp-content/uploads/2014/01/distcc-Monitor.png"><img src="http://www.xefan.com/wp-content/uploads/2014/01/distcc-Monitor-300x194.png" alt="" title="distcc Monitor" width="300" height="194" class="aligncenter size-medium wp-image-84028" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用ccache加快编译速度]]></title>
    <link href="http://www.xefan.com/archives/84024.html"/>
    <updated>2014-01-04T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84024-使用ccache加快编译速度</id>
    <content type="html"><![CDATA[<p>ccache是一个编译器缓存，可以将编译的结果缓存起来。这样尽管第一次编译会花费长一点的时间，不过之后再次编译将变得非常非常快。 </p>


<h3>1、安装</h3>


<p>主流的linux发行版应该都有这个包，对于Debian系列的可以执行以下命令安装：</p>


<pre><code>sudo apt-get install ccache
</code></pre>


<h3>2、使用</h3>


<p>安装之后基本不用进行什么配置就可以直接使用了。<br>
例如之前要编译一个hello.c文件要执行命令：  </p>


<pre><code>gcc hello.c -o hello
</code></pre>


<p>现在是：</p>


<pre><code>ccache gcc hello.c -o hello
</code></pre>


<p>ccache默认是将结果缓存保存到 $HOME/.ccache 目录下。如果想要修改这个目录，可以修改 CCACHE_DIR 环境变量。例如：</p>


<pre><code>export CCACHE_DIR=/ramdisk/ccache
</code></pre>


<p>如果觉得每次都在命令前加上ccache比较麻烦的话，有一个一劳永逸的办法。执行如下命令：</p>


<pre><code>cp ccache /usr/local/bin/
ln -s ccache /usr/local/bin/gcc
ln -s ccache /usr/local/bin/g++
ln -s ccache /usr/local/bin/cc
ln -s ccache /usr/local/bin/c++
</code></pre>


<p>不过这样的话每次都是使用的ccache，不太灵活。这个就要自己取舍了。</p>


<h3>3、实例</h3>


<p>接下来通过一个例子来看看使用ccache和不使用的差别。<br>
作为一个Python程序员，我们就来编译一个Python试试。</p>


<pre><code>$ tar xf Python-2.7.3.tar.gz
$ cd Python-2.7.3
$ ./configure
$ time make
make  96.49s user 5.10s system 93% cpu 1:48.77 total
</code></pre>


<p>首次编译花了1分48秒。</p>


<pre><code>$ time make
make  0.12s user 0.03s system 88% cpu 0.172 total
$ make clean
$ time make
make  96.46s user 4.98s system 95% cpu 1:46.43 total
</code></pre>


<p>清除结果之后再次编译，还是花了1分46秒。</p>


<p>再来看看使用ccache后的结果：</p>


<pre><code>$ tar xf Python-2.7.3.tar.gz
$ cd Python-2.7.3
$ ./configure
$ time make
make  99.42s user 5.84s system 93% cpu 1:52.95 total

$ time make
make  0.16s user 0.00s system 89% cpu 0.178 total
$ make clean
$ time make
make  3.36s user 1.41s system 52% cpu 9.093 total
</code></pre>


<p>首次编译花了1分52秒，之后都是只花了几秒。</p>


<p>查看ccache的统计信息：</p>


<pre><code>$ ccache -s
cache directory                     /home/longchang/.ccache
cache hit (direct)                   250
cache hit (preprocessed)               4
cache miss                           349
called for link                      132
alled for preprocessing              84
compile failed                        29
preprocessor error                    28
bad compiler arguments                 5
unsupported source language            6
autoconf compile/link                224
no input file                         24
files in cache                       710
cache size                          30.3 Mbytes
max cache size                       1.0 Gbytes
</code></pre>


<p>清除掉缓存后再次编译：</p>


<pre><code>$ ccache -c
Cleaned cache

$ make clean
$ time make
make  99.36s user 5.94s system 92% cpu 1:53.47 total

$ make clean
$ time make
make  3.48s user 1.42s system 54% cpu 9.049 total
</code></pre>


<p>ccache手册： <a href="http://ccache.samba.org/manual.html">http://ccache.samba.org/manual.html</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再推荐一款不错的编辑器——UliPad]]></title>
    <link href="http://www.xefan.com/archives/83548.html"/>
    <updated>2011-05-15T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83548-再推荐一款不错的编辑器——UliPad</id>
    <content type="html"><![CDATA[<p>Ulipad 是一个基于 wxPython 开发的面向程序员提供的灵活编辑器。</p>

<p><span>支持 Perl, Python, PHP, Ruby, Javascript等多种语言。支持语法高亮、自动填充、代码折叠的功能，方便编写代码。更不错的是它是跨平台的，支持Windows, Mac和Linux。如图：</span></p>

<p><span><img class="alignnone" title="UliPad" src="http://img181.poco.cn/mypoco/myphoto/20110515/20/5545129120110515203927013.jpg" alt="" width="628" height="506" /></span></p>

<p>下载地址：<a href="http://code.google.com/p/ulipad/downloads/list" target="_blank"><a href="http://code.google.com/p/ulipad/downloads/list">http://code.google.com/p/ulipad/downloads/list</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些开发手册下载]]></title>
    <link href="http://www.xefan.com/archives/83546.html"/>
    <updated>2011-04-28T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83546-一些开发手册下载</id>
    <content type="html"><![CDATA[<p>最近收集整理了一些可能会用得上的开发手册，顺便分享一下。</p>

<p><strong>shell编程手册.pdf</strong> <a href="http://u.115.com/file/f5b4066e87">http://u.115.com/file/f5b4066e87</a></p>

<p><strong>php_manual_zh.chm</strong>（php中文手册）    <a href="http://u.115.com/file/f5e120322a">http://u.115.com/file/f5e120322a</a></p>

<p><strong>W3C_Javascript参考手册_2010-07-19.chm</strong> <a href="http://u.115.com/file/f553fd50e3">http://u.115.com/file/f553fd50e3</a></p>

<p><strong>Linux_c库函数参考手册.pdf</strong> <a href="http://u.115.com/file/f54fee1a8">http://u.115.com/file/f54fee1a8</a></p>

<p><strong>C语言标准库函数查询手册.pdf</strong> <a href="http://u.115.com/file/f52f739afa">http://u.115.com/file/f52f739afa</a></p>

<p><strong>gtk函数手册.rar</strong> <a href="http://u.115.com/file/f576f4ba8d">http://u.115.com/file/f576f4ba8d</a></p>

<p><strong>gtk_2.0中文指南.rar</strong> <a href="http://u.115.com/file/f534036897">http://u.115.com/file/f534036897</a></p>

<p><strong>GTK+_API.gz</strong> <a href="http://u.115.com/file/f518d8b95b">http://u.115.com/file/f518d8b95b</a></p>

<p><strong>python-3.1.2-docs-html.tar.bz2</strong>（python-3.1.2官方手册）    <a href="http://u.115.com/file/f59bee52a2">http://u.115.com/file/f59bee52a2</a></p>

<p><strong>python-2.6.6-docs-html.tar.bz2</strong>（python-2.6.6官方手册）    <a href="http://u.115.com/file/f54da60b40">http://u.115.com/file/f54da60b40</a></p>

<p><strong>pygtk_2.24.0-docs-html.tar</strong>（pygtk_2.24.官方手册）    <a href="http://u.115.com/file/f5f02cfa2d">http://u.115.com/file/f5f02cfa2d</a></p>

<p><strong>pygtk_2.14.0-docs-html.tar</strong>（pygtk_2.14.官方手册）     <a href="http://u.115.com/file/f58acb5b52">http://u.115.com/file/f58acb5b52</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[推荐一款不错的编辑器——Komodo Edit]]></title>
    <link href="http://www.xefan.com/archives/83543.html"/>
    <updated>2011-04-24T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83543-推荐一款不错的编辑器——Komodo Edit</id>
    <content type="html"><![CDATA[<p>Komodo Edit是一款免费开源的代码编辑器，支持 Perl, Python, Tcl, PHP, Ruby, Javascript等多种语言。支持语法高亮、自动填充、代码折叠的功能，方便编写代码。更不错的是它是跨平台的，支持Windows, Mac和Linux。</p>

<p>偶正苦于Linux下没有好的Python的编辑器，这个工具正好为偶提供了方便。</p>

<p>虽然它的功能不错，但毕竟也只是一个编辑器，没有程序调试的功能，如果想要调试程序的话可以选择Komodo IDE。不过Komodo IDE是收费的。</p>

<p>下载地址：<a href="http://www.activestate.com/komodo-edit">http://www.activestate.com/komodo-edit</a></p>
]]></content>
  </entry>
  
</feed>
