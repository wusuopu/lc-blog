<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Ruby | 龍昌博客]]></title>
  <link href="http://www.xefan.com/tags/Ruby/atom.xml" rel="self"/>
  <link href="http://www.xefan.com/"/>
  <updated>2014-12-10T21:08:55+08:00</updated>
  <id>http://www.xefan.com/</id>
  <author>
    <name><![CDATA[龍昌]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用ruby开发vim插件]]></title>
    <link href="http://www.xefan.com/archives/84117.html"/>
    <updated>2014-07-03T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84117-使用ruby开发vim插件</id>
    <content type="html"><![CDATA[<p>作为一个Vimmer和Pythoner，之前折腾过用python编写vim插件。现在作为半个Rubist，又开始继续折腾。</p>


<p>在开始编写插件之前，你需要确认 Vim 是否支持 Ruby，通过以下命令来判别：</p>


<pre><code>$ vim --version | grep +ruby
</code></pre>


<p>如果输出为空，则表示你当前的vim不支持Ruby，需要重新编译一下，并启用对Ruby的支持。</p>


<p>顺便说下我当前的环境是：</p>


<ul>
<li>vim 7.4  </li>
<li>ruby 2.1.0  </li>
</ul>


<p>环境检查没有问题那么就开始吧。<br>
在~/.vim/plugin目录下创建一个 demo.vim 文件。</p>


<p>在开头写上以下代码：</p>


<pre><code>if !has('ruby')
    echo "Error: Required vim compiled with +ruby"
    finish
endif
</code></pre>


<p>这段代码就是用 VimL 编写的，它将检查 Vim 是否支持 Ruby。</p>


<p>接下来再判断该插件是否已经加载过了，以免重复加载：</p>


<pre><code>if exists('g:loaded_ruby_demo_plugin')
    finish
endif
let g:loaded_ruby_demo_plugin = 1
</code></pre>


<p>所有的检查都没有问题，则开始插件的正文了。先定义一个函数。</p>


<pre><code>function! DemoFun1()
ruby&lt;&lt;EOF
buf = VIM::Buffer.current
puts "current buffer name: #{buf.name} number: #{buf.number} length: #{buf.length}"
EOF
endfunction
</code></pre>


<p>function与endfunction是vim中用于定义函数的，在”ruby&lt;&lt;EOF”和”EOF”之间部分的是Ruby代码。这个例子是输出当前缓冲区的名字、编号以及总行数。<br>
执行命令:call DemoFun1()，应该就可以看到输出结果了。</p>


<p>然后再举个例子说下函数的参数处理。</p>


<pre><code>function! DemoFun2(arg1)
ruby&lt;&lt; EOF
puts "you input: #{VIM.evaluate('a:arg1')}"
EOF
endfunction
</code></pre>


<p>这里定义了一个函数接收一个参数，然后将其输出。使用 VIM.evaluate 将vim的变量转化为Ruby的变量。</p>


<p>为了方便我们再定义两个命令，以简化对这两个函数的调用。</p>


<pre><code>command! -nargs=0 DemoFun1 call DemoFun1()  
command! -nargs=1 -rang DemoFun2 call DemoFun2(&lt;f-args&gt;)
</code></pre>


<p>要获取完整的代码可以访问： https://gist.github.com/wusuopu/c1182efefa85d4f6839b</p>


<p>接下来再简单说下vim中Ruby的使用。</p>


<p>vim为Ruby提供了一个VIM模块，通过它可以在Ruby中访问vim的接口。同时还提供了两个全局变量：$curwin、$curbuf，它们分别代表了当前窗口对象以及当前缓冲区对象。</p>


<p>VIM模块中有 Buffer 和 Window 两个对象，分别是用来对缓冲区和窗口进行操作的。同时VIM模块还提供了message、set_option、command和evaluate四个函数。</p>


<p>想要查看更多的帮忙信息，可以在vim中执行如下命令：</p>


<pre><code>:help ruby
</code></pre>


<p>好了，先写这么多吧，其余的自己去尝试吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用rvm进行ruby多版本管理]]></title>
    <link href="http://www.xefan.com/archives/84105.html"/>
    <updated>2014-06-16T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84105-使用rvm进行ruby多版本管理</id>
    <content type="html"><![CDATA[<p>rvm与Python的virtualenv和Node的nvm类似。使用它可以很方便的在你的系统中安装多个Ruby环境。类似的工具还有rbenv、ry、rbfu等。  </p>


<h3>安装rvm</h3>


<p>以下的命令都是在当前用户权限下执行的，最好不要使用sudo。<br>
下载安装rvm:</p>


<pre><code>$ curl -sSL https://get.rvm.io | bash -s stable
</code></pre>


<p>安装完成之后再加载配置：</p>


<pre><code>$ source ~/.profile
</code></pre>


<p>为了下次能直接使用，建议将该命令添加到 ~/.bash_profile 或者 ~/.zshrc 中。  </p>


<p>使用rvm安装Ruby时会默认从官方网站上进行下载，为了提高下载速度这里建议将安装源修改为淘宝的镜像。</p>


<pre><code>$ sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db
</code></pre>


<h3>使用</h3>


<p>安装完成之后就可以使用了，以下介绍几条常用的命令。<br>
列出已知的ruby版本:  </p>


<pre><code>$ rvm list known
</code></pre>


<p>列出已经安装的ruby：  </p>


<pre><code>$ rvm list
</code></pre>


<p>安装一个ruby版本：  </p>


<pre><code>$ rvm install 2.1.0
</code></pre>


<p>这里安装最新的2.1.0版本的Ruby。</p>


<p>如果安装了多个版本，想使用其中一个版本：  </p>


<pre><code>$ rvm use 2.1.0
</code></pre>


<p>设置为默认版本：  </p>


<pre><code>$ rvm use 2.1.0 --default
</code></pre>


<p>use了某个版本之后，可以使用 which ruby 命令查看当前的ruby命令信息。  </p>


<p>删除一个已安装的版本：  </p>


<pre><code>$ rvm remove 2.1.0
</code></pre>


<p>更多内容请参考官方文档： https://rvm.io/#docindex</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rack开发简介]]></title>
    <link href="http://www.xefan.com/archives/84103.html"/>
    <updated>2014-05-02T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/84103-Rack开发简介</id>
    <content type="html"><![CDATA[<p>Rack是Ruby应用与web服务器之间的一个接口，它在服务器与应用程序之间作为中间件，可以对用户的请求和程序的返回数据进行处理。现在几乎所有主流的Ruby web框架都是支持Rack接口的。</p>


<p>Rack与Python的wsgi很相似，在它的规格书（http://rack.rubyforge.org/doc/SPEC.html）中也说道它采用了WSGI的一些内容。</p>


<h2>开始</h2>


<p>首先安装Rack:</p>


<pre><code>[sudo] gem install rack
</code></pre>


<p>然后通过一个简单的例子来讲解。</p>


<pre><code>require "rack"
rack_app = lambda{|env| [200, {}, ["Hello World!"]]}
Rack::Handler::WEBrick.run rack_app, :Port =&gt; 3000
</code></pre>


<p>执行上述代码，然后访问 http://127.0.0.1:3000 会看到 &#8220;Hello World!&#8221;。</p>


<p>上面代码中的rack_app即是一个Rack应用。Rack应用除了lambda之外也还可以使用其他对象，只要满足以下条件即可：<br>
  * 可响应call方法的对象；<br>
  * 接收一个参数rack环境 environment 。它是一个散列表，包含了CGI的信息和rack的一些变量；<br>
  * 返回一个有三个值的数组，第一个值为返回状态 status；第二个值为返回头 headers，也是一个散列表；第三个值为返回正文 body，它必须是一个可响应each方法并生成字符串的对象，例如字符串数组。</p>


<p>WEBrick是Handler的一种。Handler用于将web服务器与Rack连接。使用 Rack::Handler.constants 可以查看Rack包含的所有Handler。</p>


<h2>请求/Request</h2>


<p>在Rack应用中可以直接操作env参数来访问请求信息，但是这种方法不太方便。对于这种操作Rack::Request对象提供了方便的接口。</p>


<pre><code>request = Rack::Request.new env
</code></pre>


<p>创建request对象时传入env参数。</p>


<h2>响应/Response</h2>


<p>Rack应用的返回值是一个有三个值的数组，包含了返回状态、返回头和返回正文。对于简单的程序手动构建数组还行，如果是复杂的程序则要考虑自动构建了。<br>
同样的可以使用Rack::Request对象来创建返回数据。</p>


<pre><code>response = Rack::Response.new
response.finish
</code></pre>


<p>内容填充完之后调用response对象的finish方法生成符合Rack规范的数组对象。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[翻译]Ruby GTK教程8——贪吃蛇]]></title>
    <link href="http://www.xefan.com/archives/83975.html"/>
    <updated>2013-11-25T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83975-[翻译]Ruby GTK教程8——贪吃蛇</id>
    <content type="html"><![CDATA[<h1>贪吃蛇</h1>


<p>在这部分的Ruby GTK编程教程中我们将创建一个贪吃蛇游戏。</p>


<p>贪吃蛇是一个比较老的经典电子游戏。它第一次创建是在70年代后期。之后被移植到PC上。在这个游戏中玩家控制蛇，目标是尽可能多的吃掉苹果。蛇每吃掉一个苹果，身体就会变长。必须避免蛇撞到墙或者自己的身体。</p>


<h2>开发</h2>


<p>蛇的每块关节的大小为10像素。使用方向键控制蛇。初始，蛇有三块关节。游戏立即开始。当游戏结束后在窗口中央显示&#8221;Game Over&#8221;。</p>


<p><em>board.rb</em></p>


<pre><code>WIDTH = 300
HEIGHT = 270
DOT_SIZE = 10
ALL_DOTS = WIDTH * HEIGHT / (DOT_SIZE * DOT_SIZE)
RAND_POS = 26

$x = [0] * ALL_DOTS
$y = [0] * ALL_DOTS

class Board &lt; Gtk::DrawingArea

    def initialize
        super

        modify_bg Gtk::STATE_NORMAL, Gdk::Color.new(0, 0, 0)

        signal_connect "expose-event" do  
            on_expose
        end

        init_game
    end

    def on_timer

        if @inGame
            check_apple
            check_collision
            move
            queue_draw
            return true
        else
            return false
        end
    end

    def init_game

        @left = false
        @right = true
        @up = false
        @down = false
        @inGame = true
        @dots = 3

        for i in (0..@dots)
            $x[i] = 50 - i * 10
            $y[i] = 50
        end

        begin
            @dot = Cairo::ImageSurface.from_png "dot.png"
            @head = Cairo::ImageSurface.from_png "head.png"
            @apple = Cairo::ImageSurface.from_png "apple.png"
        rescue Exception =&gt; e
            puts "cannot load images"
            exit
        end

        locate_apple
        GLib::Timeout.add(100) { on_timer }

     end


    def on_expose

        cr = window.create_cairo_context

        if @inGame
            draw_objects cr
        else
            game_over cr
        end      
    end

    def draw_objects cr

        cr.set_source_rgb 0, 0, 0
        cr.paint

        cr.set_source @apple, @apple_x, @apple_y
        cr.paint

        for z in (0..@dots)
            if z == 0 
                cr.set_source @head, $x[z], $y[z]
                cr.paint
            else
                cr.set_source @dot, $x[z], $y[z]
                cr.paint
            end    
        end
    end

    def game_over cr

        w = allocation.width / 2
        h = allocation.height / 2

        cr.set_font_size 15
        te = cr.text_extents "Game Over"

        cr.set_source_rgb 65535, 65535, 65535

        cr.move_to w - te.width/2, h
        cr.show_text "Game Over"

    end


    def check_apple

        if $x[0] == @apple_x and $y[0] == @apple_y 
            @dots = @dots + 1
            locate_apple
        end
    end

    def move

        z = @dots

        while z &gt; 0
            $x[z] = $x[(z - 1)]
            $y[z] = $y[(z - 1)]
            z = z - 1
        end

        if @left
            $x[0] -= DOT_SIZE
        end

        if @right 
            $x[0] += DOT_SIZE
        end

        if @up
            $y[0] -= DOT_SIZE
        end

        if @down
            $y[0] += DOT_SIZE
        end

     end

    def check_collision

        z = @dots

        while z &gt; 0
            if z &gt; 4 and $x[0] == $x[z] and $y[0] == $y[z]
                @inGame = false
            end
            z = z - 1
        end

        if $y[0] &gt; HEIGHT - DOT_SIZE
            @inGame = false
        end

        if $y[0] &lt; 0
            @inGame = false
        end

        if $x[0] &gt; WIDTH - DOT_SIZE
            @inGame = false
        end

        if $x[0] &lt; 0
            @inGame = false
        end

    end

    def locate_apple

        r = rand(RAND_POS)
        @apple_x = r * DOT_SIZE
        r = rand(RAND_POS)
        @apple_y = r * DOT_SIZE
    end

    def on_key_down event

        key = event.keyval

        if key == Gdk::Keyval::GDK_Left and not @right
            @left = true
            @up = false
            @down = false
        end

        if key == Gdk::Keyval::GDK_Right and not @left
            @right = true
            @up = false
            @down = false
        end

        if key == Gdk::Keyval::GDK_Up and not @down
            @up = true
            @right = false
            @left = false
        end

        if key == Gdk::Keyval::GDK_Down and not @up
            @down = true
            @right = false
            @left = false
        end
    end   
end
</code></pre>


<p>首先我们定义一些全局变量。</p>


<p>WIDTH和HEIGHT常量决定了甲板的大小。DOT_SIZE是苹果和蛇的每个点的大小。ALL_DOTS常量定义了甲板可能包含的最大的点数量。RAND_POS常量用于计算苹果的随机位置。DELAY常量决定游戏速度。</p>


<pre><code>$x = [0] * ALL_DOTS
$y = [0] * ALL_DOTS
</code></pre>


<p>这两个数组存储了蛇所有关节的x、y坐标。</p>


<p><em>init_game</em>方法初始化变量、加载图片和启动timeout函数。</p>


<pre><code>if @inGame
    draw_objects cr
else
    game_over cr
end
</code></pre>


<p>在<em>on_expose_method</em>方法里我们检查<em>@inGame</em>变量。如果为true，绘制苹果和蛇。否则显示&#8221;Game over&#8221;文字。</p>


<pre><code>def draw_objects cr

    cr.set_source_rgb 0, 0, 0
    cr.paint

    cr.set_source @apple, @apple_x, @apple_y
    cr.paint

    for z in (0..@dots)
        if z == 0 
            cr.set_source @head, $x[z], $y[z]
            cr.paint
        else
            cr.set_source @dot, $x[z], $y[z]
            cr.paint
        end    
    end
end
</code></pre>


<p><em>draw_objects</em>方法绘制苹果和蛇。蛇的头部用红色的圆表示。</p>


<pre><code>def check_apple

    if $x[0] == @apple_x and $y[0] == @apple_y 
        @dots = @dots + 1
        locate_apple
    end
end
</code></pre>


<p><em>check_apple</em>方法查检蛇是否碰到苹果，如果是则增加蛇的关节并调用<em>locate_apple</em>方法随机放置一个新的苹果。</p>


<p><em>move</em>方法是游戏的关键算法。为了理解它，先看一下蛇是如何移动的。控制蛇头，可以使用方向键改变它的方向。其余的关节朝该方向前进。第二个关节移到到第一关节的位置，第三个关节到第二个等等。</p>


<pre><code>while z &gt; 0
    $x[z] = $x[(z - 1)]
    $y[z] = $y[(z - 1)]
    z = z - 1
end
</code></pre>


<p>这些代码将关节按照链状前进。</p>


<pre><code>if @left
    $x[0] -= DOT_SIZE
end
</code></pre>


<p>头部向左移动。</p>


<p><em>check_collision</em>方法中，我们检查蛇是否撞到了自己或者墙。</p>


<pre><code>while z &gt; 0
    if z &gt; 4 and $x[0] == $x[z] and $y[0] == $y[z]
        @inGame = false
    end
    z = z - 1
end
</code></pre>


<p>如果蛇撞到了自己，游戏结束。</p>


<pre><code>if $y[0] &gt; HEIGHT - DOT_SIZE
    @inGame = false
end
</code></pre>


<p>如果蛇撞到底部，游戏结束。</p>


<p><em>localte_apple</em>方法在甲板上随机定位一个苹果。</p>


<pre><code>r = rand(RAND_POS)
</code></pre>


<p>获取0到RAND_POS-1的一个随机数。</p>


<pre><code>@apple_x = r * DOT_SIZE
...
@apple_y = r * DOT_SIZE
</code></pre>


<p>这几行设置了苹果的x、y坐标。</p>


<pre><code>if @inGame
    check_apple
    check_collision
    move
    queue_draw
    return true
else
    return false
end
</code></pre>


<p>第140ms调用一次<em>on_timer</em>方法。如果游戏运行则调用三个组成游戏逻辑的方法。否则返回false，停止定时事件。</p>


<p>在Board类的<em>on_key_down</em>方法中我们判断按下的键。</p>


<pre><code>if key == Gdk::Keyval::GDK_Left and not @right
    @left = true
    @up = false
    @down = false
end
</code></pre>


<p>如果我们按的是左方向键，我们设置<em>left</em>变量为true。这个变量用于<em>move</em>方法改变蛇的坐标。同样注意，当蛇是朝右时，我们不能立即朝左。</p>


<p><em>nibbles.rb</em></p>


<pre><code>#!/usr/bin/ruby

# ZetCode Ruby GTK tutorial
#
# This is a simple nibbles game
# clone
#
# author: jan bodnar
# website: www.zetcode.com
# last modified: June 2009

require 'gtk2'
require 'board'

class RubyApp &gt; Gtk::Window
    def initialize
        super

        set_title "Nibbles"
        signal_connect "destroy" do 
            Gtk.main_quit 
        end

        @board = Board.new
        signal_connect "key-press-event" do |w, e|
            on_key_down(w, e)
        end

        add @board

        set_default_size 300, 270
        set_window_position Gtk::Window::POS_CENTER
        show_all
    end

    def on_key_down widget, event

        key = event.keyval
        @board.on_key_down event
    end
end

Gtk.init
    window = RubyApp.new
Gtk.main
</code></pre>


<p>在这个类我们启动了贪吃游戏。</p>


<pre><code>def on_key_down widget, event

    key = event.keyval
    @board.on_key_down event
end
</code></pre>


<p>在这个类的捕获按键事件然后委托Board类的<em>on_key_down method</em>方法进行处理。</p>


<p><img alt="image" src="http://zetcode.com/img/gui/rubygtk/nibbles.png"><br>
<em>图片：贪吃蛇</em></p>


<p>这是使用Ruby语言和GTK库编写的贪吃蛇计算机游戏。</p>


<hr>


<p>原文地址： <a href="http://zetcode.com/gui/rubygtk/nibbles/">http://zetcode.com/gui/rubygtk/nibbles/</a><br>
翻译：龙昌  admin@longchangjin.cn </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[翻译]Ruby GTK教程7——自定义控件]]></title>
    <link href="http://www.xefan.com/archives/83972.html"/>
    <updated>2013-11-24T00:00:00+08:00</updated>
    <id>http://www.xefan.com/archives/83972-[翻译]Ruby GTK教程7——自定义控件</id>
    <content type="html"><![CDATA[<h1>自定义控件</h1>


<p>大多数套件通常只提供了最常用的控件，如按钮、文本控件、滑动条等。没有套件可以提供所有可能的控件。程序员必须自己创建这些。这是通过套件提供的绘制工具完成。这有两种可能。程序员可以修改或增强已存在的控件，或者从头开始创建一个自定义控件。</p>


<h2>Burning控件</h2>


<p>这个例子我们从头开始创建一个控件。这个控件可以在各种媒体烧定应用中看到，如Nero Burning ROM。</p>


<p><em>custom.rb</em></p>


<pre><code>#!/usr/bin/ruby

# ZetCode Ruby GTK tutorial 
#
# This example creates a burning
# custom widget
#
# author: jan bodnar
# website: zetcode.com 
# last edited: June 2009


require 'gtk2'

class Burning &lt; Gtk::DrawingArea

    def initialize(parent)
        @parent = parent

        super()

        @num = [ "75", "150", "225", "300", 
            "375", "450", "525", "600", "675" ]

        set_size_request 1, 30
        signal_connect "expose-event" do
            expose
        end
    end


    def expose

        cr = window.create_cairo_context
        draw_widget cr

    end

    def draw_widget cr

         cr.set_line_width 0.8

        cr.select_font_face("Courier", 
            Cairo::FONT_SLANT_NORMAL, Cairo::FONT_WEIGHT_NORMAL)
        cr.set_font_size 11

        width = allocation.width

        @cur_width = @parent.get_cur_value

        step = (width / 10.0).round

        till = (width / 750.0) * @cur_width
        full = (width / 750.0) * 700

        if @cur_width &gt;= 700

            cr.set_source_rgb(1.0, 1.0, 0.72)
            cr.rectangle(0, 0, full, 30)
            cr.clip
            cr.paint
            cr.reset_clip

            cr.set_source_rgb(1.0, 0.68, 0.68)
            cr.rectangle(full, 0, till-full, 30)
            cr.clip
            cr.paint
            cr.reset_clip

        else
            cr.set_source_rgb 1.0, 1.0, 0.72
            cr.rectangle 0, 0, till, 30
            cr.clip
            cr.paint
            cr.reset_clip
        end


        cr.set_source_rgb(0.35, 0.31, 0.24)

        for i in (1..@num.length)
            cr.move_to i*step, 0
            cr.line_to i*step, 5
            cr.stroke

            te = cr.text_extents @num[i-1]
            cr.move_to i*step-te.width/2, 15
            cr.text_path @num[i-1]
            cr.stroke
        end         
    end
end


class RubyApp &lt; Gtk::Window
    def initialize
        super

        set_title "Burning"
        signal_connect "destroy" do 
            Gtk.main_quit 
        end

        set_size_request 350, 200        
        set_window_position Gtk::Window::POS_CENTER

        @cur_value = 0

        vbox = Gtk::VBox.new false, 2

        scale = Gtk::HScale.new
        scale.set_range 0, 750
        scale.set_digits 0
        scale.set_size_request 160, 35
        scale.set_value @cur_value

        scale.signal_connect "value-changed" do |w|
            on_changed(w)
        end

        fix = Gtk::Fixed.new
        fix.put scale, 50, 50

        vbox.pack_start fix

        @burning = Burning.new(self)
        vbox.pack_start @burning, false, false, 0

        add vbox
        show_all
    end

    def on_changed widget

        @cur_value = widget.value
        @burning.queue_draw
    end

    def get_cur_value
        return @cur_value
    end
end

Gtk.init
    window = RubyApp.new
Gtk.main
</code></pre>


<p>我们将DrawingArea放在窗口的底部，并且手动绘制控件的条目。所有的重要代码放在draw_widget里，通过Burning类的expose方法调用。这个控件生动的显示了媒介的容量和剩余空间。这个控件通过刻度控件来控制。我们自定义控件的最小值为0,最大值为750。如果达到700，我们开始绘制红色。这通常表明超标了。</p>


<pre><code>@num = [ "75", "150", "225", "300", 
    "375", "450", "525", "600", "675" ]
</code></pre>


<p>这些数字显示在控件上。他们显示了媒介的容量。</p>


<pre><code>@cur_width = @parent.get_cur_value
</code></pre>


<p>通过父控件我们获得刻度控件的值。</p>


<pre><code>till = (width / 750.0) * @cur_width
full = (width / 750.0) * 700
</code></pre>


<p>我们使用width变量进行刻度值和自定义控件尺寸的转换。注意我们使用了浮点数，得到较大精度的绘制。<em>till</em>参数决定了绘制的总大小，它的值来自刻度控件。它是整个区域的比例。<em>full</em>参数决定了从什么位置开始绘制红色。</p>


<pre><code>cr.set_source_rgb(1.0, 1.0, 0.72)
cr.rectangle(0, 0, full, 30)
cr.clip
cr.paint
cr.reset_clip
</code></pre>


<p>绘制黄色矩形直到<em>full</em>点。</p>


<pre><code>te = cr.text_extents @num[i-1]
cr.move_to i*step-te.width/2, 15
cr.text_path @num[i-1]
cr.stroke
</code></pre>


<p>这些代码绘制了burning控件的数字。我们计算了文本恰当的位置。</p>


<pre><code>def on_changed widget

    @cur_value = widget.value
    @burning.queue_draw
end
</code></pre>


<p>我们获取刻度控件的值保存在<em>cur_value</em>变量中，稍后使用。重绘burning控件。</p>


<p><img alt="image" src="http://zetcode.com/img/gui/rubygtk/burning.png"><br>
<em>图片：Burning widget</em></p>


<p>在这一章中，我们创建了一个自定义控件。</p>


<hr>


<p>原文地址： <a href="http://zetcode.com/gui/rubygtk/customwidget/">http://zetcode.com/gui/rubygtk/customwidget/</a><br>
翻译：龙昌  admin@longchangjin.cn </p>

]]></content>
  </entry>
  
</feed>
