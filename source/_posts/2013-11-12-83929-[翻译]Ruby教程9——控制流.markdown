---
layout: post
title: "[翻译]Ruby教程9——控制流"
date: 2013-11-12 12:00:56 +0000
comments: true
post_id: 83929
permalink: /archives/83929.html
categories: ["Ruby栏目"]
tags: ["Ruby", "翻译"]
---

<h1>控制流</h1>
<p>这章的教程我们将讨论控制流。</p>
<p>条件和循环改变了Ruby程序的流程。条件式是执行条件语句下面的特定语句。循环是执行多次的代码块。程序开始后，语句从源文件顶部到底部一行一行的执行。</p>
<h2>if语句</h2>
<p>if关键字用于检查一个表达式是否为真。如果为真则执行语句。这个语句可以是单一的语句，也可以是复合语句。复合语句是由多条语句构成的闭合代码块。代码块用<em>end</em>关键字闭合，<em>then</em>关键字是可选的。</p>
<pre><code>#!/usr/bin/ruby

num = gets.to_i

if num &gt; 0 then

    puts "num variable is positive"
    puts "num variable equals to #{num}"
end
</code></pre>
<p>输入一个数字，如果这个数字大于0则打印两条消息，否则什么也不做。</p>
<p>$ ./simpleif.rb <br>
4<br>
num variable is positive<br>
num variable equals to 4  </p>
<p>条件为真并且消息在终端上打印了。</p>
<hr>
<p>我们可以使用<em>else</em>关键字不创建一个简单的分支。如果<em>if</em>关键字后的表达式求值为假，那么<em>else</em>后面的语句将自动执行。这些代码使用<em>end</em>关键字闭合起来。</p>
<pre><code>#!/usr/bin/ruby

age = 17

if age &gt; 18

    puts "Driving licence issued"
else

    puts "Driving licence not permitted"
end
</code></pre>
<p>这里创建了一个<em>age</em>变量，布尔表达式求值为假，因此在终端上打印"Driving licence not permitted"。</p>
<p>$ ./licence.rb <br>
Driving licence not permitted  </p>
<p>我们可以使用<em>elsif</em>关键字创建多个分支。仅当前一个条件不为真时<em>elsif</em>关键字才会测试另一个条件。注意我们可以使用多个<em>elsif</em>关键字。</p>
<pre><code>#!/usr/bin/ruby

print "Enter a number: "

num = gets.to_i

if num &lt; 0

    puts "#{num} is negative"
elsif num == 0

   puts "#{num} is zero"
elsif num &gt; 0

   puts "#{num} is positive"
end
</code></pre>
<p>创建一个数字变量判断它是正数、负数还是0。根据输入值的不同将打印不同的消息。</p>
<h2>case语句</h2>
<p><em>case</em>语句是一个程序控制流语句。它允许一个变量或者表达式的值控制程序的执行流程。相比<em>if</em>、<em>elsif</em>它创建多分支更简单。</p>
<p>我们创建一个变量或者表达式。<em>case</em>关键字用于针对一个列表的值测试这个变量或者表达式的值。这个列表的值是使用<em>when</em>关键字呈现出来。如果值匹配，那么<em>when</em>关键字后面的语句将执行。有一个可选的<em>else</em>语句，如果没有匹配的它将执行。</p>
<pre><code>#!/usr/bin/ruby

print "Enter top level domain: "

domain = gets.chomp

case domain
    when "us"
        puts "United States"
    when "de" 
        puts "Germany"
    when "sk" 
        puts "Slovakia"
    when "hu" 
        puts "Hungary"
    else
        puts "Unknown"
end
</code></pre>
<p>这个程序中我们创建了一个<em>domain</em>变量，它的值从命令行读取。使用<em>when</em>语句测试这个变量的值。这有些选项。如果值等于"us"则打印"United States"字符串。</p>
<pre><code>domain = gets.chomp
</code></pre>
<p>我们使用<em>gets</em>方法获取一个输入值。使用<em>chomp</em>方法去掉换行符。</p>
<p>$ ./domains.rb <br>
Enter top level domain: hu<br>
Hungary  </p>
<p>我们输入"hu"，程序返回"Hungary"。</p>
<h2>while、until语句</h2>
<p><em>while</em>语句是一个控制流语句允许代码多次执行。当的条件为真时代码将执行。</p>
<p><em>while</em>关键字执行使用<em>end</em>闭合的代码块语句。每次表达式为真时这些语句将执行。</p>
<pre><code>#!/usr/bin/ruby

i = 0
sum = 0

while i &lt; 10  do
   i = i + 1
   sum = sum + i
end

puts "The sum of 0..9 values is #{sum}"
</code></pre>
<p>这个例子计算了一个范围数的和。</p>
<p>while循环有三部分：初始化、测试和更新。每次执行语句称为周期。</p>
<pre><code>i = 0
sum = 0
</code></pre>
<p>初始化变量<em>i</em>和<em>sum</em>。<em>i</em>用于计数。</p>
<pre><code>while i &lt; 10  do
   ...
end
</code></pre>
<p><em>while</em>和<em>do</em>之间的表达式是第二阶段，测试。注意<em>do</em>关键字是可选的。，内部的语句将会执行直到表达式的值为假。</p>
<pre><code>i = i + 1
</code></pre>
<p>这是循环的第三阶段——更新。我们增加计数值。注意不当的处理会导致死循环。</p>
<p>$ ./while.rb <br>
The sum of 0..9 values is 55  </p>
<p>This is the output of the example. </p>
<hr>
<p>当条件为假时<em>until</em>控制流语句将执行。当条件为真时循环停止。</p>
<pre><code>#!/usr/bin/ruby

hours_left = 12

until hours_left == 0

    if hours_left == 1
        puts "There is #{hours_left} hour left"
    else
        puts "There are #{hours_left} hours left"
    end

    hours_left -= 1
end
</code></pre>
<p>这个例子中创建了一个变量<em>hours_left</em>。我们开始计数，每次循环打印还有几个小时。当变量值等于0时循环停止。</p>
<p>$ ./until.rb <br>
There are 12 hours left<br>
There are 11 hours left<br>
There are 10 hours left<br>
There are 9 hours left<br>
There are 8 hours left<br>
There are 7 hours left<br>
There are 6 hours left<br>
There are 5 hours left<br>
There are 4 hours left<br>
There are 3 hours left<br>
There are 2 hours left<br>
There is 1 hour left  </p>
<p>程序运行的结果。</p>
<h2>for语句</h2>
<p>当循环次数是已知时，我们可以使用<em>for</em>语句。<em>for</em>循环使用<em>in</em>接着一个范围。对这个范围的每个元素都执行代码块的语句。这些语句使用<em>end</em>关键字闭合。<em>do</em>关键字是可选的。</p>
<pre><code>#!/usr/bin/ruby

for i in 0..9 do

    puts "#{i}"
end
</code></pre>
<p>这个例子中我们打印了0到9的数。每次循环<em>i</em>变量保存了这个范围的一个数，这个数将在终端上打印。</p>
<p>$ ./forloop.rb <br>
0<br>
1<br>
2<br>
3<br>
4<br>
5<br>
6<br>
7<br>
8<br>
9  </p>
<p>例子运行结果。</p>
<hr>
<p>要遍历一个数组的元素可以使用数组的<em>length</em>方法。</p>
<pre><code>#!/usr/bin/ruby

planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter",
    "Saturn", "Uranus", "Neptune"]

for i in 0...planets.length

    puts planets[i]
end
</code></pre>
<p>这个例子中我们创建了一个数组<em>planets</em>，我们遍历这个数组打印这个数组的每个元素。</p>
<pre><code>planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter",
    "Saturn", "Uranus", "Neptune"]
</code></pre>
<p><em>planets</em>数组。</p>
<pre><code>for i in 0...planets.length
</code></pre>
<p><em>length</em>方法返回数组的长度。数组从0开始，最后一个索引是n-1。</p>
<pre><code>puts planets[i]
</code></pre>
<p>打印数组指定的一个元素。</p>
<p>$ ./planets2.rb <br>
Mercury<br>
Venus<br>
Earth<br>
Mars<br>
Jupiter<br>
Saturn<br>
Uranus<br>
Neptune  </p>
<p>程序的运行结果。</p>
<h2>each方法</h2>
<p>在Ruby中我们可以使用<em>each</em>方法遍历数组的每个元素。它接受两个参数。一个元素和一个代码块。元素放在管道之间，它保存了当前循环的数据项。代码块是每次要执行的内容。</p>
<pre><code>#!/usr/bin/ruby

planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter",
    "Saturn", "Uranus", "Neptune"]

planets.each do |planet|

    puts planet
end
</code></pre>
<p>这个例子我们使用<em>each</em>迭代器遍历<em>planets</em>数组。</p>
<pre><code>planets.each do |planet|

    puts planet
end
</code></pre>
<p><em>each</em>迭代器是<em>planets</em>数组的一个方法。<em>planet</em>保存了此次迭代的数据项。我们可以使用任何我们想使用的字符。我们可以使用{}代替<em>do</em>和<em>end</em>关键字。</p>
<h2>break、next语句</h2>
<p><em>break</em>语句用于终止<em>while</em>、<em>for</em>或者<em>case</em>的代码块语句。</p>
<pre><code>#!/usr/bin/ruby

while true

    r = 1 + rand(30)
    print "#{r} "

    if r == 22
        break
    end
end

puts
</code></pre>
<p>我们定义了一个无限循环，使用<em>break</em>语句退出这个循环。我们选择1到30的数，打印它。如果等于22则结束<em>while</em>循环。</p>
<pre><code>while true
   ...
end
</code></pre>
<p>这是一个无限循环，<em>while</em>的条件总是为真。退出无限循环的唯一方法是使用<em>break</em>。</p>
<pre><code>r = 1 + rand(30)
print "#{r} "
</code></pre>
<p>计算从1到30的随机数，并将其打印。</p>
<pre><code>if r == 22
    break
end
</code></pre>
<p>如果数等于22,结束循环。</p>
<p>$ ./break.rb <br>
20 14 6 26 30 12 2 10 18 29 28 11 30 26 20 22   </p>
<p>可能的输出结果。</p>
<hr>
<p><em>next</em>语句用于跳过此次循环，继续下次循环。它可与<em>for</em>和<em>while</em>联合使用。</p>
<p>接下来的例子我们打印不能被2整除的数一列表。</p>
<pre><code>#!/usr/bin/ruby

num = 0

while num &lt; 100

    num += 1

    if (num % 2 == 0)
        next
    end

    print "#{num} " 
end

puts
</code></pre>
<p>我们使用<em>while</em>循环迭代1到99的数。</p>
<pre><code>if (num % 2 == 0)
    next
end
</code></pre>
<p>如果这个数可以被2整除，<em>next</em>语句将执行，循环的其余将跳过。</p>
<p>$ ./next.rb <br>
1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 <br>
41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 <br>
79 81 83 85 87 89 91 93 95 97 99   </p>
<p>程序的输出结果。</p>
<h2>redo语句</h2>
<p><em>redo</em>语句重新开始循环而不检查循环的条件式。下面的例子有点复杂，它展示了<em>redo</em>语句和其它的一些特性。</p>
<pre><code>#!/usr/bin/ruby

options = ["rock", "scissors", "paper"]

while true

    print &lt;&lt;TEXT
1 - rock
2 - scissors
3 - paper
9 - end game
TEXT

    val = gets.to_i

    r = rand(3) + 1

    if val == 9 
        puts "End"
        exit
    end

    if ![1, 2, 3, 9].include?(val)
        puts "Invalid option"
        redo
    end

    computer = options[r-1]
    human = options[val-1]

    puts "I have #{computer}, you have #{human}"

    if val == r
        puts "Tie, next throw"
        redo
    end


    if val == 1 and r == 2
        puts "Rock blunts scissors, you win"

    elsif val == 2 and r == 1
        puts "Rock blunts scissors, you loose"

    elsif val == 2 and r == 3
        puts "Scissors cut paper, you win"

    elsif val == 3 and r == 2
        puts "Scissors cut paper, you loose"

    elsif val == 3 and r == 1
        puts "Paper covers rock, you win"

    elsif val == 1 and r == 3
        puts "Paper covers rock, you loose"

    end    
end
</code></pre>
<p>这是一个简单的Rock-paper-scissors游戏。这个例子中我们用到了<em>redo</em>语句、条件式、随机数、数组和输入。</p>
<pre><code>options = ["rock", "scissors", "paper"]
</code></pre>
<p>定义了游戏可能用到的选项数组。这三个词在打印消息时会用到。</p>
<pre><code>    print &lt;&lt;TEXT
1 - rock
2 - scissors
3 - paper
9 - end game
TEXT
</code></pre>
<p>使用定界符在终端上打印一个菜单。菜单在每次游戏循环时都打印。</p>
<pre><code>val = gets.to_i

r = rand(3) + 1
</code></pre>
<p>这几行代码从终端输入一个值，然后选择一个1、2、3的随机数。</p>
<pre><code>if val == 9 
    puts "End"
    exit
end
</code></pre>
<p>如果输入为9，打印'End'并退出程序。</p>
<pre><code>if ![1, 2, 3, 9].include?(val)
    puts "Invalid option"
    redo
end
</code></pre>
<p>如果用户选择了一个不是菜单的值，我们提示无效选项并重新循环。</p>
<pre><code>computer = options[r-1]
human = options[val-1]

puts "I have #{computer}, you have #{human}"
</code></pre>
<p>将数字转化为字符串，并同时打印用户的选择和计算机的选择。</p>
<pre><code>if val == r
    puts "Tie, next throw"
    redo
end
</code></pre>
<p>如果选择相同则是平局，开始新的游戏循环。</p>
<pre><code>if val == 1 and r == 2
    puts "Rock blunts scissors, you win"

elsif val == 2 and r == 1
    puts "Rock blunts scissors, you loose"
...
</code></pre>
<p>使用多个<em>if</em>、<em>elsif</em>分支，比较用户和计算机的选择以决定谁是赢家。</p>
<p>$ ./redo.rb <br>
1 - rock<br>
2 - scissors<br>
3 - paper<br>
9 - end game<br>
3<br>
I have paper, you have paper<br>
Tie, next throw<br>
1 - rock<br>
2 - scissors<br>
3 - paper<br>
9 - end game<br>
2<br>
I have rock, you have scissors<br>
Rock blunts scissors, you loose<br>
1 - rock<br>
2 - scissors<br>
3 - paper<br>
9 - end game<br>
1<br>
I have scissors, you have rock<br>
Rock blunts scissors, you win<br>
1 - rock<br>
2 - scissors<br>
3 - paper<br>
9 - end game<br>
9<br>
End  </p>
<p>程序输出结果。</p>
<p>这部分的Ruby教程我们谈论了结构控制流。</p>
<hr>
<p>原文地址： <a href="http://zetcode.com/lang/rubytutorial/flowcontrol/">http://zetcode.com/lang/rubytutorial/flowcontrol/</a><br>
翻译：龙昌  admin@longchangjin.cn<br>
完整教程：<a href="https://github.com/wusuopu/Ruby-tutorial">https://github.com/wusuopu/Ruby-tutorial</a> </p>
