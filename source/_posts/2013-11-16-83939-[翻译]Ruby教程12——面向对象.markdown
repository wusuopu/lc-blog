---
layout: post
title: "[翻译]Ruby教程12——面向对象"
date: 2013-11-16 15:09:17 +0000
comments: true
post_id: 83939
permalink: /archives/83939.html
categories: ["Ruby栏目"]
tags: ["Ruby", "翻译"]
---

<h1>Ruby的面向对象编程</h1>
<p>在这部分的Ruby教程我们将讨论面向对象编程。</p>
<p>编程语言有过程式编程、函数式编程和面向对象编程范式。Ruby中面向对象语言并包含了一些函数式和过程式。</p>
<p>面向对象(OOP)是一种使用对象及其接口来设计应用程序和计算机程序的编程范式。</p>
<p>面向对象的基本概念如下：</p>
<ul>
<li>抽象（Abstraction）  </li>
<li>多态（Polymorphism）  </li>
<li>封装（Encapsulation）  </li>
<li>继承（Inheritance）  </li>
</ul>
<p>抽象是对于现实中复杂的问题通过适当的建模将其简化。多态是使用相同的操作符或者函数对不同的输入数据进行不同处理。封装是将一个类的具体实现对其他对象进行隐藏。继承是一种使用已经定义的类来创建新的类的方式。</p>
<h2>对象</h2>
<p>对象是Ruby面向对象程序的基本组成。一个对象包含了数据和方法。对象之间通过方法进行交流。每个对象可以接收消息、发送消息和处理数据。</p>
<p>创建一个对象需要两步。首先定义一个类。类是对象的模板。它是一张蓝图，用来描述这个类的所有对象的状态和行为。一个类可以创建多个对象。运行时创建的对象称为这个类的实例。</p>
<pre><code>#!/usr/bin/ruby

class Being

end

b = Being.new
puts b
</code></pre>
<p>第一个例子我们创建了一个简单的对象。</p>
<pre><code>class Being

end
</code></pre>
<p>定义一个简单的类，内容为空。表示它没有任何数据和方法。</p>
<pre><code>b = Being.new
</code></pre>
<p>创建一个<em>Being</em>类的新实例。这里我们使用<em>new</em>方法，新创建的对象保存在变量b中。</p>
<pre><code>puts b
</code></pre>
<p>在终端上打印对象的基本描述。当我们打印一个对象时，实际上是调用的<em>to_s</em>方法。但是我们没有任何的定义，因为每个创建的对象都是继承自<em>Object</em>。它有一些基本的函数，<em>to_s</em>是其中一个。</p>
<pre><code>$ ./simple.rb
#&lt;Being:0x9f3c290&gt;
</code></pre>
<p>我们得到这个对象的类名。</p>
<h2>构造函数</h2>
<p>构造函数是一个特殊的方法。它在对象创建时自动执行。它没有返回值。构造函数的目的是初始化对象的状态。在Ruby中构造函数名为<em>intialize</em>。</p>
<p>构造函数不能被继承。父对象的构造函数是通过<em>super</em>方法来调用。它们的调用顺序与继承顺序一致。</p>
<pre><code>#!/usr/bin/ruby

class Being

    def initialize
        puts "Being is created"
    end

end

Being.new
</code></pre>
<p>定义一个<em>Being</em>类。</p>
<pre><code>class Being

    def initialize
        puts "Being is created"
    end

end
</code></pre>
<p>类<em>Being</em>定义了一个构造函数名为<em>initialize</em>。它在终端上打印一条信息。Ruby中方法定义位置<em>def</em>和<em>end</em>关键字之间。</p>
<pre><code>Being.new
</code></pre>
<p>创建一个<em>Being</em>类的实例对象。在对象初创时构造函数将被调用。</p>
<p>$ ./constructor.rb<br>
Being is created  </p>
<p>程序的输出。</p>
<hr>
<p>对象的属性是绑定在对象里的数据项。这些数据项也称为实例变量（instance variables）或者成员字段（member fields）。实例变量在类中定义但是各个对象都有单独的复本。</p>
<p>下面的例子我们初始化类的成员数据。变量初始化是构造函数的典型工作。</p>
<pre><code>#!/usr/bin/ruby

class Person

    def initialize name
        @name = name
    end

    def get_name
        @name
    end

end

p1 = Person.new "Jane"
p2 = Person.new "Beky"

puts p1.get_name
puts p2.get_name
</code></pre>
<p>上面的例子定义了一个<em>Person</em>类，并且有一个实例变量。</p>
<pre><code>class Person

    def initialize name
        @name = name
    end
</code></pre>
<p><em>Person</em>的构造函数设置了一个实例变量<em>name</em>。构造函数的<em>name</em>参数是在创建时传递的。构造函数是在实例对象创建时调用。<em>@name</em>是一个实例变量。在Ruby中实例变量以@字符开头。</p>
<pre><code>def get_name
    @name
end
</code></pre>
<p><em>get_name</em>方法返回成员字段。在Ruby蝇成员字段只能通过方法来访问。</p>
<pre><code>p1 = Person.new "Jane"
p2 = Person.new "Beky"
</code></pre>
<p>我们创建了<em>Person</em>类的两个对象。每个对象的构造函数都传递了一个字符串参数。</p>
<pre><code>puts p1.get_name
puts p2.get_name
</code></pre>
<p>通过调用每个对象的<em>get_name</em>方法来打印成员字段。</p>
<p>$ ./person.rb<br>
Jane<br>
Beky  </p>
<p>从程序的输出看到每个实例都有自己的<em>name</em>成员字段。</p>
<hr>
<p>我们可以创建一个对象而不调用构造函数。Ruby有一个特殊的<em>allocate</em>方法。<em>allocate</em>方法为新的对象分配空间而不调用<em>initialize</em>。</p>
<pre><code>#!/usr/bin/ruby

class Being

   def initialize
       puts "Being created"
   end   
end


b1 = Being.new
b2 = Being.allocate
puts b2
</code></pre>
<p>这个例子我们创建了两个对象。第一介对象使用<em>new</em>方法，第二个对象使用<em>allocate</em>方法。</p>
<pre><code>b1 = Being.new
</code></pre>
<p>这里我们通过<em>new</em>关键字创建一个实例对象。构造函数<em>initialize</em>将会调用，并且在终端上打印消息。</p>
<pre><code>b2 = Being.allocate
puts b2
</code></pre>
<p>这里使用<em>allocate</em>方法，没有调用构造函数。使用<em>puts</em>关键字调用对象的<em>to_s</em>方法将其显示。</p>
<pre><code>$ ./allocate.rb
Being created
#&lt;Being:0x8ea0044&gt;
</code></pre>
<p>程序的输出。</p>
<h2>构造函数重载</h2>
<p>重载构造函数可以使用类有多种类型的构造函数。这样我们可以使用不同数量或者不同类型的参数来创建对象。</p>
<p>Ruby没有我们所知的其他语言那样的构造函数重载。在Ruby中这种行为可以通过一些有默认值的扩展参数来模拟。</p>
<pre><code>#!/usr/bin/ruby


class Person

    def initialize name="unknown", age=0
        @name = name
        @age = age        
    end

    def to_s
        "Name: #{@name}, Age: #{@age}"
    end

end

p1 = Person.new
p2 = Person.new "unknown", 17
p3 = Person.new "Becky", 19
p4 = Person.new "Robert"

p p1, p2, p3, p4
</code></pre>
<p>这个例子展示了模拟构造函数的重载。当<em>name</em>参数没有指定时使用<em>"unknow"</em>代替，对于<em>age</em>使用0。</p>
<pre><code>def initialize name="unknown", age=0
    @name = name
    @age = age        
end
</code></pre>
<p>这个构造传入两个参数。它们都有默认值。当我们创建对象没有指定值时就使用默认值。注意参数顺序必须一致。第一个是<em>name</em>，第二介是<em>age</em>。</p>
<pre><code>p1 = Person.new
p2 = Person.new "unknown", 17
p3 = Person.new "Becky", 19
p4 = Person.new "Robert"

p p1, p2, p3, p4
</code></pre>
<p>我们创建了四个对象。构造函数传入了不同个数的参数。</p>
<p>$ ./consover.rb<br>
Name: unknown, Age: 0<br>
Name: unknown, Age: 17<br>
Name: Becky, Age: 19<br>
Name: Robert, Age: 0  </p>
<p>例子的输出结果。</p>
<h2>方法</h2>
<p>方法是定义在类里面的函数。它们用于对对象的属性执行一些操作。方法在面向对象范式的封装性中必不可少。例如我们<em>AccessDatabase</em>类中有一个<em>connect</em>方法，我们不需要关心这个方法到底是如何连接数据库的。我们仅需要知道使用这个方法连接数据库。这对程序功能的划分必不可少，尤其是大的应用程序。</p>
<p>在Ruby中数据仅能够通过方法访问。</p>
<pre><code>#!/usr/bin/ruby

class Person

    def initialize name
        @name = name
    end

    def get_name
        @name
    end

end

per = Person.new "Jane"

puts per.get_name
puts per.send :get_name
</code></pre>
<p>这个例子展示了调用方法的两个基本方式。</p>
<pre><code>puts per.get_name
</code></pre>
<p>通常的方式是在对象后面使用点操作符。</p>
<pre><code>puts per.send :get_name
</code></pre>
<p>另种方式是使用内建的<em>send</em>方法。它将方法名符号作为参数传入。</p>
<hr>
<p>方法通常对对象的数据进行一些操作。</p>
<pre><code>#!/usr/bin/ruby

class Circle

    @@PI = 3.141592

    def initialize
        @radius = 0
    end

    def set_radius radius
        @radius = radius
    end

    def area
        @radius * @radius * @@PI
    end

end


c = Circle.new
c.set_radius 5
puts c.area
</code></pre>
<p>这个例子的代码我们定义了一个<em>Circle</em>类两个方法。</p>
<pre><code>@@PI = 3.141592
</code></pre>
<p>我们在<em>Circle</em>类中定义了一个<em>@@PI</em>变量。类变量以<em>@@</em>开头。类变量是属于类的，每个对象都可以访问它们的类变量。我们<em>@@PI</em>来计算圆的面积。</p>
<p>def initialize
    @radius = 0
end</p>
<p>定义了一个成员字段。它是圆的半径。如果我们想在外部修改这个变量，我们必须使用公开的<em>set_radius</em>方法。这个数据是受保护的。</p>
<pre><code>def set_radius radius
    @radius = radius
end
</code></pre>
<p>这是<em>set_radius</em>方法。它为<em>@radius</em>实例变量设置一个新的值。</p>
<pre><code>def area
    @radius * @radius * @@PI
end
</code></pre>
<p><em>area</em>方法返回圆的面积。</p>
<pre><code>c = Circle.new
c.set_radius 5
puts c.area
</code></pre>
<p>我们创建一个<em>Circle</em>类的实例对象，并且通过<em>set_radius</em>方法设置它的半径。</p>
<p>$ ./circle.rb<br>
78.5398  </p>
<p>例子的输出结果。</p>
<h2>访问修饰符</h2>
<p>访问修饰符设置成员和方法的可见性。Ruby有三种访问修饰符：<em>public</em>、<em>protected</em>和<em>private</em>。在Ruby中所有的数据都是私有的。访问修饰符可以仅对方法使用。Ruby中的方法是公开的，除非使用了其他修饰符。</p>
<p>公开的方法在类的内部和外部都可以访问。保护和私有的方法略微不同。都不能在类外部访问，仅能在这个类和它的子类或者父类内部访问。</p>
<p>注意与其他面向对象编程语言不同，继承不会充当访问修饰符。仅有两件事很重要。第一，我们是否可以在类的内部或者外部访问方法。第二，是否我们要使用或者不使用<em>self</em>关键字。</p>
<p>访问修饰符保护数据避免受到意外的修改。使用程序更健壮。实现一些主要用于修改数据的方法。这些方法最好是私有的。只有真正需要修改才将接口公开给用户。多年来用户习惯使用特殊方法并对打破向后兼容普遍不满。</p>
<pre><code>#!/usr/bin/ruby

class Some

     def method1
         puts "public method1 called"
     end

    public

     def method2
         puts "public method2 called"  
     end

     def method3
         puts "public method3 called"
         method1
         self.method1
     end          
end

s = Some.new
s.method1
s.method2
s.method3
</code></pre>
<p>这个例子解释了Ruby公有方法的用法。</p>
<pre><code>def method1
    puts "public method1 called"
end
</code></pre>
<p><em>method1</em>是公有的，尽管我们没有使用<em>public</em>修饰符。因为方法默认都是公有的，除非指明为其他。</p>
<pre><code>public

  def method2
      puts "public method2 called"  
  end

  ...
</code></pre>
<p><em>public</em>关键字之后的方法是公有的。</p>
<pre><code>def method3
    puts "public method3 called"
    method1
    self.method1
end
</code></pre>
<p>在公有方法<em>method3</em>中我们通过使用和没有使用<em>self</em>关键字调用了另一个公有方法。</p>
<pre><code>s = Some.new
s.method1
s.method2
s.method3
</code></pre>
<p>公有方法是仅能够在类外部调用的方法。</p>
<p>$ ./public_methods.rb  
public method1 called  
public method2 called  
public method3 called  
public method1 called  
public method1 called</p>
<p>例子运行结果。</p>
<hr>
<p>下一个例子看私有方法。</p>
<pre><code>#!/usr/bin/ruby


class Some

    def initialize
        method1
        # self.method1
    end

    private

     def method1
         puts "private method1 called"  
     end

end


s = Some.new
# s.method1
</code></pre>
<p>私有方法是Ruby中严厉的方法。它们只能够在类内部调用并且不能使用<em>self</em>关键字。</p>
<pre><code>def initialize
    method1
    # self.method1
end
</code></pre>
<p>在构造函数方法中我们调用了私有方法<em>method1</em>。使用<em>self</em>调用的被注释了。私有方法不能指定接收者。</p>
<pre><code>private

  def method1
      puts "private method1 called"  
  end
</code></pre>
<p><em>private</em>关键字之后的是私有方法。</p>
<pre><code>s = Some.new
# s.method1
</code></pre>
<p>创建了一个<em>Some</em>类的实例对象。在外部调用这个方法是禁止的，如果将这行取消注释Ruby解释器会报错。</p>
<p>$ ./private_methods.rb<br>
private method called  </p>
<p>输出结果。</p>
<hr>
<p>最后我们使用保护方法。保护方法和私有方法的区别很小。保护方法与私有方法相似，不过它们可以通过<em>self</em>关键字调用。</p>
<pre><code>#!/usr/bin/ruby

class Some

    def initialize
        method1
        self.method1
    end

    protected

     def method1
         puts "protected method1 called"  
     end

end


s = Some.new
# s.method1
</code></pre>
<p>上面的例子展示了保护方法的用法。</p>
<pre><code>def initialize
    method1
    self.method1
end
</code></pre>
<p>保护方法可以使用和不使用<em>self</em>关键字。</p>
<pre><code>protected

  def method1
      puts "protected method1 called"  
  end
</code></pre>
<p>保护方法以<em>protected</em>关键字开头。</p>
<pre><code>s = Some.new
# s.method1
</code></pre>
<p>保护方法不能在类外部调用。取消注释会报错。</p>
<h2>继承</h2>
<p>继承是使用已经定义的类来构造新的类的方式。新构建的类称为派生类。派生自的类称为基类。继承的好处是代码利用，减少程序的复杂性。派生类（后代）覆盖或者扩展基类（祖先）的函数。</p>
<pre><code>#!/usr/bin/ruby

class Being

    def initialize
        puts "Being class created"
    end
end

class Human &lt; Being

   def initialize
       super
       puts "Human class created"
   end
end

Being.new
Human.new
</code></pre>
<p>这个程序我们定义了两个类：一个基类<em>Being</em>和一个派生类<em>Human</em>。</p>
<pre><code>class Human &lt; Being
</code></pre>
<p>Ruby中使用<em>&lt;</em>操作符创建继承关系。<em>Human</em>类继承自<em>Being</em>类。</p>
<pre><code>def initialize
    super
    puts "Human class created"
end
</code></pre>
<p><em>super</em>方法调用父类的构造函数。</p>
<pre><code>Being.new
Human.new
</code></pre>
<p>实例化了<em>Being</em>类和<em>Human</em>类。</p>
<p>$ ./inheritance.rb <br>
Being class created<br>
Being class created<br>
Human class created  </p>
<p>首先创建<em>Being</em>类。基类<em>Human</em>同样也调用了父类的构造函数。</p>
<hr>
<p>一个对象的关系可能很复杂。一个对象可以有多个祖先。Ruby有<em>ancestors</em>方法获取一个类的祖先列表。</p>
<p>每个Ruby对象都是<em>Object</em>、<em>BaseObject</em>和<em>Kernel</em>的后代。它们内建于Ruby语言的内核中。</p>
<pre><code>#!/usr/bin/ruby


class Being 
end

class Living &lt; Being 
end

class Mammal &lt; Living 
end

class Human &lt; Mammal 
end


p Human.ancestors
</code></pre>
<p>这个例子中定义了四个类。<em>Human</em>、<em>Mammal</em>、<em>Living</em>和<em>Being</em>。</p>
<pre><code>p Human.ancestors
</code></pre>
<p>打印Human类的祖先。</p>
<p>$ ./ancestors.rb <br>
[Human, Mammal, Living, Being, Object, Kernel, BasicObject]  </p>
<p><em>Human</em>类有三个自定义的和三个内建的祖先。</p>
<hr>
<p>一个更复杂的例子。</p>
<pre><code>#!/usr/bin/ruby

class Being

    @@count = 0

    def initialize
        @@count += 1
        puts "Being class created"
    end

    def show_count
        "There are #{@@count} beings"
    end

end

class Human &lt; Being

   def initialize
       super
       puts "Human is created"
   end
end

class Animal &lt; Being

   def initialize
       super
       puts "Animal is created"
   end
end

class Dog &lt; Animal

   def initialize
       super
       puts "Dog is created"
   end
end

Human.new
d = Dog.new
puts d.show_count
</code></pre>
<p>我们定义了四个类。继承的层级有点复杂。<em>Human</em>和<em>Animal</em>继承自<em>Being</em>。<em>Dog</em>继承自<em>Animal</em>。我们还使用了类变量来统计beings的创建个数。</p>
<pre><code>@@count = 0
</code></pre>
<p>我们定义一个类变量。它用于统计beings的创建个数。</p>
<pre><code>def initialize
    @@count += 1
    puts "Being class created"
end
</code></pre>
<p>每次<em>Being</em>类实例化时我们将<em>@@count</em>变量加1。这使用我们可以跟踪实例创建的个数。</p>
<pre><code>class Animal &lt; Being
...

class Dog &lt; Animal
...
</code></pre>
<p><em>Animal</em>继承自<em>Being</em>，<em>Dog</em>继承自<em>Animal</em>。进一步的<em>Dog</em>也继承自<em>Being</em>。</p>
<pre><code>Human.new
d = Dog.new
puts d.show_count
</code></pre>
<p>我们通过<em>Human</em>和<em>Dog</em>创建实例。然后调用<em>Dog</em>对象的<em>show_count</em>方法。<em>Dog</em>类没有该方法，将调用<em>Being</em>类的。</p>
<p>$ ./inheritance2.rb 
Being class created<br>
Human is created<br>
Being class created<br>
Animal is created<br>
Dog is created<br>
There are 2 beings  </p>
<p><em>Human</em>对象调用了两个构造函数。<em>Dog</em>对象调用了三个构造函数。创建了两个<em>Being</em>实例。</p>
<hr>
<p>方法和数据成员可见性在继承中不起作用。这与其他通常的面向对象编程语言是显著的不同。</p>
<p>在C#或者Java中公有的和保护的数据成员和方法可以被继承，私有的不能。与这相比，在Ruby中私有的数据成员和方法也可以被继承。数据成员和方法的可见性不会受继承的影响。</p>
<pre><code>#!/usr/bin/ruby

class Base

    def initialize
        @name = "Base"
    end

    private

     def private_method
         puts "private method called"
     end

    protected

     def protected_method
         puts "protected_method called"
     end

    public

     def get_name
         return @name
     end
end


class Derived &lt; Base

    def public_method
        private_method
        protected_method
    end
end

d = Derived.new
d.public_method
puts d.get_name
</code></pre>
<p>这个例子中有两个类。<em>Derived</em>继承乍<em>Base</em>。它继承了三个方法和一个数据字段。</p>
<pre><code>def public_method
    private_method
    protected_method
end
</code></pre>
<p><em>Derived</em>类的<em>public_method</em>调用了一个私有方法和一个保护方法。它们定义在父类中。</p>
<pre><code>d = Derived.new
d.public_method
puts d.get_name
</code></pre>
<p>创建一个<em>Derived</em>类的实例。调用<em>public_method</em>方法和<em>get_name</em>方法，它返回私有的实例变量<em>@name</em>。记住Ruby中所有的实例变量都是私有的。<em>get_name</em>方法返回这个变量不管<em>@name</em>是私有的还是在父类中定义的。</p>
<p>$ ./inheritance3.rb<br>
private method called<br>
protected_method called<br>
Base  </p>
<p>输出结果证实了在Ruby中公有的、保护的、私有的方法和私有的成员字段都能被继承。</p>
<h2>super方法</h2>
<p><em>super</em>方法调用父类的同名方法。如果没有传递参数它将自动的把当前的所有参数传入。如果写为<em>super()</em>则没有参数传入。</p>
<pre><code>#!/usr/bin/ruby

class Base

    def show x=0, y=0
        p "Base class, x: #{x}, y: #{y}"
    end
end

class Derived &lt; Base

    def show x, y
        super
        super x
        super x, y
        super()
    end
end


d = Derived.new
d.show 3, 3
</code></pre>
<p>这个例子有两个类一个继承。它们都定义了<em>show</em>方法。这个方法在<em>Derived</em>类中使用super调用了父类的方法。</p>
<pre><code>def show x, y
    super
    super x
    super x, y
    super()
end
</code></pre>
<p><em>super</em>不带参数则会传递将当前传入的参数，这里是x=3、y=3。<em>super()</em>方法不传递参数。</p>
<p>$ ./super.rb<br>
"Base class, x: 3, y: 3"<br>
"Base class, x: 3, y: 0"<br>
"Base class, x: 3, y: 3"<br>
"Base class, x: 0, y: 0"  </p>
<p>输出结果。</p>
<p>这是Ruby的面向对象的第一部分。</p>
<hr>
<p>原文地址： <a href="http://zetcode.com/lang/rubytutorial/oop/">http://zetcode.com/lang/rubytutorial/oop/</a><br>
翻译：龙昌  admin@longchangjin.cn<br>
完整教程：<a href="https://github.com/wusuopu/Ruby-tutorial">https://github.com/wusuopu/Ruby-tutorial</a> </p>
