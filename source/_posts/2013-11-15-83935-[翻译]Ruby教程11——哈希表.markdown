---
layout: post
title: "[翻译]Ruby教程11——哈希表"
date: 2013-11-15 11:39:14 +0000
comments: true
post_id: 83935
permalink: /archives/83935.html
categories: ["Ruby栏目"]
tags: ["Ruby", "翻译"]
---

<h1>哈希表</h1>
<p>这部分的教程我们将提到哈希表。哈希表是一个键-值对的集合。与数组相似，不同与数组的是哈希表的索引是确定的，数组的只能是整数。哈希表有时称为相关联的数组。</p>
<p>哈希表是非常有用的集合。它有许多方法供程序员使用。</p>
<h2>创建哈希表</h2>
<p>有两种创建哈希表的方式：使用<em>new</em>关键字或者哈希表的字面量。</p>
<pre><code>#!/usr/bin/ruby

names = Hash.new
names[1] = "Jane"
names[2] = "Thomas"

puts names
</code></pre>
<p>第一个脚本创建了一个哈希表并添加了两个键-值对。</p>
<pre><code>names = Hash.new
</code></pre>
<p>创建一个哈希对象。</p>
<pre><code>names[1] = "Jane"
names[2] = "Thomas"
</code></pre>
<p>添加两对值。数字1、2是哈希表的键。键放在中括号里。<em>names</em>是属于键的值。</p>
<pre><code>puts names
</code></pre>
<p>打印哈希表。</p>
<pre><code>$ ./create.rb  
{1=&gt;"Jane", 2=&gt;"Thomas"}
</code></pre>
<p>从输出结果我们看到一个哈希表是用花括号括起来的。键和值是使用<em>=&gt;</em>符号成对搭配。</p>
<hr>
<p><em>store</em>方法可以用于给哈希表设置一些初始值。它可以代替花括号。</p>
<pre><code>#!/usr/bin/ruby

names = Hash.new
names.store(1, "Jane")
names.store(2, "Thomas")
names.store(3, "Rebecca")

puts names
</code></pre>
<p>创建了一个相似的脚本，这次我们使用<em>store</em>方法。</p>
<pre><code>names.store(1, "Jane")
</code></pre>
<p><em>store</em>方法的第一个参数是键，第二个参数是值。</p>
<hr>
<p>第三个脚本我们使用字面符来创建哈希表。它的值是用花括号括起来的。并且键和值是用<em>=&gt;</em>符号成对分配。</p>
<pre><code>#!/usr/bin/ruby

domains = { "de" =&gt; "Germany",
            "sk" =&gt; "Slovakia",
            "hu" =&gt; "Hungary",
            "us" =&gt; "United States",
            "no" =&gt; "Norway"                       
          }

puts domains["de"]
puts domains["sk"]
</code></pre>
<p>创建哈希表<em>domains</em>包含5对内容。这里键和值都是字符串。</p>
<p>$ ./create3.rb <br>
Germany<br>
Slovakia  </p>
<p>例子的输出结果。</p>
<h2>基本用法</h2>
<p>这一节我们展示Ruby哈希表的一些很基础的方法。</p>
<pre><code>#!/usr/bin/ruby

names = Hash.new

names[1] = "Jane"
names[2] = "Thomas"
names[3] = "Robert"
names[4] = "Julia"
names[5] = "Rebecca"

puts "The size of the hash is #{names.size}"

puts names.keys.inspect
puts names.values.inspect
</code></pre>
<p>上面的脚本中创建了一个有5个值的哈希表，介绍了哈希表的三个方法。</p>
<pre><code>puts "The size of the hash is #{names.size}"
</code></pre>
<p><em>size</em>方法返回哈希表的大小。与<em>length</em>方法相同。</p>
<pre><code>puts names.keys.inspect
puts names.values.inspect
</code></pre>
<p><em>keys</em>方法返回哈希表的所有键。以此类推，<em>values</em>方法返回哈希表的所有值。返回的数据是一个数组形式的。为了使输出更加可读我们使用了<em>inspect</em>方法。</p>
<p>$ ./basic.rb<br>
The size of the hash is 5<br>
[1, 2, 3, 4, 5]<br>
["Jane", "Thomas", "Robert", "Julia", "Rebecca"]  </p>
<p>例子的输出结果。注意最后两个方法是两个数组。</p>
<hr>
<p>这节的第二个例子展示了哈希表实例的三个方法。</p>
<pre><code>#!/usr/bin/ruby

names1 = Hash.new

names1[1] = "Jane"
names1[2] = "Thomas"
names1[3] = "Robert"
names1[4] = "Julia"
names1[5] = "Rebecca"

names2 = names1.dup

puts names1.eql? names2

puts names1.empty?
names1.clear
puts names1.empty?
</code></pre>
<p>创建了一个<em>names</em>哈希表，对该对象调用了三个方法。</p>
<pre><code>names2 = names1.dup
</code></pre>
<p>通过<em>dup</em>方法创建了一个副本。</p>
<pre><code>puts names1.eql? names2
</code></pre>
<p><em>eql?</em>方法比较两个哈希表对象是否相等。这里是相同的，打印true。</p>
<pre><code>puts names1.empty?
</code></pre>
<p><em>empty?</em>方法检查哈希表是否为空。这行打印false，因为<em>names1</em>有5项数据。</p>
<pre><code>names1.clear
puts names1.empty?
</code></pre>
<p><em>clear</em>方法删除哈希表的所有内容。接着调用<em>empty?</em>方法返回true。</p>
<p>$ ./basic2.rb<br>
true<br>
false<br>
true  </p>
<p>输出结果。</p>
<hr>
<p>有一个方法可以判断一个键或者值是否在这个哈希表中。</p>
<pre><code>#!/usr/bin/ruby

domains = { :de =&gt; "Germany", :sk =&gt; "Slovakia",
            :no =&gt; "Norway", :us =&gt; "United States"
          }

puts domains.has_key? :de
puts domains.include? :no
puts domains.key? :me
puts domains.member? :sk

puts domains.has_value? "Slovakia"
puts domains.value? "Germany"
</code></pre>
<p>创建了一个有4对数据的哈希表<em>domains</em>。键是用的符号，因为它更有效。</p>
<pre><code>puts domains.has_key? :de
puts domains.include? :no
puts domains.key? :me
puts domains.member? :sk
</code></pre>
<p>这里我们用了四个方法来判断哈希表是否包含该键。它们的功能都是相同的。</p>
<pre><code>puts domains.has_value? "Slovakia"
puts domains.value? "Germany"
</code></pre>
<p>这里用了两个方法检查这两个字符串是否在哈希表中。</p>
<p>$ ./has.rb<br>
true<br>
true<br>
false<br>
true<br>
true<br>
true  </p>
<p>输出结果。</p>
<hr>
<p>这节的最后一个例子，我们将从哈希表中读取内容。</p>
<pre><code>#!/usr/bin/ruby

stones = { 1 =&gt; "garnet", 2 =&gt; "topaz", 
           3 =&gt; "opal", 4 =&gt; "amethyst"
         }

puts stones.fetch 1
puts stones[2]
puts stones.values_at 1, 2, 3
</code></pre>
<p>这个脚本展示了三个读取值的方法。</p>
<pre><code>puts stones.fetch 1
</code></pre>
<p><em>fetch</em>方法通过给定的键读取值。</p>
<pre><code>puts stones[2]
</code></pre>
<p>也可以使用中括号来获取一个值，这行会打印<em>"topaz"</em>。</p>
<pre><code>puts stones.values_at 1, 2, 3
</code></pre>
<p><em>values_at</em>方法可以一次获取多个值。这个方法通过给定的键返回一个数组包含了对应的值。</p>
<p>$ ./read.rb<br>
garnet<br>
topaz<br>
garnet<br>
topaz<br>
opal  </p>
<p>例子的输出结果。</p>
<h2>循环遍历哈希表</h2>
<p>有一些方法可以用于循环遍历哈希表。</p>
<pre><code>#!/usr/bin/ruby

stones = { 1 =&gt; "garnet", 2 =&gt; "topaz", 
           3 =&gt; "opal", 4 =&gt; "amethyst"
         }

stones.each { |k, v| puts "Key: #{k}, Value: #{v}" }
stones.each_key { |key| puts "#{key}" }
stones.each_value { |val| puts "#{val}" }
stones.each_pair { |k, v| puts "Key: #{k}, Value: #{v}" }
</code></pre>
<p>上面的例子我们展示的四个方法。用这些方法显示了所有的键、值。</p>
<pre><code>stones.each { |k, v| puts "Key: #{k}, Value: #{v}" }
</code></pre>
<p><em>each</em>方法对每个键都调用了给定的代码块，键-值对作为参数传递。</p>
<pre><code>stones.each_key { |key| puts "#{key}" }
</code></pre>
<p>我们使用<em>each_key</em>方法循环遍历了哈希表所有的键。将它们打印在终端上。</p>
<pre><code>stones.each_value { |val| puts "#{val}" }
</code></pre>
<p><em>each_value</em>用于循环遍历哈希表所有的值。</p>
<pre><code>stones.each_pair { |k, v| puts "Key: #{k}, Value: #{v}" }
</code></pre>
<p><em>each_pair</em>方法与<em>each</em>方法相同。</p>
<p>$ ./loop.rb<br>
Key: 1, Value: garnet<br>
Key: 2, Value: topaz<br>
Key: 3, Value: opal<br>
Key: 4, Value: amethyst<br>
1<br>
2<br>
3<br>
4<br>
garnet<br>
topaz<br>
opal<br>
amethyst<br>
Key: 1, Value: garnet<br>
Key: 2, Value: topaz<br>
Key: 3, Value: opal<br>
Key: 4, Value: amethyst  </p>
<p>输出结果。</p>
<h2>删除键值对</h2>
<p>接下来的例子关注哈希表的删除。</p>
<pre><code>#!/usr/bin/ruby

names = Hash.new

names[1] = "Jane"
names[2] = "Thomas"
names[3] = "Robert"
names[4] = "Julia"
names[5] = "Rebecca"

names.delete 4
names.shift

puts names
</code></pre>
<p>这个脚本我们使用了两个方法：<em>delete</em>和<em>shift</em>。<em>delete</em>方法是删除指定的键的值，并将其返回。<em>shift</em>方法删除哈希表的第一对键值，并将其作为数组返回。</p>
<pre><code>names.delete 4
</code></pre>
<p>删除<em>4 =&gt; "Julia"</em>这对值。</p>
<pre><code>names.shift
</code></pre>
<p>这行代码删除<em>1 =&gt; "Jane"</em>这对值。</p>
<pre><code>$ ./deleteitem.rb  
{2=&gt;"Thomas", 3=&gt;"Robert", 5=&gt;"Rebecca"}
</code></pre>
<p>输出结果显示还剩的内容。</p>
<hr>
<p><em>reject</em>和<em>delete_if</em>方法可以从哈希表中移除多项内容。如果这些方法所给定的代码块中的条件式返回true，则删除对应的键值对。这两个方法有个重要区别。<em>reject</em>方法作用于复本，<em>delete_if</em>作用于原对象。</p>
<pre><code>#!/usr/local/bin/ruby

names1 = Hash.new

names1[1] = "Jane"
names1[2] = "Thomas"
names1[3] = "Robert"
names1[4] = "Julia"
names1[5] = "Rebecca"

puts names1.reject { |k, v| v =~ /R.*/ }
puts names1
puts names1.delete_if { |k, v| k&lt;=3 }
puts names1
</code></pre>
<p>这个例子使用上面的方法删除多项键值对。</p>
<pre><code>puts names1.reject { |k, v| v =~ /R.*/ }
</code></pre>
<p><em>reject</em>方法移除所有满足代码块中正则式的值，并返回修改后的哈希表，原哈希表不变。</p>
<pre><code>puts names1
</code></pre>
<p>这行的输出证实了原哈希表没有改变。</p>
<pre><code>puts names1.delete_if { |k, v| k&lt;=3 }
</code></pre>
<p>这里我们删除键小于等于3的键值对。这个方法修改了原对象。</p>
<pre><code>$ ./massdelete.rb   
{1=&gt;"Jane", 2=&gt;"Thomas", 4=&gt;"Julia"}  
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia", 5=&gt;"Rebecca"}  
{4=&gt;"Julia", 5=&gt;"Rebecca"}  
{4=&gt;"Julia", 5=&gt;"Rebecca"}
</code></pre>
<p>输出结果。</p>
<h2>添加内容</h2>
<p><em>merge</em>和<em>update</em>方法可以给哈希表添加键值对。</p>
<pre><code>#!/usr/bin/ruby

names1 = Hash.new

names1[1] = "Jane"
names1[2] = "Thomas"

names2 = Hash.new

names2[3] = "Robert"
names2[4] = "Julia"

names = names1.merge names2
puts names

names = names1.update names2
puts names
</code></pre>
<p>这个脚本中我们创建了两个哈希表，然后对它们调用了<em>merge</em>和<em>update</em>方法。</p>
<pre><code>names = names1.merge names2
puts names
</code></pre>
<p>合并<em>names1</em>和<em>names2</em>，结果分配给<em>names</em>。</p>
<pre><code>$ ./merge.rb  
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia"}  
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia"}
</code></pre>
<p>最后的哈希表包含了<em>names1</em>和<em>names2</em>的内容。</p>
<h2>merge与merge!</h2>
<p>最后一节，我们重述一下Ruby的习俗。一些Ruby的方法以感叹号结尾。这个标志在语法上没有意义，它只是表明调用这个方法会修改对象的内容。</p>
<pre><code>#!/usr/bin/ruby

names1 = Hash.new

names1[1] = "Jane"
names1[2] = "Thomas"

names2 = Hash.new

names2[3] = "Robert"
names2[4] = "Julia"

names = names1.merge names2
puts names
puts names1

names = names1.merge! names2
puts names
puts names1
</code></pre>
<p>我们展示了<em>merge</em>和<em>merge!</em>方法的不同。</p>
<pre><code>names = names1.merge names2
</code></pre>
<p><em>merge</em>不会修改<em>names1</em>，它作用于一个新的复本。</p>
<pre><code>names = names1.merge! names2
</code></pre>
<p><em>merge!</em>方法作用于原对象。<em>names1</em>被修改了。</p>
<pre><code>$ ./merge2.rb
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia"}
{1=&gt;"Jane", 2=&gt;"Thomas"}
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia"}
{1=&gt;"Jane", 2=&gt;"Thomas", 3=&gt;"Robert", 4=&gt;"Julia"}
</code></pre>
<p><em>merge2.rb</em>程序的输出。</p>
<p>在这章我们学习了Ruby的哈希表。</p>
<hr>
<p>原文地址： <a href="http://zetcode.com/lang/rubytutorial/hashes/">http://zetcode.com/lang/rubytutorial/hashes/</a><br>
翻译：龙昌  admin@longchangjin.cn<br>
完整教程：<a href="https://github.com/wusuopu/Ruby-tutorial">https://github.com/wusuopu/Ruby-tutorial</a> </p>
