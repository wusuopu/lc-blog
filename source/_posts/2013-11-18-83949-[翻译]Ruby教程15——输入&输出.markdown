---
layout: post
title: "[翻译]Ruby教程15——输入&输出"
data: 2013-11-18 12:05:19 +0000
comments: true
post_id: 83949
permalink: /archives/83949.html
categories: ["Ruby栏目"]
tags: ["Ruby", "翻译"]
---

<h1>Ruby的输入&amp;输出</h1>
<p>这部分的教程我们讨论Ruby的输入和输出操作。输入是程序从键盘、文件或者其他程序读取数据。输出是程序产生数据。可以输出到屏幕、文件或者其他程序。</p>
<p>输入&amp;输出是一个大的话题。稍后我们通过一些例子来大概介绍一下这个主题。Ruby中的一些类有些方法会执行输入&amp;输出操作。例如Kernel、IO、Dir或者File。</p>
<h2>输出到终端</h2>
<p>Ruby有一些在终端上打印输出的方法。这些方法是Kernel模块的一部分。Kernel模块的方法对于所有的Ruby对象都是有效的。</p>
<pre><code>#!/usr/bin/ruby

print "Apple "
print "Apple\n"

puts "Orange"
puts "Orange"
</code></pre>
<p><em>print</em>和<em>puts</em>方法会将文本输出到终端。它们的不同是会在最后加上一个换行符。</p>
<pre><code>print "Apple "
print "Apple\n"
</code></pre>
<p><em>print</em>在终端上打印两个连续的"Apple"字符串。如果我们想换一行，我们就必须显示的包含一个换行符。换行符是'\n'。<em>print</em>方法实际上是调用了对象的<em>to_s</em>方法。</p>
<pre><code>puts "Orange"
puts "Orange"
</code></pre>
<p><em>puts</em>方法在终端上打印两个字符串。每一个都各在一行。这个方法会自己添加换行符。</p>
<p>$ ./printing.rb 
Apple Apple<br>
Orange<br>
Orange  </p>
<p><em>printing.rb</em>脚本的输出结果。</p>
<p>根据Ruby的文档，<em>print</em>方法与<em>$stdout.print</em>是等效的。<em>$stdout</em>是全局变量，保存的标准输出流。</p>
<pre><code>#!/usr/bin/ruby

$stdout.print "Ruby language\n"
$stdout.puts "Python language"
</code></pre>
<p>我们使用$stdout变量打印两行内容。</p>
<p>Ruby有另外三种输出方法。</p>
<pre><code>#!/usr/bin/ruby

p "Lemon"
p "Lemon"

printf "There are %d apples\n", 3

putc 'K'
putc 0xA
</code></pre>
<p>这个例子中，我们展示了p、printf和putc方法。</p>
<pre><code>p "Lemon"
</code></pre>
<p><em>p</em>会调用对象的<em>inspect</em>方法。这个方法对于调试很有用。</p>
<pre><code>printf "There are %d apples\n", 3
</code></pre>
<p><em>printf</em>方法因C语言而出名。它能够将字符串格式化。</p>
<pre><code>putc 'K'
putc 0xA
</code></pre>
<p><em>putc</em>方法在终端上打印一个字符。第二行是打印一个换行符。0xA是换行符的十六进制代码。</p>
<p>$ ./printing3.rb <br>
"Lemon"<br>
"Lemon"<br>
There are 3 apples<br>
K  </p>
<p>printing3.rb的输出。</p>
<p>使用Kernel的方法在终端上打印数据是简短方便的方式。接下来的例子展示了更多在终端上打印数据的正式方法。</p>
<pre><code>ios = IO.new STDOUT.fileno
ios.write "ZetCode\n"
ios.close
</code></pre>
<p>这个例子我们打开标准输出流并往其中写入字符串。</p>
<pre><code>ios = IO.new STDOUT.fileno
</code></pre>
<p><em>new</em>方法返回一个可写的数据流。这个方法传入一个文件描述符数字。<em>STDOUT.fileno</em>返回了标准输出流的文件描述符。我们也可以直接写2。</p>
<pre><code>ios.write "ZetCode\n"
</code></pre>
<p>我们往打开的数据流写入字符串。</p>
<pre><code>ios.close
</code></pre>
<p>关闭输出流。</p>
<p>在Unix系统中标准的终端输出是连接到一个特殊的文件/dev/tty。将其打开并写入数据，既是写到终端上。</p>
<pre><code>#!/usr/bin/ruby

fd = IO.sysopen "/dev/tty", "w"
ios = IO.new(fd, "w")
ios.puts "ZetCode"
ios.close
</code></pre>
<p>写入到/dev/tty文件的一个例子。这仅能够在Unix上运行。</p>
<pre><code>fd = IO.sysopen "/dev/tty", "w"
</code></pre>
<p><em>sysopen</em>方法打开指定目录的文件，返回最后的文件描述符。</p>
<pre><code>ios = IO.new(fd, "w")
</code></pre>
<p>文件描述符数字用于打开一个数据流。</p>
<pre><code>ios.puts "ZetCode"
ios.close
</code></pre>
<p>往数据流中写入字符串然后关闭它。</p>
<h2>从终端输入</h2>
<p>这一节我们将创建一些处理输入的代码例子。</p>
<p>$stdin是一个全局变量保存了标准输入流。它可以用于从终端输入数据。</p>
<pre><code>#!/usr/bin/ruby

inp = $stdin.read
puts inp
</code></pre>
<p>上面的代码，我们使用<em>read</em>方法从终端读取输入。</p>
<pre><code>inp = $stdin.read
</code></pre>
<p><em>read</em>方法从标准输入读取数据直到文件结尾。EOF在Unix中是使用Ctrl + D产生，在Windows中是Ctrl + Z。</p>
<p>$ ./reading.rb<br>
Ruby language<br>
Ruby language  </p>
<p>我们启动了程序，这个脚本会读取数据直到我们按下Ctrl + D 或者 Ctrl + Z。</p>
<p>$ echo "ZetCode" | ./reading.rb<br>
ZetCode  </p>
<p>$ ./input.rb &lt; stones <br>
Garnet<br>
Topaz<br>
Opal<br>
Amethyst<br>
Ruby<br>
Jasper<br>
Pyrite<br>
Malachite<br>
Quartz  </p>
<p>如果我们使用重定向，脚本可以从其他程序或者文件中读取数据。</p>
<p>通常从终端读取数据是使用<em>gets</em>方法。</p>
<pre><code>#!/usr/bin/ruby

print "Enter your name: "
name = gets
puts "Hello #{name}"
</code></pre>
<p>使用<em>gets</em>方法读取用户输入的一行数据。</p>
<pre><code>name = gets
</code></pre>
<p><em>gets</em>方法从标准输入读取数据并分配给<em>name</em>变量。</p>
<pre><code>puts "Hello #{name}"
</code></pre>
<p>打印输入的数据。</p>
<p>$ ./readline.rb<br>
Enter your name: Jan<br>
Hello Jan  </p>
<p>输出结果。</p>
<p>接下来的两个脚本我们讨论<em>chomp</em>方法。它是字符串方法，用于移除字符串结尾的空白。当我们执行输入操作时它很有用。这个方法名和用法来自Perl语言。</p>
<pre><code>#!/usr/bin/ruby

print "Enter a string: "
inp = gets

puts "The string has #{inp.size} characters"
</code></pre>
<p>读取一个用户输入的字符串，并计算它的长度。</p>
<p>$ ./nochomp.rb <br>
Enter a string: Ruby<br>
The string has 5 characters  </p>
<p>这个提示表示了这个字符串有5个字符，因为它统计的换行符。</p>
<p>为了得到正确的结果，我们需要移除换行符。这正是<em>chomp</em>方法的作用。</p>
<pre><code>#!/usr/bin/ruby

print "Enter a string: "
inp = gets.chomp

puts "The string has #{inp.size} characters"
</code></pre>
<p>这次我们使用<em>chomp</em>方法截掉了换行符。</p>
<p>$ ./chomp.rb <br>
Enter a string: Ruby<br>
The string has 4 characters  </p>
<p><em>Ruby</em>字符串有4个字符。</p>
<h2>文件</h2>
<p>从Ruby官方文档我们知道<em>IO</em>类是所有输入输出的基类。<em>File</em>类只是<em>IO</em>类的一个子类。这两个类是紧密相关的。</p>
<pre><code>#!/usr/bin/ruby

f = File.open('output.txt', 'w')
f.puts "The Ruby tutorial"
f.close
</code></pre>
<p>第一个例子我们打开一个文件并往里面写入一些数据。</p>
<pre><code>f = File.open('output.txt', 'w')
</code></pre>
<p>以写模式打开'output.txt'文件。<em>open</em>方法返回数据流。</p>
<pre><code>f.puts "The Ruby tutorial"
</code></pre>
<p>往上面打开的数据流写入数据。<em>puts</em>方法也可用于往文件写入数据。</p>
<pre><code>f.close
</code></pre>
<p>最后关闭数据流。</p>
<p>$ ./simplewrite.rb<br>
$ cat output.txt <br>
The Ruby tutorial  </p>
<p>执行脚本并显示output.txt文件的内容。</p>
<p>以下是一个类似的例子显示了额外的方法。</p>
<pre><code>#!/usr/bin/ruby

File.open('langs', 'w') do |f|

    f.puts "Ruby"
    f.write "Java\n"
    f &lt;&lt; "Python\n"

end
</code></pre>
<p>如果<em>open</em>方法之后是一个代码块，Ruby会将打开的数据流传递给这个代码块。最后这个文件会自动关闭。</p>
<pre><code>f.puts "Ruby"
f.write "Java\n"
f &lt;&lt; "Python\n"
</code></pre>
<p>我们使用了三个方法写文件。</p>
<p>$ ./simplewrite2.rb<br>
$ cat langs <br>
Ruby<br>
Java<br>
Python  </p>
<p>执行这个脚本并查看里面的内容。</p>
<p>第二个例子我们显示一些<em>File</em>类的方法。</p>
<pre><code>#!/usr/bin/ruby

puts File.exists? 'tempfile'

f = File.new 'tempfile', 'w'
puts File.mtime 'tempfile'
puts f.size

File.rename 'tempfile', 'tempfile2'

f.close
</code></pre>
<p>这个例子创建了一个新文件'tempfile'并调用了一些方法。</p>
<pre><code>puts File.exists? 'tempfile'
</code></pre>
<p><em>exists?</em>方法检查给定的文件是否存在。这行返回false，因为我们还没有创建这个文件。</p>
<pre><code>f = File.new 'tempfile', 'w'
</code></pre>
<p>创建文件。</p>
<pre><code>puts File.mtime 'tempfile'
</code></pre>
<p><em>mtime</em>方法返回这个文件的最后修改时间。</p>
<pre><code>puts f.size
</code></pre>
<p>查看文件的大小。这里返回0,因为我们还没有往文件写入数据。</p>
<pre><code>File.rename 'tempfile', 'tempfile2'
</code></pre>
<p>最后我们使用<em>rename</em>将文件重命名。</p>
<p>$ ./testfile.rb<br>
false<br>
2011-11-05 16:19:36 +0100<br>
0  </p>
<p>输出结果。</p>
<p>接下来我们从磁盘文件读取内容。</p>
<pre><code>#!/usr/bin/ruby

f = File.open("stones")

while line = f.gets do
    puts line
end

f.close
</code></pre>
<p>这是一个简单的脚本，打开<em>stones</em>文件并在终端上打印它的内容。</p>
<pre><code>f = File.open("stones")
</code></pre>
<p>打开'stones'文件，默认是只读模式。</p>
<pre><code>while line = f.gets do
    puts line
end
</code></pre>
<p><em>gets</em>方法从I/O数据流读取一行数据。当读到文件结尾时while代码块退出。</p>
<p>$ ./readlines2.rb<br>
Garnet<br>
Topaz<br>
Opal<br>
Amethyst<br>
Ruby<br>
Jasper<br>
Pyrite<br>
Malachite<br>
Quartz  </p>
<p>例子输出结果。</p>
<p>下一个例子将从文件读取数据。</p>
<pre><code>#!/usr/bin/ruby

fname = 'alllines.rb'

File.readlines(fname).each do |line|
    puts line
end
</code></pre>
<p>这个脚本显示了另一个读取文件内容的方式。这个例子将它自己的代码打印在终端上。</p>
<pre><code>File.readlines(fname).each do |line|
    puts line
end
</code></pre>
<p><em>readlines</em>读取指定文件的每一行内容，并作为数据返回。我们使用<em>each</em>方法遍历数组，并将其在终端上打印。</p>
<pre><code>$ ./alllines.rb
#!/usr/bin/ruby

fname = 'alllines.rb'

File.readlines(fname).each do |line|
    puts line
end
</code></pre>
<p>输出结果。</p>
<h2>目录</h2>
<p>在这一节我们使用目录。Ruby中有一个Dir类可以操作目录。</p>
<pre><code>#!/usr/bin/ruby

Dir.mkdir "tmp"
puts Dir.exists? "tmp"

puts Dir.pwd
Dir.chdir "tmp"
puts Dir.pwd

Dir.chdir '..'
puts Dir.pwd
Dir.rmdir "tmp"
puts Dir.exists? "tmp"
</code></pre>
<p>这个脚本我们使用了Dir类的四个方法。</p>
<pre><code>Dir.mkdir "tmp"
</code></pre>
<p><em>mkdir</em>方法创建一个新目录'tmp'。</p>
<pre><code>puts Dir.exists? "tmp"
</code></pre>
<p>使用<em>exists?</em>方法检查一个目录是否存在。</p>
<pre><code>puts Dir.pwd
</code></pre>
<p><em>pwd</em>方法打印当前的工作目录。这是我们启动脚本的目录。</p>
<pre><code>Dir.chdir '..'
</code></pre>
<p><em>chdir</em>方法切换目录。'..'目录是当前工作目录的父目录。</p>
<pre><code>Dir.rmdir "tmp"
puts Dir.exists? "tmp"
</code></pre>
<p>最后我们使用<em>rmdir</em>方法移除目录。这时<em>exists?</em>方法返回false。</p>
<p>$ ./dirs.rb<br>
true<br>
/home/vronskij/programming/ruby/io<br>
/home/vronskij/programming/ruby/io/tmp<br>
/home/vronskij/programming/ruby/io<br>
false  </p>
<p>例子的输出结果。
第二个例子我们检索目录所有的条目，包括文件和子目录。</p>
<pre><code>#!/usr/bin/ruby

fls = Dir.entries '.'
puts fls.inspect
</code></pre>
<p><em>entries</em> 方法返回指定目录的所有条目。</p>
<pre><code>fls = Dir.entries '.'
puts fls.inspect
</code></pre>
<p>我们得到了当前目录下的文件和目录数组。'.'代表当前工作目录。<em>inspect</em>方法使得数组更加可读。</p>
<p>$ ./allfiles.rb<br>
["putc.rb", "simplewrite.rb", "readlines2.rb", "fileexists.rb~" ...  </p>
<p>输出结果。</p>
<p>第三个例子使用了home目录。每个计算机用户都有一个分配给他的唯一的目录，称为home目录。它是用于存放用户自己的文件。</p>
<pre><code>#!/usr/bin/ruby

puts Dir.home
puts Dir.home 'root'
</code></pre>
<p>这个脚本打印两个home目录。</p>
<pre><code>puts Dir.home
</code></pre>
<p>如果没有指定用户名则返回当前用户的home目录。当前用户是指定启动这个脚本文件的用户。</p>
<pre><code>puts Dir.home 'root'
</code></pre>
<p>这里我们指定了一个用户。</p>
<p>$ ./homedir.rb<br>
/home/vronskij<br>
/root  </p>
<p>输出结果。</p>
<h2>执行外部程序</h2>
<p>Ruby有一些方式可以执行外部程序。我们的例子中我们使用了Linux中有名的命令。Windows或者Mac读取可以使用他们自己系统的命令。</p>
<pre><code>#!/usr/bin/ruby

data = system 'ls'
puts data
</code></pre>
<p>调用<em>ls</em>命令列出目录内容。</p>
<pre><code>data = system 'ls'
</code></pre>
<p><em>system</em>命令在一个子shell中执行外部程序。这个方法是属于Kernel Ruby 模块的。</p>
<p>$ ./system.rb<br>
allfiles.rb   characters.rb  fileexists.rb   homedir.rb~ ...  </p>
<p>输出结果。</p>
<p>我们展示另外两个执行外部程序的方式。</p>
<pre><code>#!/usr/bin/ruby

out = `pwd`
puts out

out = %x[uptime]
puts out

out = %x[ls | grep 'readline']
puts out
</code></pre>
<p>执行外部程序我们可以使用反引号``和%x[]字符。</p>
<pre><code>out = `pwd`
</code></pre>
<p>这里我们使用反引号执行<em>pwd</em>命令。这个命令返回当前的工作目录。</p>
<pre><code>out = %x[uptime]
</code></pre>
<p>这里我得到<em>uptime</em>命令的输出，它显示系统运行了多久。</p>
<pre><code>out = %x[ls | grep 'readline']
</code></pre>
<p>我们也可以使用复合命令。</p>
<p>$ ./system2.rb<br>
/home/vronskij/programming/ruby/io<br>
 22:50:50 up  5:32,  1 user,  load average: 0.46, 0.44, 0.45<br>
readline.rb<br>
readline.rb~<br>
readlines2.rb<br>
readlines2.rb~  </p>
<p>输出结果。</p>
<p>我们可以使用<em>open</em>方法执行命令。这个方法是属于Kernel模块的。它创建一个IO对象连接到指定的数据流、文件或者子进程。如果我们想要连接到子进程，我们将打开路径以管道符(|)开头。</p>
<pre><code>#!/usr/bin/ruby

f = open("|ls -l |head -3")
out = f.read
puts out
f.close

puts $?.success?
</code></pre>
<p>这个例子我们打印了<em>ls -l | head -3</em>命令的结果。我们也还检查了子进程的状态。</p>
<pre><code>f = open("|ls -l |head -3")
</code></pre>
<p>连接到子进程。</p>
<pre><code>out = f.read
puts out
</code></pre>
<p>读取并打印子进程的数据。</p>
<pre><code>f.close
</code></pre>
<p>关闭文件句柄。</p>
<pre><code>puts $?.success?
</code></pre>
<p><em>$?</em>是一个特殊的变量，设置为上次执行过的子进程。如果子进程成功退出<em>success?</em>方法返回true。</p>
<p>$ ./system3.rb<br>
total 148<br>
-rwxr-xr-x 1 vronskij vronskij   57 2011-10-30 23:33 allfiles.rb<br>
-rwxr-xr-x 1 vronskij vronskij   58 2011-10-30 23:33 allfiles.rb~<br>
true  </p>
<p>输出结果。</p>
<h2>重定向标准输出</h2>
<p>Ruby对标准输入、标准输出和标准错误输出都有预定义的全局变量。<em>$stdout</em> 是标准输出的变量名。</p>
<pre><code>#!/usr/bin/ruby

$stdout = File.open "output.log", "a"

puts "Ruby"
puts "Java"

$stdout.close
$stdout = STDOUT

puts "Python"
</code></pre>
<p>上面的例子我们将输出重定向到output.log文件。</p>
<pre><code>$stdout = File.open "output.log", "a"
</code></pre>
<p>这行创建一个新的标准输出。现在标准输出流向ouput.log文件。这个文件以追加方式打开，如果文件不存在则创建，否则打开并将数据追加到文件尾部。</p>
<pre><code>puts "Ruby"
puts "Java"
</code></pre>
<p>打印两个字符串。这些字符串不会像平常一样在终端上显示了。而是追加到output.log文件中。</p>
<pre><code>$stdout.close
</code></pre>
<p>关闭文件句柄。</p>
<pre><code>$stdout = STDOUT

puts "Python"
</code></pre>
<p>使用预定义的常量<em>STDOUT</em>重新创建正常的标准输出。"Python"字符串在终端上打印。</p>
<p>这部分的教程我们使用了输入和输出操作。</p>
<hr>
<p>原文地址： <a href="http://zetcode.com/lang/rubytutorial/io/">http://zetcode.com/lang/rubytutorial/io/</a><br>
翻译：龙昌  admin@longchangjin.cn<br>
完整教程：<a href="https://github.com/wusuopu/Ruby-tutorial">https://github.com/wusuopu/Ruby-tutorial</a> </p>
