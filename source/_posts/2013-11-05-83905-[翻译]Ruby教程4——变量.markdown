---
layout: post
title: "[翻译]Ruby教程4——变量"
data: 2013-11-05 12:18:38 +0000
comments: true
post_id: 83905
permalink: /archives/83905.html
categories: ["Ruby栏目"]
tags: ["Ruby", "翻译"]
---

<h1>变量</h1>
<p>在这章的教程中我们将详细介绍变量。  </p>
<p>变量是保存数据的地址。每个变量都有唯一的一个名字，变量命名存在着一些约定。变量保存着数据对象，更确切的说变量是对数据所在的计算机内存地址的引用。每一个对象都具有一定的数据类型，内置的类型或者自定义的类型。Ruby属于动态语言，与Java、C或者Pascal之类的强类型语言不同，动态语言不用为变量定义确切数据类型，而是解释器在分配变量时决定它的类型。在Ruby中程序运行过程变量可以包含不同类型的不同值。</p>
<blockquote>
<p>#!/usr/bin/ruby  </p>
<p>i = 5<br>
 puts i<br>
 i = 7<br>
 puts i  </p>
</blockquote>
<p>变量是可变的，与常量不同，在程序运行过程中它们可以保存不同的值。在上面这个例子中有一个名为<em>i</em>的变量，首先赋值为5,然后又改为7。</p>
<h2>命名约定</h2>
<p>与其他语言一样，Ruby对变量标识符也有些命名约定。<br>
Ruby是区分大小写的，这意味着<em>age</em>和<em>Age</em>是两个变量名。许多语言都是区分大小写的，但是BASIC例外。我们改变字符的大小写可以创建不同的变量，但是不推荐这种做法。</p>
<blockquote>
<p>#!/usr/bin/ruby  </p>
<p>i = 5<br>
 p i<br>
 I = 7<br>
 p I  </p>
</blockquote>
<p>这个例子定义了两个变量<em>I</em>和<em>i</em>，它们保存了不同的值。</p>
<p>./case.rb<br>
5<br>
7  </p>
<p>以上是<em>case.rb</em>脚本的输出结果。</p>
<hr>
<p>在Ruby中变量名可由字母数字和下划线组成。为了使解释器能简单的从字面上区分数字和变量，变量名不能以数字开头。变量名同样也不能以大写字母开头，在Ruby中以大写字母开头会被认为是常量。</p>
<blockquote>
<p>#!/usr/bin/ruby  </p>
<p>name = "Jane"<br>
 placeOfBirth = "Bratislava"<br>
 placeOfBirth = "Kosice"<br>
 favorite_season = "autumn"  </p>
<p>n1 = 2<br>
 n2 = 4<br>
 n3 = 7  </p>
<p>p name, placeOfBirth, favorite_season<br>
 p n1, n2, n3  </p>
</blockquote>
<p>在这个脚本中我们展示一些变量的命名。</p>
<hr>
<p>变量名应该是有意义的。好的编程习惯是给变量取个具有描述性的名字，使得程序更加可读。</p>
<pre><code>#!/usr/bin/ruby

name = "Jane"
place_of_birth = "Bratislava"
occupation = "student"

i = 5
while i &gt; 0 do
    puts name
    i -= 1
end
</code></pre>
<p>这个脚本展示三个具有描述性的变量名。对于程序员来说<em>place_of_birth</em>比其他的名字如<em>pob</em>更具有描述性。在循环的时候通常选择一个比较简单的变量名。</p>
<h2>印章(Sigils)</h2>
<p>变量标识符可以以一些特殊的印章（Sigils）符号开头。印章（Sigils）是附加在标识符上的符号。在Ruby中变量印章（Sigils）表示了变量的作用域范围。在Perl中它是表示数据的类型。Ruby的变量印章（Sigils）符号有<em>$</em>和<em>@</em>。  </p>
<blockquote>
<p>#!/usr/bin/ruby  </p>
<p>tree_name = "pine"<br>
 $car_name = "Peugeot"<br>
 @sea_name = "Black sea"<br>
 @@species = "Cat"  </p>
<p>p local_variables<br>
 p global_variables.include? :$car_name<br>
 p self.instance_variables<br>
 p Object.class_variables  </p>
</blockquote>
<p>我们定义了四个不同作用域范围的变量。作用域表示了该变量可以被引用到的范围。我们使用了内置的方法来决定变量的作用域。</p>
<blockquote>
<p>tree_name = "pine"  </p>
</blockquote>
<p>不包含印章（Sigils）符号的变量是一个局部变量。局部变量只在局部有效，如在方法、代码块、模块内。</p>
<blockquote>
<p>$car_name = "Peugeot"  </p>
</blockquote>
<p>全局变量以<em>$</em>符号开头。它们在所有地方都是有效的。在程序中不要滥用全局变量。</p>
<blockquote>
<p>@sea_name = "Black sea"  </p>
</blockquote>
<p>实例变量是以<em>@</em>符号开头。它只有在实例对象中才有效。</p>
<blockquote>
<p>@@species = "Cat"  </p>
</blockquote>
<p>最后我们定义了一个类变量。它在所有属于这个类的实例中都有效。</p>
<blockquote>
<p>p local_variables  </p>
</blockquote>
<p><em>local_variables</em>是保存了当前环境下所有定义的局部变量的数组。</p>
<blockquote>
<p>p global_variables.include? :$car_name  </p>
</blockquote>
<p>类似的，<em>global_variables</em>是保存的全部全局变量的数组。由于全局变量很多，我们就不将它们全部在终端上打印了。每次Ruby脚本启动时都会预定义一些变量。我们使用数组的<em>include?</em>方法来检查我们全局变量是否定义了。同时请注意我们引用变量是用的符号。（符号是以一个冒号开头）</p>
<blockquote>
<p>p self.instance_variables  </p>
</blockquote>
<p><em>self</em>伪变量指向了<em>instance_variables</em>方法的接收对象。这个例子中的接收对象是<em>main</em>，Ruby的顶级执行区域。</p>
<blockquote>
<p>p Object.class_variables </p>
</blockquote>
<p>最后我们获取所有的类变量数组。<em>main</em>是一个Object类的实例。</p>
<p>$ ./sigils.rb<br>
[:tree_name]<br>
true<br>
[:@sea_name]<br>
[:@@species]  </p>
<p>以上是这个例子的输出结果，我们看到了变量的符号名。</p>
<h2>局部变量</h2>
<p>局部变量是只在Ruby源代码的局部区域有效。这个区域也称为局部作用域。局部变量是在Ruby的模块、方法、类中定义。</p>
<pre><code>#!/usr/bin/ruby

def method1
   x = 5
   p x    
end

method1

p x
</code></pre>
<p>我们定义了一个名为<em>method1</em>的方法，它有一个变量。这个变量是局部变量。这意味着这个变量只在这个方法内有效。我们只能在这个方法名到<em>end</em>关键字之间访问<em>x</em>变量。</p>
<pre><code>def method1
   x = 5
   p x    
end
</code></pre>
<p>以上定义了一个<em>method1</em>方法。在方法内部创建了一个局部变量<em>x</em>，然后将它的值打印到终端。</p>
<blockquote>
<p>method1  </p>
</blockquote>
<p>方法被调用。</p>
<blockquote>
<p>p x  </p>
</blockquote>
<p>我们试图在方法外部访问这个局部变量。这将导致<em>NameError</em>错误，Ruby解释器找不到这个标识符。</p>
<p>$ ./locals.rb<br>
5<br>
./locals.rb:11:in <code>&lt;main&gt;': undefined local variable   
or method</code>x' for main:Object (NameError)  </p>
<p>以上是这个例子的输出结果。</p>
<hr>
<p>以下例子是对前一个例子的简单修改。</p>
<pre><code>#!/usr/bin/ruby

x = 5

def method1
    x = 10
    p x
end

method1

p x
</code></pre>
<p>我们定义了两个<em>x</em>变量。一个是在<em>method1</em>内部定义的，另一个是在外部定义的。他们是两个不同的局部变量，并不会相互冲突。</p>
<pre><code>x = 5
</code></pre>
<p>我们创建了一个局部变量，它的值为5。这个变量的局部作用范围是<em>main</em>区域。它在<em>method1</em>内部是无效的。  </p>
<pre><code>def method1  
    x = 10  
    p x  
end
</code></pre>
<p>在<em>method1</em>内部创建了一个新的<em>x</em>局部变量，它的值是10.它存在于<em>method1</em>方法内部，在<em>end</em>关键字之后就会失效。</p>
<p>$ ./locals2.rb<br>
10<br>
5  </p>
<p>以上是输出结果。</p>
<hr>
<p>如果一个方法接收了参数，那么就会创建与这些参数相对应的局部变量。  </p>
<pre><code>#!/usr/bin/ruby


def rectangle_area a, b
    puts local_variables
    return a * b
end

puts rectangle_area 5, 6
</code></pre>
<p>我们定义了一个方法，它接收两个值，然后返回这个矩形的面积。</p>
<pre><code>def rectangle_area a, b
    puts local_variables
    return a * b
end
</code></pre>
<p><em>rectangle_area</em>方法接收两个参数。它们是矩形的边长，然后我们计算它的面积。对应于标识符<em>a</em>、<em>b</em>的两个局部变量将自动创建了。我们调用<em>local_variables</em>方法查看方法内部的所有局部变量。</p>
<pre><code>puts rectangle_area 5, 6
</code></pre>
<p>这里我们给<em>rectangle_area</em>方法传了两个值。这两个值将会分配给在方法内部创建的两个局部变量。  </p>
<p>$ ./parameters.rb<br>
a<br>
b<br>
30  </p>
<p>输出了三个结果。前两个是<em>rectangle_area</em>方法内部的局部变量名。第三个是面积的计算结果。</p>
<hr>
<p>一个方法可以定义在另一个方法的内部。内嵌方法有它自己的局部变量。</p>
<pre><code>#!/usr/bin/ruby

def method1

    def method2

        def method3
            m5, m6 = 3
            puts "Level 3"
            puts local_variables
        end

        m3, m4 = 3
        puts "Level 2"
        puts local_variables
        method3    
    end

    m1, m2 = 3
    puts "Level 1"
    puts local_variables
    method2

end

method1
</code></pre>
<p>在这个Ruby脚本中我们创建了三个方法。<em>method2</em>和<em>method3</em>是内嵌方法。<em>method2</em>定义在<em>method1</em>内部，<em>method3</em>又定义在<em>method2</em>内部。每一个方法的局部变量仅在这个方法内是可访问的。</p>
<p>$ ./lms.rb<br>
Level 1<br>
m1<br>
m2<br>
Level 2<br>
m3<br>
m4<br>
Level 3<br>
m5<br>
m6  </p>
<p>从输出结果我们可以知道<em>method1</em>有两个局部变量<em>m1</em>和<em>m2</em>。内嵌方法<em>method2</em>的局部变量有<em>m3</em>、<em>m4</em>。最内部的方法<em>method3</em>的局部变量是<em>m5</em>、<em>m6</em>。  </p>
<hr>
<p>这一节的最后一个例子将展示一些局部作用域的示范。</p>
<pre><code>module ModuleM
    m1, m2 = 4

    puts "Inside module"
    puts local_variables        
end


def method1
    v, w = 3
    puts "Inside method"
    puts local_variables
end


class Some
    x, y = 2
    puts "Inside class"
    puts local_variables
end

method1

t1, t2 = 7

puts "Inside toplevel"
puts local_variables
</code></pre>
<p>在这个例子我们分别在模块、方法、类和顶级环境中创建局部变量。<em>local_variables</em>是内核模块的一个方法，用于获取当前的所有局部变量。</p>
<pre><code>module ModuleM
    m1, m2 = 4

    puts "Inside module"
    puts local_variables        
end
</code></pre>
<p>模块是一个方法和常量的集合。我们创建了两个局部变量<em>m1</em>和<em>m2</em>。</p>
<pre><code>def method1
    v, w = 3
    puts "Inside method"
    puts local_variables
end
</code></pre>
<p>在<em>method1</em>方法中创建了两个局部变量<em>v</em>、<em>w</em>。</p>
<pre><code>class Some
    x, y = 2
    puts "Inside class"
    puts local_variables
end
</code></pre>
<p>在<em>Some</em>类中创建了两个局部变量<em>x</em>、<em>y</em>。</p>
<pre><code>t1, t2 = 7
</code></pre>
<p>最后我们为Ruby顶级环境创建两个局部变量。</p>
<p>$ ./locals3.rb <br>
Inside module<br>
m1<br>
m2<br>
Inside class<br>
x<br>
y<br>
Inside method<br>
v<br>
w<br>
Inside toplevel<br>
t1<br>
t2  </p>
<p>输出结果展示了各个作用域的局部变量。</p>
<h2>全局变量</h2>
<p>全局变量可以在脚本的任何地方访问到。它们以<em>$</em>符号开头。<br>
全局变量可能会引起很多程序错误，因此不鼓励使用全局变量。除非有原因要使用，否则建议使用局部变量。</p>
<pre><code>#!/usr/bin/ruby

$gb = 6


module ModuleM        
    puts "Inside module"
    puts $gb
end


def method1
    puts "Inside method"
    puts $gb
end


class Some
    puts "Inside class"
    puts $gb
end

method1

puts "Inside toplevel"
puts $gb
puts global_variables.include? :$gb
</code></pre>
<p>在这个例子中我们创建了一个全局变量<em>$gb</em>。这个变量在模块、方法、类和顶级环境都可以访问。全部变量<em>$gb</em>是所有的实体中都是有效的。</p>
<pre><code>$gb = 6
</code></pre>
<p>创建全局变量<em>$gb</em>，它的值为6。</p>
<pre><code>module ModuleM        
    puts "Inside module"
    puts $gb
end
</code></pre>
<p>在一个模块定义中我们打印全局变量的值。</p>
<pre><code>def method1
    puts "Inside method"
    puts $gb
end
</code></pre>
<p>在一个方法定义中我们打印全局变量的值。</p>
<pre><code>class Some
    puts "Inside class"
    puts $gb
end
</code></pre>
<p>在一个类定义中我们打印全局变量的值。</p>
<pre><code>puts $gb
puts global_variables.include? :$gb
</code></pre>
<p>在顶级环境下打印全局变量的值，并检查这个变量是否为全局变量。</p>
<p>$ ./globals.rb<br>
Inside module<br>
6<br>
Inside class<br>
6<br>
Inside method<br>
6<br>
Inside toplevel<br>
6<br>
true  </p>
<p>这个例子的输出结果确认了全局变量可以任何地方访问到。  </p>
<hr>
<p>当一个Ruby脚本启动时，它会访问多个预定义的全局变量。这些全局变量不认为有害并且能帮助完成一些常见的任务。</p>
<pre><code>#!/usr/bin/ruby

p $LOAD_PATH
p $:
</code></pre>
<p>这个脚本显示了<em>$LOAD_PATH</em>这个全局变量。这个变量列出了<em>require</em>方法会搜索的所有目录。<em>$:</em>是<em>$LOAD_PATH</em>的缩写。<br>
更多的全局变量会在本章的变量预定义这节中介绍。</p>
<h2>实例变量、类变量</h2>
<p>在这节将简要的介绍下实例变量和类变量。它们将会在面向对象那一章详细介绍。<br>
实例变量是属于具体某个对象实例的变量。每个对象都有它自己的变量。实例变量以<em>@</em>符号开头。类变量属于特定某个类的。这个类所创建的对象实例共享这个类的类变量。类变量以<em>@@</em>符号开头。</p>
<pre><code>#!/usr/bin/ruby

class Being

    @@is = true

    def initialize nm
        @name = nm
    end

    def to_s
        "This is #{@name}"
    end

    def does_exist?
        @@is
    end
end

b1 = Being.new "Being 1"
b2 = Being.new "Being 2"
b3 = Being.new "Being 3"

p b1, b2, b3

p b1.does_exist?
p b2.does_exist?
p b3.does_exist?
</code></pre>
<p>我们创建一个自定义<em>Being</em>类。这个<em>Being</em>类有一个类变量和一个实例变量。</p>
<pre><code>class Being        
    @@is = true
</code></pre>
<p><em>@@is</em>是一个类变量。这个类变量被所有<em>Being</em>类的实例所共享。这个例子的逻辑是判断是不是<em>Being</em>。</p>
<pre><code>def initialize nm
    @name = nm
end
</code></pre>
<p><em>initialize</em>方法是构造函数。这个方法在对象被创建时调用。用于创建<em>@name</em>实例变量。  </p>
<pre><code>def to_s
    "This is #{@name}"
end
</code></pre>
<p>当这个对象作为打印方法如p或者puts的参数时<em>to_s method</em>方法会被调用。这个方法返回这个对象便于人类阅读的描述内容。  </p>
<pre><code>def does_exist?
    @@is
end
</code></pre>
<p><em>does_exist?</em>返回类变量。</p>
<pre><code>b1 = Being.new "Being 1"
b2 = Being.new "Being 2"
b3 = Being.new "Being 3"
</code></pre>
<p>创建Being类的三个实例对象。每个对象拥有不同的名字。这个名字存储在实例变量中，对于每个对象它是唯一的。名字将会在<em>to_s</em>方法中使用，用于返回一个对该对象的简短描述。</p>
<pre><code>p b1, b2, b3
</code></pre>
<p>这个方法将刚创建的三个对象作为参数，它将调用每个对象的<em>to_s</em>方法。  </p>
<pre><code>p b1.does_exist?
p b2.does_exist?
p b3.does_exist?
</code></pre>
<p>最后我们调用每个实例对象的<em>does_exist?</em>方法。这三个方法会输出相同的结果，因为这个方法返回的是类变量。</p>
<pre><code>$ ./icvars.rb
This is Being 1
This is Being 2
This is Being 3
true
true
true
</code></pre>
<p>以上是这个例子的输出结果。前三条信息是唯一的，因为这个字符串是存储在实例变量中的。<em>true</em>值是类变量，它被调用的三次。  </p>
<h2>环境&amp;命令行变量</h2>
<p>可以用<em>ENV</em>常量来访问环境变量。它是一个Ruby的hash对象。每个环境变量都是<em>ENV</em>这个hash对象的键值。  </p>
<p><em>ARGV</em>常量存储了命令行的参数值。它们是在脚本启动时传递的。<em>ARGV</em>是一个数组，参数以字符串存储。<em>S*</em>是<em>ARGV</em>的别名。</p>
<p><em>ENV</em>和<em>ARGV</em>都是全局常量。</p>
<pre><code>#!/usr/bin/ruby

ARGV.each do |a|
  puts "Argument: #{a}"
end
</code></pre>
<p>这个脚本我们通过循环遍历打印了<em>ARGV</em>的每个值。</p>
<p>$ ./commandline.rb 1 2 3<br>
Argument: 1<br>
Argument: 2<br>
Argument: 3  </p>
<p>我们给了三个命令行参数。它们在终端上各打印了一行。</p>
<hr>
<p>接下来的例子介绍了处理环境变量。</p>
<pre><code>#!/usr/bin/ruby

puts ENV['SHELL']
puts ENV['LANG']
puts ENV['TERM']
</code></pre>
<p>这个脚本在终端上打印了三个环境变量的值。这些变量值的内容依赖于我们操作系统的系统设置。 </p>
<p>$ ./environment.rb<br>
/bin/bash<br>
en_US.utf8<br>
xterm  </p>
<p>以上是一个输出例子。</p>
<h2>伪变量</h2>
<p>在Ruby中有一些变量被称作伪变量。它们不同于常规的变量，不能给它们设置值。<br>
<em>self</em>是当前方法的接收者。<em>nil</em>是<em>NilClass</em>的唯一实例，它代表值不存在。<em>true</em>是<em>TrueClass</em>的唯一实例，它代表布尔真。<em>flase</em>是<em>FalseClass</em>是唯一实例，它代表布尔假。<br>
<em>true</em>和<em>false</em>是布尔数据类型。从另一个角度来看他们是特殊的类实例，这是因为在Ruby中一切皆对象。</p>
<pre><code>#!/usr/bin/ruby

p self
p nil
p true
p false

p self.class
p nil.class
p true.class
p false.class
</code></pre>
<p>这是一个伪变量的例子。我们打印所有的伪变量，然后再看它们的类名。  </p>
<pre><code>p self
</code></pre>
<p>在当前上下文<em>self</em>伪变量返回的是<em>main</em>执行的上下文。  </p>
<p>$ ./pseudo.rb<br>
main<br>
nil<br>
true<br>
false<br>
Object<br>
NilClass<br>
TrueClass<br>
FalseClass  </p>
<p>以上是例子的输出结果。</p>
<hr>
<p>在本节的第二个例子，我们将进一步分析<em>self</em>。</p>
<pre><code>#!/usr/bin/ruby

class Some
    puts self
end

class Other
    puts self
end

puts self
</code></pre>
<p>之前我们说过，<em>self</em>是对当前方法接收者的引用。以上例子展示了三个不同的接收者。 </p>
<pre><code>class Some
    puts self
end
</code></pre>
<p>这个接收者名为<em>Some</em>。</p>
<pre><code>class Other
    puts self
end
</code></pre>
<p>这是另一个接收者，名为：<em>Other</em>。</p>
<pre><code>puts self
</code></pre>
<p>第三个接收者是Ruby顶级环境。</p>
<p>$ ./pseudoself.rb <br>
Some <br>
Other <br>
main   </p>
<p>以上是例子的输出结果。</p>
<hr>
<p>本节的最后一个例子展示了另外三个伪变量。</p>
<pre><code>#!/usr/bin/ruby

if true
    puts "This message is shown"
end

if false
    puts "This message is not shown"
end

p $name
p $age
</code></pre>
<p>上面的例子展示了<em>true</em>、<em>false</em>和<em>nil</em>伪变量。 </p>
<pre><code>if true
    puts "This message is shown"
end
</code></pre>
<p><em>true</em>用于布尔表达式中。这条消息总是会打印的。  </p>
<pre><code>if false
    puts "This message is not shown"
end
</code></pre>
<p>这条消息永远不会打印。这个条件不成立。这个布尔表达式总是会返回一个负值。  </p>
<pre><code>p $name
p $age
</code></pre>
<p>如果全局变量没有初始化就引用，那么它们就会包含一个<em>nil</em>伪变量。这代表值不存在。  </p>
<p>$ ./pseudo2.rb<br>
This message is shown<br>
nil<br>
nil  </p>
<p>以上是<em>pseudo2.rb</em>脚本的输出结果。</p>
<h2>预定义变量</h2>
<p>Ruby中有很多预定义的全局变量。这是继承到Perl，Ruby受Perl的影响很大。Ruby脚本启动之后就可以访问这些变量了。接下来有些例子展示预定义变量。</p>
<pre><code>#!/usr/bin/ruby

print "Script name: ", $0, "\n"
print "Command line arguments: ", $*, "\n"

puts "Process number of this script: #{$$}"
</code></pre>
<p>以上使用了三个预定义变量。<em>$0</em>、<em>$*</em>和<em>$$</em>。<em>$0</em>存储了当前脚本的名字。<em>$*</em>存储了命令行参数。 <em>$$</em>存储了当前脚本程序的PID。  </p>
<p>$ ./predefined.rb 1 2 3 <br>
Script name: ./predefined.rb<br>
Command line arguments: ["1", "2", "3"]<br>
Process number of this script: 3122  </p>
<p>以上是一个输出例子。</p>
<hr>
<p><em>$?</em>全局变量存储了最后一个子进程的退出状态。  </p>
<pre><code>#!/usr/bin/ruby

system 'echo "Ruby"'
puts $?

%x[exit '1']
puts $?
</code></pre>
<p>我们执行两个子进程，然后使用<em>$?</em>查看它们的退出状态。</p>
<pre><code>system 'echo "Ruby"'
puts $?
</code></pre>
<p>使用<em>system</em>方法启动一个子进程。它是一个bash的echo命令，用于在终端输出消息。  </p>
<pre><code>%x[exit '1']
puts $?
</code></pre>
<p>第二个情况是使用状态1执行bash的exit命令。这次我们使用<em>%x</em> 操作符，用于执行一条被分隔符所选择的命令。</p>
<p>$ ./predefined2.rb<br>
Ruby<br>
pid 3131 exit 0<br>
pid 3133 exit 1  </p>
<p>第一个子进程退出状态为0,第二为1。 </p>
<hr>
<p><em>$;</em>变量存储了字符串<em>split</em>方法的默认分隔符。  </p>
<pre><code>#!/usr/bin/ruby

str = "1,2,3,4,5,6,7"
p str.split

$; = ","
p str.split
</code></pre>
<p>我们使用<em>$;</em>变量来控制字符串的<em>split</em>方法是如何分隔的。这个方法接收一个参数，用于确定字符串应该何处分隔。 如果这个参数省略了，那么将会使用<em>$;</em>的值。  </p>
<pre><code>$; = ","
p str.split
</code></pre>
<p>我们为<em>$;</em>分隔符指定个值。当<em>split</em>方法没有传递参数时，<em>$;</em>的值将会被使用。  </p>
<p>$ ./predefined3.rb<br>
["1,2,3,4,5,6,7"]<br>
["1", "2", "3", "4", "5", "6", "7"]  </p>
<p>在第一种情况下字符串没有被分割，第二种情况下字符串正确的被分割了。  </p>
<hr>
<p>最后我们展示三个用于正则表达式的全局预定义变量。  </p>
<pre><code>#!/usr/bin/ruby

"Her name is Jane" =~ /name/

p $`
p $&amp;
p $'
</code></pre>
<p>当我们对字符串使用<em>=~</em>保用符时，Ruby设置了一些变量。<em>$&amp;</em>变量设为最后一个匹配该正则式的内容。<em>$`</em>设为<em>$&amp;</em>之前的内容.<em>$’</em>为<em>$&amp;</em>之后的内容。</p>
<p>$ ./predefined4.rb<br>
"Her "<br>
"name"<br>
" is Jane"  </p>
<p>以上是这个例子的输出结果。</p>
<p>在这一章的教程中我们深入的学习了Ruby的变量。</p>
<hr>
<p>原文地址： <a href="http://zetcode.com/lang/rubytutorial/variables/">http://zetcode.com/lang/rubytutorial/variables/</a><br>
翻译：龙昌  admin@longchangjin.cn<br>
完整教程：<a href="https://github.com/wusuopu/Ruby-tutorial">https://github.com/wusuopu/Ruby-tutorial</a>  </p>
