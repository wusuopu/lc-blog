---
layout: post
title: 使用ruby开发vim插件
date: 2014-07-03 15:08:38 +0000
comments: true
post_id: 84117
permalink: /archives/84117.html
categories: ["Ruby栏目"]
tags: ["Ruby", "vim"]
---

<p>作为一个Vimmer和Pythoner，之前折腾过用python编写vim插件。现在作为半个Rubist，又开始继续折腾。</p>
<p>在开始编写插件之前，你需要确认 Vim 是否支持 Ruby，通过以下命令来判别：</p>
<pre><code>$ vim --version | grep +ruby
</code></pre>
<p>如果输出为空，则表示你当前的vim不支持Ruby，需要重新编译一下，并启用对Ruby的支持。</p>
<p>顺便说下我当前的环境是：</p>
<ul>
<li>vim 7.4  </li>
<li>ruby 2.1.0  </li>
</ul>
<p>环境检查没有问题那么就开始吧。<br>
在~/.vim/plugin目录下创建一个 demo.vim 文件。</p>
<p>在开头写上以下代码：</p>
<pre><code>if !has('ruby')
    echo "Error: Required vim compiled with +ruby"
    finish
endif
</code></pre>
<p>这段代码就是用 VimL 编写的，它将检查 Vim 是否支持 Ruby。</p>
<p>接下来再判断该插件是否已经加载过了，以免重复加载：</p>
<pre><code>if exists('g:loaded_ruby_demo_plugin')
    finish
endif
let g:loaded_ruby_demo_plugin = 1
</code></pre>
<p>所有的检查都没有问题，则开始插件的正文了。先定义一个函数。</p>
<pre><code>function! DemoFun1()
ruby&lt;&lt;EOF
buf = VIM::Buffer.current
puts "current buffer name: #{buf.name} number: #{buf.number} length: #{buf.length}"
EOF
endfunction
</code></pre>
<p>function与endfunction是vim中用于定义函数的，在”ruby&lt;&lt;EOF”和”EOF”之间部分的是Ruby代码。这个例子是输出当前缓冲区的名字、编号以及总行数。<br>
执行命令:call DemoFun1()，应该就可以看到输出结果了。</p>
<p>然后再举个例子说下函数的参数处理。</p>
<pre><code>function! DemoFun2(arg1)
ruby&lt;&lt; EOF
puts "you input: #{VIM.evaluate('a:arg1')}"
EOF
endfunction
</code></pre>
<p>这里定义了一个函数接收一个参数，然后将其输出。使用 VIM.evaluate 将vim的变量转化为Ruby的变量。</p>
<p>为了方便我们再定义两个命令，以简化对这两个函数的调用。</p>
<pre><code>command! -nargs=0 DemoFun1 call DemoFun1()  
command! -nargs=1 -rang DemoFun2 call DemoFun2(&lt;f-args&gt;)
</code></pre>
<p>要获取完整的代码可以访问： https://gist.github.com/wusuopu/c1182efefa85d4f6839b</p>
<p>接下来再简单说下vim中Ruby的使用。</p>
<p>vim为Ruby提供了一个VIM模块，通过它可以在Ruby中访问vim的接口。同时还提供了两个全局变量：$curwin、$curbuf，它们分别代表了当前窗口对象以及当前缓冲区对象。</p>
<p>VIM模块中有 Buffer 和 Window 两个对象，分别是用来对缓冲区和窗口进行操作的。同时VIM模块还提供了message、set_option、command和evaluate四个函数。</p>
<p>想要查看更多的帮忙信息，可以在vim中执行如下命令：</p>
<pre><code>:help ruby
</code></pre>
<p>好了，先写这么多吧，其余的自己去尝试吧。</p>
